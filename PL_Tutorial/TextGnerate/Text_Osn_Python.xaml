<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <!-- ДОКУМЕНТАЦИЯ
    
    ЦВЕТА БОРДЕРОВ: 
    1. Зеленый - для объяснения каких либо функций
    2. Желтый - обозначения, примечания или перечесление каких то аспектов языка
    3. Красный - пример использования
    
    
    ОФОРМЛЕНИЕ ТЕКСТА:
    1. заголовок не писать, он уже написан в верхней части окна
    2. каждую подтему делать заголовком, выровненным по центру. Размер заголовка - 35. Простой текст - 18
    3. перечисления помечать кружочком = " ● "
    4. пример кода пишется иммитируя строки, как в IDE, а каждая новая строка помечается знаком равняющимся его индексом - [1...+n]
    5. примечания, примеры, части для привлечения внимания - помечать жирным выделением
    6. стиль для текста и для TextRichBox уже написан, использовать их!
    7. &lt; = знак меньше <
    8. &gt; = знак больше >

    
    ОФОРМЛЕНИЕ КОДА:
    1. каждая подтема заключается в <Section>
    2. пример рамок для заключения ВАЖНЫХ частей:
        <BlockUIContainer>
            <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="200" HorizontalAlignment="Left" CornerRadius="10">
                <TextBlock>
                    [1] print(2 + 3)
                    <LineBreak/>
                    [2] print("Hello")
                </TextBlock>
            </Border>
        </BlockUIContainer>
    
    3. пример написания для обозначения, что находится в рамке:
        <LineBreak/>
        <LineBreak/>
        <Span FontSize="20">
            <Bold>Пример:</Bold> 
        </Span> 
    
    4. пример кода для оформления тем:
        <Style TargetType="{x:Type RichTextBox}" x:Key="CycleForRichTextBox">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="RichTextBox">
                        <RichTextBox HorizontalAlignment="Stretch" VerticalAlignment="Stretch" 
                                     Foreground="AliceBlue"
                                     Background="Transparent"
                                     FontSize="18"
                                     BorderThickness="0"
                                     IsReadOnly="True">
                            <FlowDocument>
                                <Section>
                                    <Paragraph>
                                   
                                    </Paragraph>
                                </Section>
                            </FlowDocument>
                        </RichTextBox>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        
    5. комментарием помечать, когда начинается новая ТЕМА - данный комментарий идет в ВЕРХНЕМ РЕГИСТРЕ
    
    6. комментарием помечать, когда начинается новая подтема - данный комментарий идет в НИЖНЕМ РЕГИСТРЕ
    
    
    
    
    
    
    
    
    ДОРАБОТКА СТАНДАРТА ОФОРМЛЕНИЯ БУДЕТ ДОРАБАТЫВАТЬСЯ СО ВРЕМЕНЕМ
    
    -->
    
    
    
    <!--ТЕКСТ СИНТАКСИСА-->
    <Style TargetType="{x:Type RichTextBox}" x:Key="SintaxRichTextBox">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RichTextBox">
                    <RichTextBox HorizontalAlignment="Stretch" VerticalAlignment="Stretch" 
                                 Foreground="AliceBlue"
                                 Background="Transparent"
                                 FontSize="18"
                                 BorderThickness="0"
                                 IsReadOnly="True">
                        <FlowDocument>
                            <!--написание прог-->
                            <Section>
                                <Paragraph>
                                    <Span FontSize="35" FontWeight="Bold">
                                        <Span Foreground="#272537">
                                            _____________________
                                        </Span> 
                                        Написание программы
                                    </Span>
                                </Paragraph>
                                
                                <Paragraph>
                                    Программа на языке Python состоит из набора инструкций. Каждая инструкция помещается на новую строку.
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold> 
                                    </Span> 
                                </Paragraph>

                                <BlockUIContainer>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="200" HorizontalAlignment="Left" CornerRadius="10">
                                        <TextBlock>
                                            [1] print(2 + 3)
                                            <LineBreak/>
                                            [2] print("Hello")
                                        </TextBlock>
                                    </Border>
                                </BlockUIContainer>

                                <Paragraph>
                                    <LineBreak/>
                                    Большую роль в Python играют отступы. Неправильно поставленный отступ фактически является ошибкой. 
                                    Например, в следующем случае мы получим ошибку, хотя код будет практически аналогичен приведенному выше:
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>
                                </Paragraph>

                                <BlockUIContainer>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="200" HorizontalAlignment="Left" CornerRadius="10">
                                        <TextBlock>
                                            [1] print(2 + 3) 
                                            <LineBreak/>
                                            [2] ____print("Hello")
                                        </TextBlock>
                                    </Border>
                                </BlockUIContainer>

                                <Paragraph>
                                    <LineBreak/>
                                    Однако стоит учитывать, что некоторые конструкции языка могут состоять из нескольких строк. Например, условная конструкция if:
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>
                                </Paragraph>

                                <BlockUIContainer>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="200" HorizontalAlignment="Left" CornerRadius="10">
                                        <TextBlock>
                                            [1] if 1 &gt; 2:
                                            <LineBreak/>
                                            [2] ____print("Hello")
                                        </TextBlock>
                                    </Border>
                                </BlockUIContainer>

                                <Paragraph>
                                    В данном случае если 1 меньше 2, то выводится строка "Hello". 
                                    И здесь уже должен быть отступ, так как инструкция print("Hello") 
                                    используется не сама по себе, а как часть условной конструкции if. Согласно PEP8
                                    отступ состоит из: <Bold>4 пробелов.</Bold>
                                    <LineBreak/>
                                    <LineBreak/>
                                </Paragraph>

                            </Section>
                            
                            
                            <!--Регистр-->
                            <Section>
                                <Paragraph>
                                    <Span FontSize="35" FontWeight="Bold">
                                        <Span Foreground="#272537">
                                            _____________________
                                        </Span>
                                        Регистрозависимость
                                    </Span>
                                </Paragraph>

                                <Paragraph>
                                    Python - регистрозависимый язык, поэтому выражения print и Print или PRINT представляют разные выражения.
                                    И если вместо метода print для вывода на консоль мы попробуем использовать метод PRINT, то будет ошибка:
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>
                                </Paragraph>

                                <BlockUIContainer>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="200" HorizontalAlignment="Left" CornerRadius="10">
                                        <TextBlock>
                                            [1] PRINT("Hello")
                                        </TextBlock>
                                    </Border>
                                </BlockUIContainer>

                                <Paragraph>
                                    <LineBreak/>
                                    Посмотри на данный пример, первые буквы имени перменной, находятся в разных регистрах, следует
                                    - это разные переменные
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>
                                </Paragraph>

                                <BlockUIContainer>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="250" HorizontalAlignment="Left" CornerRadius="10">
                                        <TextBlock>
                                            [1] nameColor = "Color"
                                            <LineBreak/>
                                            [2] NameColor = "Color"
                                        </TextBlock>
                                    </Border>
                                </BlockUIContainer>
                            </Section>
                            
                            <!--Комментарии-->
                            <Section>
                                <Paragraph>
                                    <Span FontSize="35" FontWeight="Bold">
                                        <Span Foreground="#272537">
                                            _________________________
                                        </Span>
                                        Комментарии
                                    </Span>
                                </Paragraph>

                                <Paragraph>
                                    Для отметки, что делает тот или иной участок кода, применяются комментарии. При трансляции и 
                                    выполнении программы интерпретатор игнорирует комментарии, поэтому они не оказывают никакого влияния на работу программы. 
                                    Комментарии в Python бывают блочные и строчные.
                                    <LineBreak/>
                                    <LineBreak/>
                                    Строчные коментарии предваряются знаком решетки - #. 
                                    Они могут располагаться на отдельной строке или на одной
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>
                                </Paragraph>

                                <BlockUIContainer>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="450" HorizontalAlignment="Left" CornerRadius="10">
                                        <TextBlock>
                                            [1] # это комментарий на отдельной строке
                                            <LineBreak/>
                                            [2] print("Hello") # а этот коммент на одной строке
                                        </TextBlock>
                                    </Border>
                                </BlockUIContainer>

                                <Paragraph>
                                    <LineBreak/>
                                    В блочных коментариях до и после текста комментария ставятся три одинарные кавычки: 
                                    '''текст комментария'''.
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>
                                </Paragraph>
                                <BlockUIContainer>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="450" HorizontalAlignment="Left" CornerRadius="10">
                                        <TextBlock>
                                            [1] '''
                                            <LineBreak/>
                                            [2] это комментарий на БЛОЧНЫЙ
                                            <LineBreak/>
                                            [3] он удобен для больших записей
                                            <LineBreak/>
                                            [4] '''
                                            <LineBreak/>
                                            [5] print('Hey')
                                        </TextBlock>
                                    </Border>
                                </BlockUIContainer>
                            </Section>
                        </FlowDocument>
                    </RichTextBox>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    
    
    

    <!--ТЕКСТ ПЕРЕМЕННЫЕ-->
    <Style TargetType="{x:Type RichTextBox}" x:Key="PeremenRichTextBox">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RichTextBox">
                    <RichTextBox HorizontalAlignment="Stretch" VerticalAlignment="Stretch" 
                                 Foreground="AliceBlue"
                                 Background="Transparent"
                                 FontSize="18"
                                 BorderThickness="0"
                                 IsReadOnly="True">
                        <FlowDocument>
                            <!--написание о переменных-->
                            <Section>
                                <Paragraph>
                                    <Span FontSize="35" FontWeight="Bold">
                                        <Span Foreground="#272537">
                                            _______________________
                                        </Span>
                                        О переменных
                                    </Span>
                                </Paragraph>

                                <Paragraph>
                                    Переменные предназначены для хранения данных. Название переменной в Python должно начинаться с алфавитного символа или со знака 
                                    подчеркивания и может содержать алфавитно-цифровые символы и знак подчеркивания. И кроме того, название переменной не должно 
                                    совпадать с названием ключевых слов языка Python.
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Ключевые слова:</Bold>
                                    </Span>
                                </Paragraph>

                                <BlockUIContainer>
                                    <Border BorderBrush="Yellow" BorderThickness="2" Padding="5" Width="320" HorizontalAlignment="Left" CornerRadius="10">
                                        <TextBlock>
                                            [1] False   |   await   |   else   |   import   |   pass
                                            <LineBreak/>
                                            [2] None    |   break   |   except   |   in    |    raise
                                            <LineBreak/>
                                            [3] True    |   class    |    finally   |   is    |    return
                                            <LineBreak/>
                                            [4] and    |    continue  |  for    |    lambda   |   try
                                            <LineBreak/>
                                            [5] as     |    def    |     from    |    nonlocal   |   while
                                            <LineBreak/>
                                            [6] assert    |    del    |    global    |    not    |    with
                                            <LineBreak/>
                                            [7] async   |   elif   |    if    |     or     |    yield  
                                        </TextBlock>
                                    </Border>
                                </BlockUIContainer>

                                <Paragraph>
                                    <LineBreak/>
                                    Создадим переменную "<Bold>name</Bold>", которая будет хранить в себе значение "<Bold>Python</Bold>":
                                </Paragraph>

                                <BlockUIContainer>
                                    <Border BorderBrush="Green" BorderThickness="2" Padding="5" Width="220" HorizontalAlignment="Left" CornerRadius="10">
                                        <TextBlock>
                                            [1] name = "Python"
                                        </TextBlock>
                                    </Border>
                                </BlockUIContainer>
                            </Section>

                            
                            <!--Типы наименований переменных-->
                            <Section>
                                <Paragraph>
                                    <Span FontSize="35" FontWeight="Bold">
                                        <Span Foreground="#272537">
                                            ______________
                                        </Span>
                                        Типы наименования переменных
                                    </Span>
                                </Paragraph>

                                <Paragraph>
                                    В пайтоне применяется два типа наименования переменных:
                                    <Bold>CamelCase</Bold> и
                                    <Bold>UnderscoreNotation</Bold> .
                                    <LineBreak/>
                                    <Bold>CamelCase</Bold> подразумевает, что каждое новое подслово в наименовании переменной начинается 
                                    с большой буквы.
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>
                                </Paragraph>

                                <BlockUIContainer>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="240" HorizontalAlignment="Left" CornerRadius="10">
                                        <TextBlock>
                                            [1] nameLang = "Python"
                                        </TextBlock>
                                    </Border>
                                </BlockUIContainer>

                                <Paragraph>
                                    <LineBreak/>
                                    <Bold>UnderscoreNotation</Bold> подразумевает, что подслова в наименовании переменной разделяются знаком подчеркивания.
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>
                                </Paragraph>

                                <BlockUIContainer>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="240" HorizontalAlignment="Left" CornerRadius="10">
                                        <TextBlock>
                                            [1] name_lang = "Scala"
                                        </TextBlock>
                                    </Border>
                                </BlockUIContainer>

                                <Paragraph>
                                    <LineBreak/>
                                    После инициализации перменной, мы с ней можем работать по разному. Проводить мат-операции, выводить, изменять
                                    переприсваивать и многое другое.
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>
                                </Paragraph>

                                <BlockUIContainer>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="780" HorizontalAlignment="Left" CornerRadius="10">
                                        <TextBlock>
                                            [1] # ВЫВЕДЕТ НА КОНСОЛЬ: Scala - мультипарадигмальный язык программирования
                                            <LineBreak/>
                                            [2] name_lang = "Scala"
                                            <LineBreak/>
                                            [3] print(f"{name_lang} - мультипарадигмальный язык программирования")
                                        </TextBlock>
                                    </Border>
                                </BlockUIContainer>

                                <Paragraph>
                                    <LineBreak/>
                                    Так же мы можем менять значения переменных.
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>
                                </Paragraph>

                                <BlockUIContainer>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="380" HorizontalAlignment="Left" CornerRadius="10">
                                        <TextBlock>
                                            [1] nameLang = "Scala" 
                                            <LineBreak/>
                                            [2] print(nameLang) # ВЫВЕДЕТ: Scala
                                            <LineBreak/>
                                            [3] nameLang = 'Python'
                                            <LineBreak/>
                                            [4] print(name_lang) # ВЫВЕДЕТ: Python
                                        </TextBlock>
                                    </Border>
                                </BlockUIContainer>
                            </Section>
                        </FlowDocument>
                    </RichTextBox>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    

    <!--ТЕКСТ ТИПЫ ДАННЫХ-->
    <Style TargetType="{x:Type RichTextBox}" x:Key="TypeDateRichTextBox">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RichTextBox">
                    <RichTextBox HorizontalAlignment="Stretch" VerticalAlignment="Stretch" 
                                 Foreground="AliceBlue"
                                 Background="Transparent"
                                 FontSize="18"
                                 BorderThickness="0"
                                 IsReadOnly="True">
                        <FlowDocument>
                            <Section>
                                <Paragraph>
                                    В Python есть несколько встроенных типов данных, которые используются для хранения и манипулирования значениями.
                                    Основные из них будут показаны снизу.
                                </Paragraph>
                            </Section>


                            <!--написание Числа-->
                            <Section>
                                <Paragraph>
                                    <Span FontSize="35" FontWeight="Bold">
                                        <Span Foreground="#272537">
                                            ____________________________
                                        </Span>
                                        Числа
                                    </Span>
                                </Paragraph>

                                <Paragraph>
                                    <Bold>● Целые числа (int):</Bold> Представляют целые числа, например, 1, 100, -10 и т. д. В Python нет ограничений на размер целых чисел.
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>
                                </Paragraph>

                                <BlockUIContainer>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="480" HorizontalAlignment="Left" CornerRadius="10">
                                        <TextBlock>
                                            [1] num = 32 # целое число - не отрицательное
                                            <LineBreak/>
                                            [2] num2 = -12 # целое число - отрицательное
                                        </TextBlock>
                                    </Border>
                                </BlockUIContainer>
                                
                                <Paragraph>
                                    <LineBreak/>
                                    <Bold>● Вещественные числа (float):</Bold> Представляют числа с плавающей точкой, такие как 3.14, 2.71828 и т. д. Они могут содержать десятичные значения и научную нотацию (например, 6.02e23).
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>
                                </Paragraph>

                                <BlockUIContainer>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="400" HorizontalAlignment="Left" CornerRadius="10">
                                        <TextBlock>
                                            [1] numFloat = 3.42 # вещественное число
                                        </TextBlock>
                                    </Border>
                                </BlockUIContainer>

                                <Paragraph>
                                    <LineBreak/>
                                    <Bold>● Комплексные числа (complex):</Bold> Представляются в виде a + bj, где a и b - вещественные числа, а j - мнимая единица.
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>
                                </Paragraph>

                                <BlockUIContainer>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="400" HorizontalAlignment="Left" CornerRadius="10">
                                        <TextBlock>
                                            [1] numComplex = 3 + 2j # коплексное число
                                        </TextBlock>
                                    </Border>
                                </BlockUIContainer>
                            </Section>

                            
                            <!--написание Cтрок-->

                            <Section>
                                <Paragraph>
                                    <LineBreak/>
                                    <Span FontSize="35" FontWeight="Bold">
                                        <Span Foreground="#272537">
                                            ____________________________
                                        </Span>
                                        Строки
                                    </Span>
                                </Paragraph>

                                <Paragraph>
                                    ● Строки представляют последовательность символов и используются для хранения текстовой информации. 
                                    Строки в Python могут быть заключены в одинарные (' ') или двойные кавычки (" ").
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>
                                </Paragraph>

                                <BlockUIContainer>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="300" HorizontalAlignment="Left" CornerRadius="10">
                                        <TextBlock>
                                            [1] str = "Hello World" # строка
                                        </TextBlock>
                                    </Border>
                                </BlockUIContainer>
                            </Section>


                            <!--написание Boolean-->

                            <Section>
                                <Paragraph>
                                    <LineBreak/>
                                    <Span FontSize="35" FontWeight="Bold">
                                        <Span Foreground="#272537">
                                            ____________________________
                                        </Span>
                                        Boolean
                                    </Span>
                                </Paragraph>

                                <Paragraph>
                                    ● Булев тип представляет два возможных значения: <Bold>True (истина)</Bold> и <Bold>False (ложь)</Bold>. 
                                    Он используется для выполнения логических операций и проверок условий.

                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>
                                </Paragraph>

                                <BlockUIContainer>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="300" HorizontalAlignment="Left" CornerRadius="10">
                                        <TextBlock>
                                            [1] elTr = True # True
                                            <LineBreak/>
                                            [2] elFl = False # False
                                        </TextBlock>
                                    </Border>
                                </BlockUIContainer>
                            </Section>


                            <!--написание List-->

                            <Section>
                                <Paragraph>
                                    <LineBreak/>
                                    <Span FontSize="35" FontWeight="Bold">
                                        <Span Foreground="#272537">
                                            __________________________
                                        </Span>
                                        Список (list)
                                    </Span>
                                </Paragraph>

                                <Paragraph>
                                    ● Списки представляют упорядоченные коллекции элементов, которые могут быть разных типов. 
                                    Они могут содержать любое количество элементов и изменяться (мутабельны).
                                    И заключаются в квадратные скобки.

                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>
                                </Paragraph>

                                <BlockUIContainer>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="400" HorizontalAlignment="Left" CornerRadius="10">
                                        <TextBlock>
                                            [1] l = [1, 3, 9, 43, 6] # список int
                                            <LineBreak/>
                                            [2] l1 = ['a', 'b', 'c'] # список string
                                            <LineBreak/>
                                            [3] l2 = [1, 4, 5, [99, 0, 20], 3] # список-списка
                                        </TextBlock>
                                    </Border>
                                </BlockUIContainer>
                            </Section>

                            

                            <!--написание Tuple-->

                            <Section>
                                <Paragraph>
                                    <LineBreak/>
                                    <Span FontSize="35" FontWeight="Bold">
                                        <Span Foreground="#272537">
                                            ________________________
                                        </Span>
                                        Кортеж (tuple)
                                    </Span>
                                </Paragraph>

                                <Paragraph>
                                    ● Кортежи похожи на списки, но неизменяемы (immutable), то есть их элементы не могут быть изменены после создания.
                                    И заключаются в круглые скобки.
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>
                                </Paragraph>

                                <BlockUIContainer>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="850" HorizontalAlignment="Left" CornerRadius="10">
                                        <TextBlock>
                                            [1] tup = (1, 3, 9, 43, 6) # кортеж int
                                            <LineBreak/>
                                            [2] tup1 = ('a', 3, 5, 'c') # кортеж со смешенными значениями
                                            <LineBreak/>
                                            # обрати внимание на запятую, если ее не поставить, то кортеж из одного элемента не создастся
                                            <LineBreak/>
                                            [3] tup2 = (3,) # кортеж из одного лемента
                                        </TextBlock>
                                    </Border>
                                </BlockUIContainer>
                            </Section>


                            <!--написание Set-->

                            <Section>
                                <Paragraph>
                                    <LineBreak/>
                                    <Span FontSize="35" FontWeight="Bold">
                                        <Span Foreground="#272537">
                                            ________________________
                                        </Span>
                                        Множества (set)
                                    </Span>
                                </Paragraph>

                                <Paragraph>
                                    ● Множества представляют уникальные и неупорядоченные коллекции элементов. 
                                    Они поддерживают операции над множествами, такие как объединение, пересечение и разность.
                                    И заключаются в фигурные скобки.
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>
                                </Paragraph>

                                <BlockUIContainer>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="600" HorizontalAlignment="Left" CornerRadius="10">
                                        <TextBlock>
                                            [1] set1 = {1, 2, 3, 4, 5} # множество int
                                            <LineBreak/>
                                            [2] set_of_strings = {"apple", "banana", "orange"} # множество string
                                        </TextBlock>
                                    </Border>
                                </BlockUIContainer>
                            </Section>


                            <!--написание Dict-->

                            <Section>
                                <Paragraph>
                                    <LineBreak/>
                                    <Span FontSize="35" FontWeight="Bold">
                                        <Span Foreground="#272537">
                                            ________________________
                                        </Span>
                                        Словарь (dict)
                                    </Span>
                                </Paragraph>

                                <Paragraph>
                                    ● Словари представляют отображения ключей на значения. 
                                    Они используются для хранения данных в виде пар "ключ-значение".
                                    Ключи должны быть уникальными в пределах словаря.
                                    И заключаются в фигурные скобки. Но отличаются от множеств тем, что у словаря есть "КЛЮЧ" и "ЗНАЧЕНИЕ".
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>
                                </Paragraph>

                                <BlockUIContainer>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="600" HorizontalAlignment="Left" CornerRadius="10">
                                        <TextBlock>
                                            [1] student = {"name": "John", "age": 20, "grade": "A"} # словарь
                                            <LineBreak/>
                                            [2] print(student)  # Вывод: {'name': 'John', 'age': 20, 'grade': 'A'}
                                        </TextBlock>
                                    </Border>
                                </BlockUIContainer>
                            </Section>
                            
                            
                            <!--написани Type-->
                            <Section>
                                <Paragraph>
                                    <LineBreak/>
                                    <Span FontSize="35" FontWeight="Bold">
                                        <Span Foreground="#272537">
                                            ________________________
                                        </Span>
                                        Функция - type
                                    </Span>
                                </Paragraph>

                                <Paragraph>
                                    С помощью встроенной функции type() динамически можно узнать текущий тип переменной:
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>
                                </Paragraph>

                                <BlockUIContainer>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="600" HorizontalAlignment="Left" CornerRadius="10">
                                        <TextBlock>
                                            [1] userId = "abc" # тип str
                                            <LineBreak/>
                                            [2] print(type(userId)) #  выведет - class'str'
                                            <LineBreak/>
                                            <LineBreak/>
                                            [3] userId = 43 # тип int
                                            <LineBreak/>
                                            [4] print(type(userId)) #  выведет - class'int'

                                        </TextBlock>
                                    </Border>
                                </BlockUIContainer>
                            </Section>
                            </FlowDocument>
                    </RichTextBox>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <!--ТЕКСТ ТИПЫ ДАННЫХ-->
    <Style TargetType="{x:Type RichTextBox}" x:Key="ConsoleInOutRichTextBox">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RichTextBox">
                    <RichTextBox HorizontalAlignment="Stretch" VerticalAlignment="Stretch" 
                                 Foreground="AliceBlue"
                                 Background="Transparent"
                                 FontSize="18"
                                 BorderThickness="0"
                                 IsReadOnly="True">
                        <FlowDocument>
                            <!--написание Ввод-->
                            <Section>
                                <Paragraph>
                                    
                                    <Span FontSize="35" FontWeight="Bold">
                                        <Span Foreground="#272537">
                                            ______________________
                                        </Span>
                                        Вывод на консоль
                                    </Span>
                                </Paragraph>

                                <Paragraph>
                                    Для вывода информации на консоль предназначена встроенная функция print(). 
                                    При вызове этой функции ей в скобках передается выводимое значение.
                                    А так же стоит учитовать, что по умолчанию эта функция выводит текст с новой строки.
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>
                                </Paragraph>

                                <BlockUIContainer>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="400" HorizontalAlignment="Left" CornerRadius="10">
                                        <TextBlock>
                                            [1] print('Hey Python') # выведет - Hey Python
                                        </TextBlock>
                                    </Border>
                                </BlockUIContainer>

                                <Paragraph>
                                    <LineBreak/>
                                    Для этого нам надо настроить поведение функции с помощью параметра end. 
                                    Этот параметр задает символы, которые добавляются в конце к выводимой строке или просто пустоту.
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Конструкция "end":</Bold>
                                    </Span>
                                </Paragraph>

                                <BlockUIContainer>
                                    <Border BorderBrush="Yellow" BorderThickness="2" Padding="5" Width="450" HorizontalAlignment="Left" CornerRadius="10">
                                        <TextBlock>
                                            [1] print('значения', end="конечный_символ")
                                        </TextBlock>
                                    </Border>
                                </BlockUIContainer>

                                <Paragraph>
                                    <LineBreak/>
                                    Сделаем так, чтобы функция print, не выводила на текст с новой строки, а печатала все на одной.
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>
                                </Paragraph>

                                <BlockUIContainer>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="450" HorizontalAlignment="Left" CornerRadius="10">
                                        <TextBlock>
                                            [1] print('Hey', end=" ")
                                            <LineBreak/>
                                            [2] print('Python', end=" ")
                                            [3] print('!')
                                            <LineBreak/>
                                            [4] # вывод получится - Hey Python!
                                        </TextBlock>
                                    </Border>
                                </BlockUIContainer>

                                <Paragraph>
                                    <LineBreak/>
                                    Или это может быть набор символов.
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>
                                </Paragraph>

                                <BlockUIContainer>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="450" HorizontalAlignment="Left" CornerRadius="10">
                                        <TextBlock>
                                            [1] print('Hey', end=" [S] ")
                                            <LineBreak/>
                                            [2] print('Python', end=" [S] ")
                                            [3] print('!')
                                            <LineBreak/>
                                            [4] # вывод получится - Hey [S] Python [S] !
                                        </TextBlock>
                                    </Border>
                                </BlockUIContainer>
                            </Section>


                            <!--написание Работа с текстом-->
                            <Section>
                                <Paragraph>
                                    <LineBreak/>
                                    <Span FontSize="35" FontWeight="Bold">
                                        <Span Foreground="#272537">
                                            _______________________
                                        </Span>
                                        Работа с текстом
                                    </Span>
                                </Paragraph>

                                <Paragraph>
                                    Если вы хотите вывести большой кусок текста, или занести его в перменную, не мучаясь с переносами.
                                    То лучше использовать конструкцию тройных кавычек - ''' '''.
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>
                                </Paragraph>

                                <BlockUIContainer>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="450" HorizontalAlignment="Left" CornerRadius="10">
                                        <TextBlock>
                                            [1] print('''aaaaaaaa
                                            <LineBreak/>
                                            [2] bbbbbbb
                                            <LineBreak/>
                                            [3] ccccccccc''')
                                            <LineBreak/>
                                            <LineBreak/>
                                            # ВЫВОД ПОЛУЧИТСЯ СЛЕДУЮЩИЙ:
                                            <LineBreak/>
                                            aaaaaaaa
                                            <LineBreak/>
                                            bbbbbbb
                                            <LineBreak/>
                                            ccccccccc
                                        </TextBlock>
                                    </Border>
                                </BlockUIContainer>

                                <Paragraph>
                                    <LineBreak/>
                                    Так же такие текста можно заносить в переменную.
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>
                                </Paragraph>

                                <BlockUIContainer>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="450" HorizontalAlignment="Left" CornerRadius="10">
                                        <TextBlock>
                                            [1] looongStr = '''aaaaaaaa
                                            <LineBreak/>
                                            [2] bbbbbbb
                                            <LineBreak/>
                                            [3] ccccccccc'''
                                            <LineBreak/>
                                            [4] print(looongStr)
                                            <LineBreak/>
                                            <LineBreak/>
                                            # ВЫВОД ПОЛУЧИТСЯ СЛЕДУЮЩИЙ:
                                            <LineBreak/>
                                            aaaaaaaa
                                            <LineBreak/>
                                            bbbbbbb
                                            <LineBreak/>
                                            ccccccccc
                                        </TextBlock>
                                    </Border>
                                </BlockUIContainer>
                            </Section>


                            <!--написание Управле послед-->
                            <Section>
                                <Paragraph>
                                    <Span FontSize="35" FontWeight="Bold">
                                        <Span Foreground="#272537">
                                            _______________________
                                        </Span>
                                        Работа с текстом
                                    </Span>
                                </Paragraph>

                                <Paragraph>
                                    Строка может содержать ряд специальных символов - управляющих последовательностей. Приведу основные.
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Спец-символы - управляющей последовательности:</Bold>
                                    </Span>
                                </Paragraph>

                                <BlockUIContainer>
                                    <Border BorderBrush="Yellow" BorderThickness="2" Padding="5" Width="950" HorizontalAlignment="Left" CornerRadius="10">
                                        <TextBlock>
                                            \n - символ новой строки. Используется для перехода на новую строку.
                                            <LineBreak/>
                                            \t - символ горизонтальной табуляции. Используется для создания отступа или добавления табуляции.
                                            <LineBreak/>
                                            \" - двойная кавычка. Используется для включения символа двойной кавычки внутри строки,<LineBreak/> ограниченной двойными кавычками.
                                            <LineBreak/>
                                            \' - одинарная кавычка. Используется для включения символа одинарной кавычки внутри строки, <LineBreak/>ограниченной одинарными кавычками.
                                            <LineBreak/>
                                            \\ - обратная косая черта. Используется для включения символа обратной косой черты в строку.
                                            <LineBreak/>
                                            \r - символ возврата каретки. Используется для возврата каретки в начало строки.
                                            <LineBreak/>
                                            \b - символ возврата на одну позицию назад (backspace). Используется для удаления последнего символа.
                                        </TextBlock>
                                    </Border>
                                </BlockUIContainer>

                                <Paragraph>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>
                                </Paragraph>

                                <BlockUIContainer>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="350" HorizontalAlignment="Left" CornerRadius="10">
                                        <TextBlock>
                                            [1] text = "Message:\n\"Hello World\""
                                            <LineBreak/>
                                            [2] print(text)
                                            <LineBreak/>
                                            <LineBreak/>
                                            # ВЫВОД БУДЕТ СЛЕДУЮЩИЙ
                                            <LineBreak/>
                                            Message:
                                            <LineBreak/>
                                            "Hello World"
                                        </TextBlock>
                                    </Border>
                                </BlockUIContainer>
                            </Section>


                            
                            <!--написание F-строка-->
                            <Section>
                                <Paragraph>
                                    <Span FontSize="35" FontWeight="Bold">
                                        <Span Foreground="#272537">
                                            ___________________________
                                        </Span>
                                        F-строка
                                    </Span>
                                </Paragraph>

                                <Paragraph>
                                    Python позволяет встравивать в строку значения других переменных. 
                                    Для этого внутри строки переменные размещаются в фигурных скобках {}, 
                                    а перед всей строкой ставится символ f.
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>
                                </Paragraph>

                                <BlockUIContainer>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="450" HorizontalAlignment="Left" CornerRadius="10">
                                        <TextBlock>
                                            [1] userName = "Tom"
                                            <LineBreak/>
                                            [2] userAge = 37
                                            <LineBreak/>
                                            [3] user = f"name: {userName}  age: {userAge}"
                                            <LineBreak/>
                                            [4] print(user)   # name: Tom  age: 37
                                        </TextBlock>
                                    </Border>
                                </BlockUIContainer>

                                <Paragraph>
                                    F-строка, очень полезна и удобна, когда вам надо работать много с текстом
                                </Paragraph>
                            </Section>


                            <!--написание Ввод-->
                            <Section>
                                <Paragraph>
                                    <Span FontSize="35" FontWeight="Bold">
                                        <Span Foreground="#272537">
                                            _______________________
                                        </Span>
                                        Консольный ввод
                                    </Span>
                                </Paragraph>

                                <Paragraph>
                                    Наряду с выводом на консоль мы можем получать ввод пользователя с консоли, получать вводимые данные. 
                                    Для этого в Python определена функция input(). В эту функцию передается приглашение к вводу. 
                                    А результат ввода мы можем сохранить в переменную. Например, определим код для ввода пользователем имени.
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>
                                </Paragraph>

                                <BlockUIContainer>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="900" HorizontalAlignment="Left" CornerRadius="10">
                                        <TextBlock>
                                            [1] name = input("Введите свое имя: ")
                                            <LineBreak/>
                                            [2] print(f"Ваше имя: {name}")
                                            <LineBreak/>
                                            <LineBreak/>
                                            # ВЫВОД БУДЕТ СЛЕДУЮЩИЙ
                                            <LineBreak/>
                                            Введите свое имя: Alex <Span Foreground="#272537">_____</Span> # тут питон запрашивает у человека, чтобы он ввел на консоль свое имя
                                            <LineBreak/>
                                            Ваше имя: Alex <Span Foreground="#272537">_____</Span> # тут наш вывод текста, с нашим именем


                                        </TextBlock>
                                    </Border>
                                </BlockUIContainer>
                            </Section>
                        </FlowDocument>
                    </RichTextBox>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    


    <!--АРИФМЕТИЧЕСКИЕ ОПЕРАЦИИ-->
    <Style TargetType="{x:Type RichTextBox}" x:Key="ArifmRichTextBox">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RichTextBox">
                    <RichTextBox HorizontalAlignment="Stretch" VerticalAlignment="Stretch" 
                                 Foreground="AliceBlue"
                                 Background="Transparent"
                                 FontSize="18"
                                 BorderThickness="0"
                                 IsReadOnly="True">
                        <FlowDocument>
                            <!--написание Ввод-->
                            <Section>
                                <Paragraph>
                                    Python поддерживаются все арифметические операции. Рассмотрим все операции.
                                </Paragraph>
                            </Section>

                            <!--написание Арифм операции-->
                            <Section>
                                <Paragraph>
                                    <LineBreak/>
                                    <Span FontSize="35" FontWeight="Bold">
                                        <Span Foreground="#272537">
                                            __________________
                                        </Span>
                                        Арифметические операции
                                    </Span>
                                </Paragraph>

                                <Paragraph FontSize="20">
                                    ● <Bold>Сложение</Bold>
                                </Paragraph>

                                <BlockUIContainer>
                                    <Border BorderBrush="Green" BorderThickness="2" Padding="5" Width="350" HorizontalAlignment="Left" CornerRadius="10">
                                        <TextBlock>
                                            [1] print(1 + 1) <Span Foreground="#272537">___</Span> # 2
                                        </TextBlock>
                                    </Border>
                                </BlockUIContainer>

                                <Paragraph FontSize="20">
                                    <LineBreak/>
                                    ● <Bold>Вычитание</Bold>
                                </Paragraph>

                                <BlockUIContainer>
                                    <Border BorderBrush="Green" BorderThickness="2" Padding="5" Width="350" HorizontalAlignment="Left" CornerRadius="10">
                                        <TextBlock>
                                            [1] print(5 - 1) <Span Foreground="#272537">___</Span> # 4
                                        </TextBlock>
                                    </Border>
                                </BlockUIContainer>

                                <Paragraph FontSize="20">
                                    <LineBreak/>
                                    ● <Bold>Умножение</Bold>
                                </Paragraph>

                                <BlockUIContainer>
                                    <Border BorderBrush="Green" BorderThickness="2" Padding="5" Width="350" HorizontalAlignment="Left" CornerRadius="10">
                                        <TextBlock>
                                            [1] print(5 * 3) <Span Foreground="#272537">___</Span> # 15
                                        </TextBlock>
                                    </Border>
                                </BlockUIContainer>

                                <Paragraph FontSize="20">
                                    <LineBreak/>
                                    ● <Bold>Деление</Bold>
                                </Paragraph>

                                <BlockUIContainer>
                                    <Border BorderBrush="Green" BorderThickness="2" Padding="5" Width="350" HorizontalAlignment="Left" CornerRadius="10">
                                        <TextBlock>
                                            [1] print(6 / 2) <Span Foreground="#272537">___</Span> # 3.0
                                        </TextBlock>
                                    </Border>
                                </BlockUIContainer>

                                <Paragraph FontSize="20">
                                    <LineBreak/>
                                    ● <Bold>Целочисленное деление</Bold>
                                </Paragraph>

                                <BlockUIContainer>
                                    <Border BorderBrush="Green" BorderThickness="2" Padding="5" Width="350" HorizontalAlignment="Left" CornerRadius="10">
                                        <TextBlock>
                                            [1] print(6 // 2) <Span Foreground="#272537">___</Span> # 3
                                        </TextBlock>
                                    </Border>
                                </BlockUIContainer>

                                <Paragraph FontSize="20">
                                    <LineBreak/>
                                    ● <Bold>Возведение в степень</Bold>
                                </Paragraph>

                                <BlockUIContainer>
                                    <Border BorderBrush="Green" BorderThickness="2" Padding="5" Width="350" HorizontalAlignment="Left" CornerRadius="10">
                                        <TextBlock>
                                            [1] print(6 ** 2) <Span Foreground="#272537">___</Span> # 36
                                        </TextBlock>
                                    </Border>
                                </BlockUIContainer>

                                <Paragraph FontSize="20">
                                    <LineBreak/>
                                    ● <Bold>Получение остатка от деления</Bold>
                                </Paragraph>

                                <BlockUIContainer>
                                    <Border BorderBrush="Green" BorderThickness="2" Padding="5" Width="350" HorizontalAlignment="Left" CornerRadius="10">
                                        <TextBlock>
                                            [1] print(7 % 2) <Span Foreground="#272537">___</Span> # остаток от деления 7 на 2 = 1
                                        </TextBlock>
                                    </Border>
                                </BlockUIContainer>
                            </Section>


                            <!--написание Арифметические операции с присвоением-->
                            <Section>
                                <Paragraph>
                                    <LineBreak/>
                                    <Span FontSize="35" FontWeight="Bold">
                                        <Span Foreground="#272537">
                                            __________
                                        </Span>
                                        Арифметические операции с присвоением
                                    </Span>
                                </Paragraph>

                                <Paragraph>
                                    Ряд специальных операций позволяют использовать присвоить результат операции первому операнду.
                                </Paragraph>

                                <Paragraph FontSize="20">
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Примеры операций:</Bold>
                                    </Span>
                                </Paragraph>

                                <BlockUIContainer>
                                    <Border BorderBrush="Yellow" BorderThickness="2" Padding="5" Width="550" HorizontalAlignment="Left" CornerRadius="10">
                                        <TextBlock>
                                            ● <Bold>+= Присвоение результата сложения</Bold>
                                            <LineBreak/>
                                            ● <Bold>-= Присвоение результата вычитания</Bold>
                                            <LineBreak/>
                                            ● <Bold>/= Присвоение результата от деления</Bold>
                                            <LineBreak/>
                                            ● <Bold>//= Присвоение результата целочисленного деления</Bold>
                                            <LineBreak/>
                                            ● <Bold>**= Присвоение степени числа</Bold>
                                            <LineBreak/>
                                            ● <Bold>%= Присвоение остатка от деления</Bold>
                                        </TextBlock>
                                    </Border>
                                </BlockUIContainer>

                                <Paragraph FontSize="20">
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Примеры:</Bold>
                                    </Span>
                                </Paragraph>

                                <BlockUIContainer>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="350" HorizontalAlignment="Left" CornerRadius="10">
                                        <TextBlock>
                                            [1] number = 10
                                            <LineBreak/>
                                            [2] number += 5
                                            <LineBreak/>
                                            [3] print(number) <Span Foreground="#272537">___</Span> # 15
                                            <LineBreak/>
                                            [4]
                                            <LineBreak/>
                                            [5] number -= 3
                                            <LineBreak/>
                                            [6] print(number) <Span Foreground="#272537">___</Span> # 12
                                            <LineBreak/>
                                            [7]
                                            <LineBreak/>
                                            [8] number *= 4
                                            <LineBreak/>
                                            [9] print(number) <Span Foreground="#272537">___</Span> # 48
                                        </TextBlock>
                                    </Border>
                                </BlockUIContainer>
                            </Section>
                        </FlowDocument>
                    </RichTextBox>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>






    <!--ПРЕОБРАЗОВАНИЕ ТИПОВ ОПЕРАЦИИ-->
    <Style TargetType="{x:Type RichTextBox}" x:Key="ConvertTypeRichTextBox">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RichTextBox">
                    <RichTextBox HorizontalAlignment="Stretch" VerticalAlignment="Stretch" 
                                 Foreground="AliceBlue"
                                 Background="Transparent"
                                 FontSize="18"
                                 BorderThickness="0"
                                 IsReadOnly="True">
                        <FlowDocument>
                            <!--написание Целое число-->
                            <Section>
                                <Paragraph>
                                    
                                    <Span FontSize="35" FontWeight="Bold">
                                        <Span Foreground="#272537">
                                            ______________
                                        </Span>
                                        Преобразование в целое число
                                    </Span>
                                </Paragraph>

                                <Paragraph>
                                    ● Используйте функцию int() для преобразования числа с плавающей точкой или строки в целое число.
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Примеры:</Bold>
                                    </Span>
                                </Paragraph>

                                <BlockUIContainer>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="600" HorizontalAlignment="Left" CornerRadius="10">
                                        <TextBlock>
                                            [1] x = int(3.14) <Span Foreground="#272537">___</Span> # преобразуется в просто целую цифру: 3
                                            <LineBreak/>
                                            [2] y = int("42") <Span Foreground="#272537">___</Span> # строка преобразуется в просто целое число: 42
                                        </TextBlock>
                                    </Border>
                                </BlockUIContainer>

                            </Section>


                            <!--написание Дробное число-->
                            <Section>
                                <Paragraph>
                                    <LineBreak/>
                                    <Span FontSize="35" FontWeight="Bold">
                                        <Span Foreground="#272537">
                                            _______
                                        </Span>
                                        Преобразование в число с плавающей точкой
                                    </Span>
                                </Paragraph>

                                <Paragraph>
                                    ● Используйте функцию float() для преобразования целого числа или строки в число с плавающей точкой.
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Примеры:</Bold>
                                    </Span>
                                </Paragraph>

                                <BlockUIContainer>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="700" HorizontalAlignment="Left" CornerRadius="10">
                                        <TextBlock>
                                            [1] x = float(42) <Span Foreground="#272537">___</Span> # преобразуется в число с плавающей точкой: 42.0
                                            <LineBreak/>
                                            [2] y = float("3.14") <Span Foreground="#272537">___</Span> # строка преобразуется в число с плавающей точкой: 3.14
                                        </TextBlock>
                                    </Border>
                                </BlockUIContainer>

                            </Section>



                            <!--написание Преобразование в строку-->
                            <Section>
                                <Paragraph>
                                    <LineBreak/>
                                    <Span FontSize="35" FontWeight="Bold">
                                        <Span Foreground="#272537">
                                            ___________________
                                        </Span>
                                        Преобразование в строку
                                    </Span>
                                </Paragraph>

                                <Paragraph>
                                    ● Используйте функцию str() для преобразования числа или другого объекта в строку.
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Примеры:</Bold>
                                    </Span>
                                </Paragraph>

                                <BlockUIContainer>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="600" HorizontalAlignment="Left" CornerRadius="10">
                                        <TextBlock>
                                            [1] x = str(42) <Span Foreground="#272537">___</Span> # число преобразуется в строку: "42"
                                            <LineBreak/>
                                            [2] y = str(3.14) <Span Foreground="#272537">___</Span> # число преобразуется в строку: 3.14
                                        </TextBlock>
                                    </Border>
                                </BlockUIContainer>

                            </Section>




                            <!--написание Логическое значение-->
                            <Section>
                                <Paragraph>
                                    <LineBreak/>
                                    <Span FontSize="35" FontWeight="Bold">
                                        <Span Foreground="#272537">
                                            ___________
                                        </Span>
                                        Преобразование в логическое значение
                                    </Span>
                                </Paragraph>

                                <Paragraph>
                                    ● Используйте функцию bool() для преобразования значения в логическое (булево) значение. 
                                    Пустые значения, ноль и пустая строка преобразуются в False, а любые другие значения преобразуются в True.
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Примеры:</Bold>
                                    </Span>
                                </Paragraph>

                                <BlockUIContainer>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="600" HorizontalAlignment="Left" CornerRadius="10">
                                        <TextBlock>
                                            [1] x = bool(42) <Span Foreground="#272537">___</Span> # булевое значение будет равно: True
                                            <LineBreak/>
                                            [2] y = bool("") <Span Foreground="#272537">___</Span> # булевое значение будет равно: False
                                        </TextBlock>
                                    </Border>
                                </BlockUIContainer>

                            </Section>





                            <!--написание Cписок, кортеж или множество-->
                            <Section>
                                <Paragraph>
                                    <LineBreak/>
                                    <Span FontSize="35" FontWeight="Bold">
                                        <Span Foreground="#272537">
                                           ___
                                        </Span>
                                        Преобразование в список, кортеж или множество
                                    </Span>
                                </Paragraph>

                                <Paragraph>
                                    ● Используйте функции list(), tuple() или set() соответственно для 
                                    преобразования итерируемого объекта в список, кортеж или множество.
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Примеры:</Bold>
                                    </Span>
                                </Paragraph>

                                <BlockUIContainer>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="700" HorizontalAlignment="Left" CornerRadius="10">
                                        <TextBlock>
                                            [1] x = list("hey") <Span Foreground="#272537">___</Span> # преобразует строку в посимвольный список: ['h', 'e', 'y']
                                            <LineBreak/>
                                            [2] y = tuple([1, 2, 3]) <Span Foreground="#272537">___</Span> # преобразует список в кортеж: (1, 2, 3)
                                            <LineBreak/>
                                            [3] z = set([1, 2, 3]) <Span Foreground="#272537">___</Span> # преобразует список в множество: {1, 2, 3}
                                        </TextBlock>
                                    </Border>
                                </BlockUIContainer>

                            </Section>

                        </FlowDocument>
                    </RichTextBox>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>





    <!--УСЛОВНЫЕ ВЫРАЖЕНИЕ-->
    <Style TargetType="{x:Type RichTextBox}" x:Key="UslovnVirazRichTextBox">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RichTextBox">
                    <RichTextBox HorizontalAlignment="Stretch" VerticalAlignment="Stretch" 
                                 Foreground="AliceBlue"
                                 Background="Transparent"
                                 FontSize="18"
                                 BorderThickness="0"
                                 
                                 IsReadOnly="True">
                        <FlowDocument>
                            <Section>
                                <Paragraph>
                                    - Ряд операций представляют условные выражения. Все эти операции принимают два операнда и возвращают логическое значение,
                                    которое в Python представляет тип bool. Существует только два логических значения - True (выражение истинно) и False (выражение ложно).
                                </Paragraph>
                            </Section>
                            
                            <!--написание Операции сравнения-->
                            <Section>
                                <Paragraph>
                                    <LineBreak/>
                                    <Span FontSize="35" FontWeight="Bold">
                                        <Span Foreground="#272537">
                                            ___________________
                                        </Span>
                                        Операции сравнения
                                    </Span>
                                </Paragraph>

                                <Paragraph>
                                    Простейшие условные выражения представляют операции сравнения, которые сравнивают два значения.
                                    <LineBreak/>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Python поддерживает следующие операции сравнения:</Bold>
                                    </Span>
                                </Paragraph>

                                <BlockUIContainer>
                                    <Border BorderBrush="Yellow" BorderThickness="2" Padding="5" Width="700" HorizontalAlignment="Left" CornerRadius="10">
                                        <TextBlock>
                                            ● ==
                                            <LineBreak/>
                                            Возвращает True, если оба операнда равны. Иначе возвращает False.
                                            <LineBreak/>
                                            ● !=
                                            <LineBreak/>
                                            Возвращает True, если оба операнда НЕ равны. Иначе возвращает False.
                                            <LineBreak/>
                                            ● &gt; (больше чем)
                                            <LineBreak/>
                                            Возвращает True, если первый операнд больше второго.
                                            <LineBreak/>
                                            ● &lt; (меньше чем)
                                            <LineBreak/>
                                            Возвращает True, если первый операнд меньше второго.
                                            <LineBreak/>
                                            ● &gt;= (больше или равно)
                                            <LineBreak/>
                                            Возвращает True, если первый операнд больше или равен второму.
                                            <LineBreak/>
                                            ● &lt;= (меньше или равно)
                                            <LineBreak/>
                                            Возвращает True, если первый операнд меньше или равен второму.
                                        </TextBlock>
                                    </Border>
                                </BlockUIContainer>

                                <Paragraph>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>
                                </Paragraph>
                                
                                <BlockUIContainer>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="600" HorizontalAlignment="Left" CornerRadius="10">
                                        <TextBlock>
                                            [1] a = 5
                                            <LineBreak/>
                                            [2] b = 6
                                            <LineBreak/>
                                            [3] result = 5 == 6 <Span Foreground="#272537">___</Span> # сохраняем результат операции в переменную
                                            <LineBreak/>
                                            [4] print(result) <Span Foreground="#272537">___</Span> # False - 5 не равно 6
                                            <LineBreak/>
                                            [5] print(a != b) <Span Foreground="#272537">___</Span> # True
                                            <LineBreak/>
                                            [6] print(a &gt; b) <Span Foreground="#272537">___</Span> # False - 5 меньше 6
                                            <LineBreak/>
                                            [7] print(a &lt; b) <Span Foreground="#272537">___</Span> # True
                                            <LineBreak/>
                                            [8] bool1 = True
                                            <LineBreak/>
                                            [9] bool2 = False
                                            <LineBreak/>
                                            [10] print(bool1 == bool2) <Span Foreground="#272537">___</Span> # False - bool1 не равно bool2
                                        </TextBlock>
                                    </Border>
                                </BlockUIContainer>

                                <Paragraph>
                                    Операции сравнения могут сравнивать различные объекты - строки, числа, логические значения, однако оба операнда операции должны представлять один и тот же тип.
                                    <LineBreak/>
                                    <LineBreak/>
                                    Для создания составных условных выражений применяются логические операции.
                                    <LineBreak/>
                                    <LineBreak/>
                                </Paragraph>
                            </Section>



                            

                            <!--написание Логические операции AND-->
                            <Section>
                                <Paragraph>
                                    <LineBreak/>
                                    <Span FontSize="35" FontWeight="Bold">
                                        <Span Foreground="#272537">
                                            _____________________
                                        </Span>
                                        Логические операции
                                    </Span>
                                </Paragraph>

                                <Paragraph>
                                    <Span FontSize="30" FontWeight="Bold">● Оператор "and"</Span>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Border BorderBrush="Green" BorderThickness="2" Padding="5" Width="150" HorizontalAlignment="Left" CornerRadius="10">
                                        <TextBlock>
                                            [1] x and y 
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    Сначала оператор and оценивает выражение x, и если оно равно False, 
                                    то возвращается его значение. Если оно равно True, то оценивается второй операнд - y и возвращается значение y.
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>
                                    
                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="350" HorizontalAlignment="Left" CornerRadius="10">
                                        <TextBlock>
                                            [1] age = 22
                                            <LineBreak/>
                                            [2] weight = 58
                                            <LineBreak/>
                                            [3] result = age > 21 and weight == 58
                                            <LineBreak/>
                                            [4] print(result) <Span Foreground="#272537">___</Span> # True
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    В данном случае оператор and сравнивает результаты двух выражений: age > 21 weight == 58. 
                                    И если оба этих выражений возвращают True, то оператор and также возвращает True (формально возвращается значение последнего операнда).
                                    <LineBreak/>
                                    <LineBreak/>
                                    
                                    Но операндами оператора and необязательно выступают значения True и False. Это могут быть любые значения.
                                    
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>
                                    
                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="950" HorizontalAlignment="Left" CornerRadius="10">
                                        <TextBlock>
                                            [1] result = 4 and "w"
                                            <LineBreak/>
                                            [2] print(result) <Span Foreground="#272537">___</Span> # w, так как 4 равно True, поэтому возвращается значение последнего операнда
                                            <LineBreak/>
                                            [3] 
                                            <LineBreak/>
                                            [4] result = 0 and "w"
                                            <LineBreak/>
                                            [5] print(result) <Span Foreground="#272537">___</Span> # 0, так как 0 эквивалентно False
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    В данном случае число 0 и пустая строка "" расматриваются как False, все остальные числа и непустые строки эквивалентны True
                                </Paragraph>
                            </Section>



                            <!--написание Логические операции OR-->
                            <Section>
                                <Paragraph>
                                    <LineBreak/>
                                    <Span FontSize="30" FontWeight="Bold">● Оператор "or"</Span>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Border BorderBrush="Green" BorderThickness="2" Padding="5" Width="150" HorizontalAlignment="Left" CornerRadius="10">
                                        <TextBlock>
                                            [1] x or y
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    Сначала оператор or оценивает выражение x, и если оно равно True, то возвращается его значение. 
                                    Если оно равно False, то оценивается второй операнд - y и возвращается значение y.

                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="650" HorizontalAlignment="Left" CornerRadius="10">
                                        <TextBlock>
                                            [1] age = 22
                                            <LineBreak/>
                                            [2] weight = 58
                                            <LineBreak/>
                                            [3] result = age &lt; 21 or weight == 58
                                            <LineBreak/>
                                            [4] print(result) <Span Foreground="#272537">___</Span> # True, так как выражение weight == 58 равно True
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>

                                </Paragraph>
                            </Section>



                            <!--написание Логические операции NOT-->
                            <Section>
                                <Paragraph>
                                    <LineBreak/>
                                    <Span FontSize="30" FontWeight="Bold">● Оператор "not"</Span>
                                    <LineBreak/>
                                    not - логическое отрицание

                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="350" HorizontalAlignment="Left" CornerRadius="10">
                                        <TextBlock>
                                            [1] age = 22
                                            <LineBreak/>
                                            [2] weight = 58
                                            <LineBreak/>
                                            [3] print(not age > 21) <Span Foreground="#272537">___</Span> # False
                                            <LineBreak/>
                                            [4] print(not weight == 58) <Span Foreground="#272537">___</Span> # False
                                            <LineBreak/>
                                            [5] print(not weight == 57) <Span Foreground="#272537">___</Span> # True
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>

                                </Paragraph>
                            </Section>



                            <!--написание Оператор "in"-->
                            <Section>
                                <Paragraph>
                                    <LineBreak/>
                                    <Span FontSize="35" FontWeight="Bold">
                                        <Span Foreground="#272537">
                                            ________________________
                                        </Span>
                                        Оператор "in"
                                    </Span>
                                </Paragraph>

                                <Paragraph>
                                    Оператор in возвращает True если в некотором наборе значений есть определенное значение.
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Border BorderBrush="Green" BorderThickness="2" Padding="5" Width="300" HorizontalAlignment="Left" CornerRadius="10">
                                        <TextBlock>
                                            [1] значение in набор_значений
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    Например, строка представляет набор символов. И с помощью оператора in мы можем проверить, есть ли в ней какая-нибудь подстрока.

                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="700" HorizontalAlignment="Left" CornerRadius="10">
                                        <TextBlock>
                                            [1] message = "hello world!"
                                            <LineBreak/>
                                            [2] hello = "hello"
                                            <LineBreak/>
                                            [3] print(hello in message) <Span Foreground="#272537">___</Span> # True - подстрока hello есть в строке "hello world!"
                                            <LineBreak/>
                                            [4] gold = "gold"
                                            <LineBreak/>
                                            [5] print(gold in message) <Span Foreground="#272537">___</Span> # False - подстроки "gold" нет в строке "hello world!"
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    <LineBreak/>
                                    Если нам надо наоборот проверить, нет ли в наборе значений какого-либо значения, то мы може использовать модификацию оператора - not in. 
                                    Она возвращает True, если в наборе значений НЕТ определенного значения!
                                </Paragraph>
                            </Section>
                        </FlowDocument>
                    </RichTextBox>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>




    <!--IF УСЛОВИЕ-->
    <Style TargetType="{x:Type RichTextBox}" x:Key="IfConstruction">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RichTextBox">
                    <RichTextBox HorizontalAlignment="Stretch" VerticalAlignment="Stretch" 
                                 Foreground="AliceBlue"
                                 Background="Transparent"
                                 FontSize="18"
                                 BorderThickness="0"
                                 IsReadOnly="True">
                        <FlowDocument>
                            <!--IF блок-->
                            <Section>
                                <Paragraph>
                                    <Span FontSize="35" FontWeight="Bold">
                                        <Span Foreground="#272537">
                                            ___________________________
                                        </Span>
                                        IF БЛОК
                                    </Span>
                                </Paragraph>
                                
                                <Paragraph>
                                    Условные конструкции в программировании используют условные выражения, чтобы определить, какой путь выполнения программы 
                                    следует выбрать. Одним из примеров такой конструкции является if-условие.

                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример постороения констркукции:</Bold>
                                    </Span>
                                    
                                    <LineBreak/>
                                    <Border BorderBrush="Green" BorderThickness="2" Padding="5" Width="300" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] if логическое_выражение:
                                            <LineBreak/>
                                            [2] <Span Foreground="#272537">____</Span>инструкции
                                            <LineBreak/>
                                            [3] [elif логическое выражение:
                                            <LineBreak/>
                                            [4] <Span Foreground="#272537">____</Span>инструкции]
                                            <LineBreak/>
                                            [5] [else:
                                            <LineBreak/>
                                            [6] <Span Foreground="#272537">____</Span>инструкции]
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    <LineBreak/>
                                    В самом простом виде после ключевого слова if идет логическое выражение. И если это логическое выражение возвращает True, то выполняется последующий блок 
                                    инструкций, каждая из которых должна начинаться с новой строки и должна иметь отступы от начала выражения if.
                                </Paragraph>

                                <Paragraph>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>
                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="300" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] num_str = "1"
                                            <LineBreak/>
                                            [2] if num_str == "1":
                                            <LineBreak/>
                                            [3] <Span Foreground="#272537">____</Span>print("Один")
                                            <LineBreak/>
                                            [4] print("Пока")   
                                            <LineBreak/>
                                            <LineBreak/>
                                            ### КОД ВЫВЕДЕТ:
                                            <LineBreak/>
                                            Один
                                            <LineBreak/>
                                            Пока
                                        </TextBlock>
                                    </Border>

                                    <LineBreak/>
                                    <LineBreak/>
                                    Обратите внимание в коде на последнюю строку, которая выводит сообщение "Пока". Она не имеет отступов от начала строки, поэтому она не принадлежит к блоку 
                                    if и будет выполняться в любом случае, даже если выражение в конструкции if возвратит False.
                                </Paragraph>
                            </Section>

                            

                            <!--ELSE блок-->
                            <Section>
                                <Paragraph>
                                    <LineBreak/>
                                    <Span FontSize="35" FontWeight="Bold">
                                        <Span Foreground="#272537">
                                            __________________________
                                        </Span>
                                        ELSE БЛОК
                                    </Span>
                                </Paragraph>

                                <Paragraph>
                                    Если вдруг нам надо определить альтернативное решение на тот случай, если выражение в if возвратит False, то мы можем использовать блок else.
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="300" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] num_str = "2"
                                            <LineBreak/>
                                            [2] if num_str == "1":
                                            <LineBreak/>
                                            [3] <Span Foreground="#272537">____</Span>print("Один")
                                            <LineBreak/>
                                            [4] else:
                                            <LineBreak/>
                                            [5] <Span Foreground="#272537">____</Span>print("Два")
                                            <LineBreak/>
                                            [6] print("Пока")   
                                            <LineBreak/>
                                            <LineBreak/>
                                            ### КОД ВЫВЕДЕТ:
                                            <LineBreak/>
                                            Два
                                            <LineBreak/>
                                            Пока
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    <LineBreak/>

                                    Если выражение num_str == "1" возвращает True, то выполняется блок if, иначе выполняется блок else. 
                                    И поскольку в данном случае условие  num_str == "1" возвращает False, то будут выполняться инструкция из блока else.
                                    <LineBreak/>
                                    <LineBreak/>
                                    Причем инструкции блока else также должны иметь отступы от начала строки. Например, в примере выше
                                    <LineBreak/> print("Пока") не имеет отступа,
                                    поэтому она не входит в блок else и будет выполнятьься вне зависимости, чему равно условие num_str == "1". Из этого получается такой вывод.
                                </Paragraph>
                            </Section>
                            
                            
                            
                            <!--ELIF блок-->
                            <Section>
                                <Paragraph>
                                    <LineBreak/>
                                    <Span FontSize="35" FontWeight="Bold">
                                        <Span Foreground="#272537">
                                            __________________________
                                        </Span>
                                        ELIF БЛОК
                                    </Span>
                                </Paragraph>

                                <Paragraph>
                                    Если необходимо ввести несколько альтернативных условий, то можно использовать дополнительные блоки elif, после которого идет блок инструкций.
                                </Paragraph>

                                <Paragraph>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="300" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] language = "spanish"
                                            <LineBreak/>
                                            [2] if language == "english":
                                            <LineBreak/>
                                            [3] <Span Foreground="#272537">____</Span>print("Hello")
                                            <LineBreak/>
                                            [4] <Span Foreground="#272537">____</Span>print("World")
                                            <LineBreak/>
                                            [5] elif language == "german":
                                            <LineBreak/>
                                            [6] <Span Foreground="#272537">____</Span>print("Hallo")
                                            <LineBreak/>
                                            [7] <Span Foreground="#272537">____</Span>print("Welt")
                                            <LineBreak/>
                                            [8] elif language == "spanish":
                                            <LineBreak/>
                                            [9] <Span Foreground="#272537">____</Span>print("Hola")
                                            <LineBreak/>
                                            [10] <Span Foreground="#272537">____</Span>print("Mundo")
                                            <LineBreak/>
                                            [11] else:
                                            <LineBreak/>
                                            [12] <Span Foreground="#272537">____</Span>print("Привет")
                                            <LineBreak/>
                                            [13] <Span Foreground="#272537">____</Span>print("мир")
                                            <LineBreak/>
                                            <LineBreak/>
                                            ### КОД ВЫВЕДЕТ:
                                            <LineBreak/>
                                            Hola
                                            <LineBreak/>
                                            Mundo
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    <LineBreak/>

                                    Сначала Python проверяет выражение if. Если оно равно True, то выполняются инструкции из блока if. Если это условие возвращает False, 
                                    то Python проверяет выражение из elif.
                                    <LineBreak/>
                                    <LineBreak/>
                                    Если выражение после elif равно True, то выполняются инструкции из блока elif1. Но если оно равно False то выполняются другая инструкции из блока elif2.
                                    <LineBreak/>
                                    <LineBreak/>
                                    Если все выражения равны False, то выполнится инструкции из блока else.
                                </Paragraph>
                            </Section>



                            <!--Вложенные конструкции IF-->
                            <Section>
                                <Paragraph>
                                    <LineBreak/>
                                    <Span FontSize="35" FontWeight="Bold">
                                        <Span Foreground="#272537">
                                            ______________
                                        </Span>
                                        ВЛОЖЕННЫЕ КОНСТРУКЦИИ IF
                                    </Span>
                                </Paragraph>

                                <Paragraph>
                                    Конструкция if в свою очередь сама может иметь вложенные конструкции if.

                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="300" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] language = "english"
                                            <LineBreak/>
                                            [2] daytime == "morning"
                                            <LineBreak/>
                                            [3] if language == "english":
                                            <LineBreak/>
                                            [4] <Span Foreground="#272537">____</Span>print("English")
                                            <LineBreak/>
                                            [5] <Span Foreground="#272537">____</Span>if daytime == "morning":
                                            <LineBreak/>
                                            [6] <Span Foreground="#272537">________</Span>print("Good morning")
                                            <LineBreak/>
                                            [7] <Span Foreground="#272537">____</Span>else:
                                            <LineBreak/>
                                            [8] <Span Foreground="#272537">________</Span>print("Good evening")
                                            <LineBreak/>
                                            [9] else:
                                            <LineBreak/>
                                            [10]<Span Foreground="#272537">____</Span>print("Пока")
                                            <LineBreak/>
                                            <LineBreak/>
                                            ### КОД ВЫВЕДЕТ:
                                            <LineBreak/>
                                            English
                                            <LineBreak/>
                                            Good morning
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    <LineBreak/>

                                    Здесь если первая конструкция if равна True, то мы заходим внутрь и поподаем во вложенную конструкцию if. Но если первая if, равна False, то сработает сразу
                                    else и нам выведет - Пока.
                                </Paragraph>
                            </Section>
                        </FlowDocument>
                    </RichTextBox>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <!--ЦИКЛ WHILE-->
    <Style TargetType="{x:Type RichTextBox}" x:Key="CycleWhileRichTextBox">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RichTextBox">
                    <RichTextBox HorizontalAlignment="Stretch" VerticalAlignment="Stretch" 
                                 Foreground="AliceBlue"
                                 Background="Transparent"
                                 FontSize="18"
                                 BorderThickness="0"
                                 
                                 IsReadOnly="True">
                        <FlowDocument>
                            <Section>
                                <Paragraph>
                                    Цикл while проверяет истинность некоторого условия, и если условие истинно, то выполняет инструкции цикла.

                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример построения конструкции:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Green" BorderThickness="2" Padding="5" Width="300" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] while условное_выражение:
                                            <LineBreak/>
                                            [2]<Span Foreground="#272537">____</Span>инструкции
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    

                                    После ключевого слова while указывается условное выражение, и пока это выражение возвращает значение True, будет выполняться блок инструкций, который идет далее.
                                    <LineBreak/>
                                    <LineBreak/>
                                    Все инструкции, которые относятся к циклу while, располагаются на последующих строках и должны иметь отступ от начала ключевого слова while.


                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="400" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] number = 1
                                            <LineBreak/>
                                            [2] while number &lt; 5:
                                            <LineBreak/>
                                            [3]<Span Foreground="#272537">____</Span>print(f"number = {number}")
                                            <LineBreak/>
                                            [4]<Span Foreground="#272537">____</Span>number += 1
                                            <LineBreak/>
                                            [5] print("Работа программы завершена")
                                            <LineBreak/>
                                            <LineBreak/>
                                            ###КОД ВЫВЕДЕТ:
                                            <LineBreak/>
                                            number = 1
                                            <LineBreak/>
                                            number = 2
                                            <LineBreak/>
                                            number = 3
                                            <LineBreak/>
                                            number = 4
                                            <LineBreak/>
                                            Работа программы завершена
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    В данном случае цикл while будет выполняться, пока переменная number меньше 5. Также обратите внимание, что последняя инструкция 
                                    print("Работа программы завершена") не имеет отступов от начала строки, поэтому она не входит в цикл while.
                                    <LineBreak/>
                                    <LineBreak/>
                                    <LineBreak/>
                                        

                                    <Span FontWeight="Bold">Весь процесс цикла можно представить следующим образом:</Span>
                                    <LineBreak/>
                                    <LineBreak/>
                                    1. Создается переменная `number` и устанавливается значение 1.
                                    <LineBreak/>
                                    2. Начинается выполнение цикла `while`. Условие `number &lt; 5` проверяет, является ли значение переменной `number` меньшим чем 5.
                                    <LineBreak/>
                                    3. Если условие истинно (то есть значение `number` меньше 5), выполняется блок кода, который следует за циклом. В данном случае, 
                                        выводится сообщение с помощью функции `print`, в котором отображается текущее значение переменной `number`.
                                    <LineBreak/>
                                    4. Затем, значение переменной `number` увеличивается на 1 с помощью оператора `+=`.
                                    <LineBreak/>
                                    5. Контроль возвращается к началу цикла `while`, и снова проверяется условие. Если оно по-прежнему истинно, выполняется блок кода
                                        с выводом сообщения и увеличением значения `number`. Если условие становится ложным, цикл прерывается и 
                                        управление переходит к следующей инструкции после цикла.
                                    <LineBreak/>
                                    6. В данном случае, когда значение `number` станет равным 5, условие `number &lt; 5` станет ложным, и цикл завершится.
                                    <LineBreak/>
                                    7. После цикла `while` следует инструкция `print`, которая выводит сообщение "Работа программы завершена".
                                    <LineBreak/>
                                    <LineBreak/>
                                    Таким образом, этот код будет повторяться, пока значение переменной `number` остается меньше 5. Каждый раз, когда условие истинно, 
                                    выводится сообщение с текущим значением `number`. По достижении значения 5 цикл завершается, и программа продолжает выполнение со следующей инструкции. 
                                    В данном случае, после цикла выводится сообщение "Работа программы завершена".  
                                </Paragraph>

                                <Paragraph>
                                    <LineBreak/>
                                    Для цикла while также можно определить дополнительный блок else, инструкции которого выполняются, когда условие равно False:

                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="600" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] number = 1
                                            <LineBreak/>
                                            [2] while number &lt; 5:
                                            <LineBreak/>
                                            [3]<Span Foreground="#272537">____</Span>print(f"number = {number}")
                                            <LineBreak/>
                                            [4]<Span Foreground="#272537">____</Span>number += 1
                                            <LineBreak/>
                                            [5] else:
                                            <LineBreak/>
                                            [6]<Span Foreground="#272537">____</Span>print(f"number = {number}. Работа цикла завершена")
                                            <LineBreak/>
                                            [7] print("Работа программы завершена")
                                            <LineBreak/>
                                            <LineBreak/>
                                            ###КОД ВЫВЕДЕТ:
                                            <LineBreak/>
                                            number = 1
                                            <LineBreak/>
                                            number = 2
                                            <LineBreak/>
                                            number = 3
                                            <LineBreak/>
                                            number = 4
                                            <LineBreak/>
                                            number =5. Работа цикла завершена
                                            <LineBreak/>
                                            Работа программы завершена
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    То есть в данном случае сначала проверяется условие и выполняются инструкции while. Затем, когда условие становится равным False, 
                                    выполняются инструкции из блока else. 
                                    Обратите внимание, что инструкции из блока else также имеют отступы от начала конструкции цикла.
                                </Paragraph>
                            </Section>
                        </FlowDocument>
                    </RichTextBox>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    
    

    <!--ЦИКЛ FOR-->
    <Style TargetType="{x:Type RichTextBox}" x:Key="CycleForRichTextBox">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RichTextBox">
                    <RichTextBox HorizontalAlignment="Stretch" VerticalAlignment="Stretch" 
                                 Foreground="AliceBlue"
                                 Background="Transparent"
                                 FontSize="18"
                                 BorderThickness="0"
                                 IsReadOnly="True">
                        <FlowDocument>
                            <Section>
                                <Paragraph>
                                    Другой тип циклов представляет конструкция <Span FontWeight="Bold">for</Span>. Этот цикл пробегается по набору значений, помещает каждое значение в переменную, и затем в цикле 
                                    мы можем с этой переменной производить различные действия.

                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример построения конструкции:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Green" BorderThickness="2" Padding="5" Width="350" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] for переменная in набор_значений:
                                            <LineBreak/>
                                            [2]<Span Foreground="#272537">____</Span>инструкции
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>

                                    После ключевого слова <Span FontWeight="Bold">for</Span>. идет название переменной, в которую будут помещаться значения. Затем после оператора
                                    <Span FontWeight="Bold">in</Span>. указывается набор значений и двоеточие.
                                    <LineBreak/>
                                    <LineBreak/>
                                    А со следующей строки располагается блок инструкций цикла, которые также должны иметь отступы от начала цикла.
                                    <LineBreak/>
                                    <LineBreak/>
                                    При выполнении цикла Python последовательно получает все значения из набора и передает их переменную. Когда все значения из набора 
                                    будут перебраны, цикл завершает свою работу.
                                    <LineBreak/>
                                    <LineBreak/>
                                    В качестве набора значений, например, можно рассматривать строку, которая по сути представляет набор символов.

                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="250" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] message = "Hello"
                                            <LineBreak/>
                                            [2] for c in message:
                                            <LineBreak/>
                                            [3]<Span Foreground="#272537">____</Span>print(c)
                                            <LineBreak/>
                                            <LineBreak/>
                                            ###КОД ВЫВЕДЕТ:
                                            <LineBreak/>
                                            H
                                            <LineBreak/>
                                            e
                                            <LineBreak/>
                                            l
                                            <LineBreak/>
                                            l
                                            <LineBreak/>
                                            o
                                            <LineBreak/>
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    В цикле определяется переменную `c`, после оператора in в качестве перебираемого набора указана переменная message, которая хранит строку "Hello". 
                                    В итоге цикл for будет перебираеть последовательно все символы из строки message и помещать их в переменную `c`. Блок самого цикла состоит из одной инструкции,
                                    которая выводит значение переменной `с` на консоль.
                                    <LineBreak/>
                                    <LineBreak/>
                                    <LineBreak/>
                                    Цикл for также может иметь дополнительный блок else, который выполняется после завершения цикла:

                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="500" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] message = "Hello"
                                            <LineBreak/>
                                            [2] for c in message:
                                            <LineBreak/>
                                            [3]<Span Foreground="#272537">____</Span>print(c)
                                            <LineBreak/>
                                            [4] else:
                                            <LineBreak/>
                                            [5] <Span Foreground="#272537">____</Span>print(f"Последний символ: {c}. Цикл завершен")
                                            <LineBreak/>
                                            [6] print("Работа программы завершена")
                                            <LineBreak/>
                                            <LineBreak/>
                                            ###КОД ВЫВЕДЕТ:
                                            <LineBreak/>
                                            H
                                            <LineBreak/>
                                            e
                                            <LineBreak/>
                                            l
                                            <LineBreak/>
                                            l
                                            <LineBreak/>
                                            o
                                            <LineBreak/>
                                            Последний символ: o. Цикл завершен
                                            <LineBreak/>
                                            Работа программы завершена
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                </Paragraph>
                            </Section>
                        </FlowDocument>
                    </RichTextBox>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <!--ВЛОЖЕННОСТЬ И ПРЕРЫВНОСТЬ ЦИКЛОВ-->
    <Style TargetType="{x:Type RichTextBox}" x:Key="BreakVlozhRichTextBox">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RichTextBox">
                    <RichTextBox HorizontalAlignment="Stretch" VerticalAlignment="Stretch" 
                                 Foreground="AliceBlue"
                                 Background="Transparent"
                                 FontSize="18"
                                 BorderThickness="0"
                                 IsReadOnly="True">
                        <FlowDocument>
                            <!--написание вложенность-->
                            <Section>
                                <Paragraph>
                                    <Span FontSize="35" FontWeight="Bold">
                                        <Span Foreground="#272537">
                                            _______________________
                                        </Span>
                                        ВЛОЖЕННОСТЬ
                                    </Span>
                                </Paragraph>
                                
                                <Paragraph>
                                    Одни циклы внутри себя могут содержать другие циклы.

                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="300" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] i = 1
                                            <LineBreak/>
                                            [2] j = 1
                                            <LineBreak/>
                                            [3] while i &lt; 10:
                                            <LineBreak/>
                                            [4]<Span Foreground="#272537">____</Span>while j &lt; 10:
                                            <LineBreak/>
                                            [5]<Span Foreground="#272537">________</Span>print(i * j, end="\t")
                                            <LineBreak/>
                                            [6]<Span Foreground="#272537">________</Span>j += 1
                                            <LineBreak/>
                                            [7]<Span Foreground="#272537">____</Span>print("\n")
                                            <LineBreak/>
                                            [8]<Span Foreground="#272537">____</Span>j = 1
                                            <LineBreak/>
                                            [9]<Span Foreground="#272537">____</Span>i += 1
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>

                                    Внешний цикл while i &lt; 10: срабатывает 9 раз пока переменная i не станет равна 10. Внутри этого цикла
                                срабатывает внутренний цикл while j &lt; 10:. Внутренний цикл также срабатывает 9 
                                раз пока переменная j не станет равна 10. Причем все 9 итераций внутреннего цикла 
                                срабатывают в рамках одной итерации внешнего цикла.
                                    <LineBreak/>
                                    <LineBreak/>
                                    В каждой итерации внутреннего 
                                цикла на консоль будет выводится произведение чисел i и j. Затем значение переменной 
                                j увеличивается на единицу. Когда внутренний цикл закончил работу, значений 
                                переменной j сбрасывается в 1, а значение переменной i увеличивается на единицу и 
                                происходит переход к следующей итерации внешнего цикла. И все повторяется, пока 
                                переменная i не станет равна 10. Соответственно внутренний цикл сработает всего 81 
                                раз для всех итераций внешнего цикла. В итоге мы получим таблицу до 81.
                                <LineBreak/>
                                <LineBreak/>
                                <LineBreak/>
                                Подобным образом можно определять вложенные циклы for:

                                <LineBreak/>
                                <LineBreak/>
                                <Span FontSize="20">
                                    <Bold>Пример:</Bold>
                                </Span>

                                <LineBreak/>
                                <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="250" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                    <TextBlock>
                                        [1] for c1 in "ab":
                                        <LineBreak/>
                                        [2]<Span Foreground="#272537">____</Span>for c2 in "ba":
                                        <LineBreak/>
                                        [3]<Span Foreground="#272537">________</Span>print(f"{c1}{c2}")
                                        <LineBreak/>
                                        <LineBreak/>
                                        ###КОД ВЫВЕДЕТ:
                                        <LineBreak/>
                                        ab
                                        <LineBreak/>
                                        aa
                                        <LineBreak/>
                                        bb
                                        <LineBreak/>
                                        ba
                                    </TextBlock>
                                </Border>
                                <LineBreak/>
                                В данном случае внешний цикл проходит по строке "ab" и каждый символ помещает в 
                                    переменную c1. Внутренний цикл проходит по строке "ba", помещает каждый символ 
                                    строки в переменную c2 и выводит сочетание обоих символов на консоль. То есть в
                                    итоге мы получим все возможные сочетания символов a и b.
                                </Paragraph>
                            </Section>

                            

                            <!--написание выход из цикла. break и continue-->
                            <Section>
                                <Paragraph>
                                    <LineBreak/>
                                    <Span FontSize="35" FontWeight="Bold">
                                        <Span Foreground="#272537">
                                            __________
                                        </Span>
                                        ВЫХОД ИЗ ЦИКЛА. BREAK И CONTINUE
                                    </Span>
                                </Paragraph>

                                <Paragraph>
                                    Для управления циклом мы можем использовать специальные операторы break и 
                                    continue. Оператор break осуществляет выход из цикла. А оператор continue 
                                    выполняет переход к следующей итерации цикла.
                                    <LineBreak/>
                                    <LineBreak/>
                                    ● break
                                    <LineBreak/>
                                    Оператор break может использоваться, если в цикле образуются условия, 
                                    которые несовместимы с его дальнейшим выполнением.

                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="350" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                        [1] number = 0
                                        <LineBreak/>
                                        [2] while number &lt; 5:
                                        <LineBreak/>
                                        [3]<Span Foreground="#272537">____</Span>number += 1
                                        <LineBreak/>
                                        [4]<Span Foreground="#272537">____</Span>if number == 3 : 
                                        <LineBreak/>
                                        [5]<Span Foreground="#272537">________</Span>break
                                        <LineBreak/>
                                        [6]<Span Foreground="#272537">____</Span>print(f"number = {number}")
                                        <LineBreak/>
                                        <LineBreak/>
                                        ###КОД ВЫВЕДЕТ:
                                        <LineBreak/>  
                                        number = 1
                                        <LineBreak/>
                                        number = 2
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>

                                    Здесь цикл while проверяет условие number &lt; 5. И пока number не равно 5, предполагается, 
                                    что значение number будет выводиться на консоль. Однако внутри цикла также 
                                    проверяется другое условие: if number == 3. То есть, если значение number равно
                                    3, то с помощью оператора break выходим из цикла.
                                    <LineBreak/>
                                    <LineBreak/>
                                    <LineBreak/>

                                    ● continue
                                    <LineBreak/>
                                    В отличие от оператора break оператор continue выполняет переход к следующей итерации цикла 
                                    без его завершения. Например, в предыдущем примере заменим break на continue.

                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="350" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                        [1] number = 0
                                        <LineBreak/>
                                        [2] while number &lt; 5:
                                        <LineBreak/>
                                        [3]<Span Foreground="#272537">____</Span>number += 1
                                        <LineBreak/>
                                        [4]<Span Foreground="#272537">____</Span>if number == 3 : 
                                        <LineBreak/>
                                        [5]<Span Foreground="#272537">________</Span>continue
                                        <LineBreak/>
                                        [6]<Span Foreground="#272537">____</Span>print(f"number = {number}")
                                        <LineBreak/>
                                        <LineBreak/>
                                        ###КОД ВЫВЕДЕТ:
                                        <LineBreak/>  
                                        number = 1
                                        <LineBreak/>
                                        number = 2
                                        <LineBreak/>  
                                        number = 4
                                        <LineBreak/>
                                        number = 5
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>

                                    И в этом случае если значение переменной number равно 3, последующие инструкции 
                                    после оператора continue не будут выполняться и мы получим такой вывод.


                                </Paragraph>
                            </Section>
                            
                           
                            
                        </FlowDocument>
                    </RichTextBox>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <!--СПИСКИ-->
    <Style TargetType="{x:Type RichTextBox}" x:Key="ListRichTextBox">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RichTextBox">
                    <RichTextBox HorizontalAlignment="Stretch" VerticalAlignment="Stretch" 
                                 Foreground="AliceBlue"
                                 Background="Transparent"
                                 FontSize="18"
                                 BorderThickness="0"
                                 IsReadOnly="True">
                        <FlowDocument>
                            <Section>
                                <Paragraph>
                                    Для работы с наборами данных Python предоставляет такие встроенные типы как 
                                    списки, кортежи и словари.
                                    <LineBreak/>
                                    <LineBreak/>
                                    Список (list) представляет тип данных, который хранит набор или 
                                    последовательность элементов. Во многих языках программирования есть 
                                    аналогичная структура данных, которая называется массив.
                                </Paragraph>
                            </Section>

                            <!--написание Создание списка-->
                            <Section>
                                <Paragraph>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="35" FontWeight="Bold">
                                        <Span Foreground="#272537">
                                            ______________________
                                        </Span>
                                        СОЗДАНИЕ СПИСКА
                                    </Span>
                                </Paragraph>

                                <Paragraph>
                                    Для создания списка применяются квадратные скобки <Span FontWeight="Bold">[]</Span>, 
                                    внутри которых через запятую перечисляются элементы списка. Определим список чисел.
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="250" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                        [1] numbers = [1, 2, 3, 4, 5]
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <LineBreak/>
                                    
                                    
                                    
                                    Подобным образом можно определять списки с данными других типов, 
                                    определим список строк.
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="350" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                        [1] people = ["Tom", "Sam", "Bob"]
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <LineBreak/>



                                    Также для создания списка можно использовать функцию-конструктор
                                    <Span FontWeight="Bold">list()</Span>.
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="250" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                        [1] numbers1 = []
                                        <LineBreak/>
                                        [2] numbers2 = list()
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    Оба этих определения списка аналогичны - они создают пустой список.
                                    <LineBreak/>
                                    <LineBreak/>
                                    <LineBreak/>
                                    
                                    
                                    
                                    Список необязательно должен содержать только однотипные объекты. 
                                    Мы можем поместить в один и тот же список одновременно строки, числа, 
                                    объекты других типов данных.
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="350" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                        [1] objects = [1, 2.6, "Hello", True]
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <LineBreak/>



                                    Для проверки элементов списка можно использовать стандартную функцию print, 
                                    которая выводит содержимое списка в удобочитаемом виде.
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="450" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                        [1] numbers = [1, 2, 3, 4, 5]
                                        <LineBreak/>
                                        [2] people = ["Tom", "Sam", "Bob"]
                                        <LineBreak/>
                                        [3] print(numbers) <Span Foreground="#272537">____</Span> # [1, 2, 3, 4, 5]
                                        <LineBreak/>
                                        [4] print(people) <Span Foreground="#272537">____</Span> # ["Tom", "Sam", "Bob"]
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <LineBreak/>



                                    Конструктор list может принимать набор значений, на основе которых создается список.
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="450" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                        [1] numbers1 = [1, 2, 3, 4, 5]
                                        <LineBreak/>
                                        [2] numbers2 = list(numbers1)
                                        <LineBreak/>
                                        [3] print(numbers2) <Span Foreground="#272537">____</Span> # [1, 2, 3, 4, 5]
                                        <LineBreak/>
                                        [4] print(people) <Span Foreground="#272537">____</Span> # ["Tom", "Sam", "Bob"]
                                        <LineBreak/>
                                        [5] 
                                        <LineBreak/>
                                        [6] letters = list("Hello")
                                        <LineBreak/>
                                        [7] print(letters) <Span Foreground="#272537">____</Span> # ['H', 'e', 'l', 'l', 'o']
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <LineBreak/>



                                    Если необходимо создать список, в котором повторяется одно и то же значение 
                                    несколько раз, то можно использовать символ звездочки *, то есть фактически 
                                    применить операцию умножения к уже существующему списку.
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="600" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                        [1] numbers = [5] * 6 <Span Foreground="#272537">____</Span> # 6 раз повторяем 5
                                        <LineBreak/>
                                        [2] print(numbers) <Span Foreground="#272537">____</Span> # [5, 5, 5, 5, 5, 5]
                                        <LineBreak/>
                                        [3] 
                                        <LineBreak/>
                                        [4] students = ["Bob", "Sam"] * 2 <Span Foreground="#272537">____</Span> # 2 раза повторяем "Bob", "Sam"  
                                        <LineBreak/>
                                        [5] print(students) <Span Foreground="#272537">____</Span> # ["Bob", "Sam", "Bob", "Sam"]
                                        </TextBlock>
                                    </Border>
                                </Paragraph>
                            </Section>


                            <!--написание Обращение к элементам списка-->
                            <Section>
                                <Paragraph>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="35" FontWeight="Bold">
                                        <Span Foreground="#272537">
                                            __________
                                        </Span>
                                        ОБРАЩЕНИЕ К ЭЛЕМЕНТАМ СПИСКА
                                    </Span>
                                </Paragraph>

                                <Paragraph>
                                    Для обращения к элементам списка надо использовать индексы, которые 
                                    представляют номер элемента в списка. Индексы начинаются с нуля. 
                                    То есть первый элемент будет иметь индекс 0, второй элемент - индекс 1 и 
                                    так далее. Для обращения к элементам с конца можно использовать отрицательные 
                                    индексы, начиная с -1. То есть у последнего элемента будет индекс -1, у 
                                    предпоследнего - -2 и так далее.
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="600" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                        [1] people = ["Tom", "Sam", "Bob"]
                                        <LineBreak/>
                                        [2] # получение элементов с начала списка
                                        <LineBreak/>
                                        [3] print(people[0]) <Span Foreground="#272537">____</Span> # Tom
                                        <LineBreak/>
                                        [4] print(people[1]) <Span Foreground="#272537">____</Span> # Sam   
                                        <LineBreak/>
                                        [5] print(people[2]) <Span Foreground="#272537">____</Span> # Bob
                                        <LineBreak/>
                                        [6] 
                                        <LineBreak/>
                                        [7] # получение элементов с конца списка
                                        <LineBreak/>
                                        [8] print(people[-2]) <Span Foreground="#272537">____</Span> # Sam
                                        <LineBreak/>
                                        [9] print(people[-1]) <Span Foreground="#272537">____</Span> # Bob
                                        <LineBreak/>
                                        [10] print(people[-3]) <Span Foreground="#272537">____</Span> # Tom
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <LineBreak/>



                                    Для изменения элемента списка достаточно присвоить ему новое значение.
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="600" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                        [1] people = ["Tom", "Sam", "Bob"]
                                        <LineBreak/>
                                        [2] 
                                        <LineBreak/>
                                        [3] people[1] = "Mike" <Span Foreground="#272537">____</Span> # изменение второго элемента
                                        <LineBreak/>
                                        [4] print(people[1]) <Span Foreground="#272537">____</Span> # Mike
                                        <LineBreak/>
                                        [5] print(people) <Span Foreground="#272537">____</Span> # ["Tom", "Mike", "Bob"]
                                        </TextBlock>
                                    </Border>
                                </Paragraph>
                            </Section>



                            <!--написание Разложение списка-->
                            <Section>
                                <Paragraph>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="35" FontWeight="Bold">
                                        <Span Foreground="#272537">
                                            ___________________
                                        </Span>
                                        РАЗЛОЖЕНИЕ СПИСКА
                                    </Span>
                                </Paragraph>

                                <Paragraph>
                                    Python позволяет разложить список на отдельные элементы.
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="600" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                        [1] people = ["Tom", "Sam", "Bob"]
                                        <LineBreak/>
                                        [2] 
                                        <LineBreak/>
                                        [3] tom, bob, sam = people
                                        <LineBreak/>
                                        [4] 
                                        <LineBreak/>
                                        [5] print(tom) <Span Foreground="#272537">____</Span> # Tom
                                        <LineBreak/>
                                        [6] print(bob) <Span Foreground="#272537">____</Span> # Bob
                                        <LineBreak/>
                                        [7] print(sam) <Span Foreground="#272537">____</Span> # Sam
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    
                                    В данном случае переменным tom, bob и sam последовательно присваиваются элементы из списка people. 
                                    Однако следует учитывать, что количество переменных должно быть равно числу 
                                    элементов присваиваемого списка.
                                </Paragraph>
                            </Section>



                            <!--написание Перебор элементов-->
                            <Section>
                                <Paragraph>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="35" FontWeight="Bold">
                                        <Span Foreground="#272537">
                                            ___________________
                                        </Span>
                                        ПЕРЕБОР ЭЛЕМЕНТОВ
                                    </Span>
                                </Paragraph>

                                <Paragraph>
                                    Для перебора элементов можно использовать как цикл for, так и цикл while.
                                    

                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Перебор с помощью цикла for:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="600" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                        [1] people = ["Tom", "Sam", "Bob"]
                                        <LineBreak/>
                                        [2] for person in people:
                                        <LineBreak/>
                                        [3]<Span Foreground="#272537">____</Span>print(person)
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    Здесь будет производиться перебор списка people, и каждый его элемент будет 
                                    помещаться в переменную person.

                                    
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Перебор с помощью цикла while:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="700" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                        [1] people = ["Tom", "Sam", "Bob"]
                                        <LineBreak/>
                                        [2] i = 0
                                        <LineBreak/>
                                        [3] while i &lt; len(people):
                                        <LineBreak/>
                                        [4]<Span Foreground="#272537">____</Span>print(people[i]) <Span Foreground="#272537">____</Span> # применяем индекс для получения элемента
                                        <LineBreak/>
                                        [5]<Span Foreground="#272537">____</Span>i += 1
                                        <LineBreak/>
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>

                                    Для перебора с помощью функции len() получаем длину списка. С помощью счетчика
                                    i выводит по элементу, пока значение счетчика не станет равно длине списка.
                                </Paragraph>
                            </Section>



                            <!--написание Сравнение списков-->
                            <Section>
                                <Paragraph>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="35" FontWeight="Bold">
                                        <Span Foreground="#272537">
                                            __________________
                                        </Span>
                                        СРАВНЕНИЕ СПИСКОВ
                                    </Span>
                                </Paragraph>

                                <Paragraph>
                                    Два списка считаются равными, если они содержат один и тот же набор элементов.


                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="600" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                        [1] numbers1 = [1, 2, 3, 4, 5]
                                        <LineBreak/>
                                        [2] numbers2 = list([1, 2, 3, 4, 5])
                                        <LineBreak/>
                                        [3] if numbers1 == numbers2:
                                        <LineBreak/>
                                        [4]<Span Foreground="#272537">____</Span>print("numbers1 равен numbers2")
                                        <LineBreak/>
                                        [5] else:
                                        <LineBreak/>
                                        [6]<Span Foreground="#272537">____</Span>print("numbers1 не равен numbers2")
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    В данном случае оба списка будут равны.
                                </Paragraph>
                            </Section>



                            <!--написание Получение части списка-->
                            <Section>
                                <Paragraph>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="35" FontWeight="Bold">
                                        <Span Foreground="#272537">
                                            _______________
                                        </Span>
                                        ПОЛУЧЕНИЕ ЧАСТИ СПИСКА
                                    </Span>
                                </Paragraph>

                                <Paragraph>
                                    Если необходимо получить какую-то определенную часть списка, то мы можем 
                                    применять специальный синтаксис, который может принимать следующие формы:
                                    <LineBreak/>
                                    <LineBreak/>

                                    <Span Foreground="#272537">____</Span> ● list[:end]: через параметр end 
                                    передается индекс элемента, до которого нужно копировать список.
                                    <LineBreak/>
                                    <Span Foreground="#272537">____</Span> ● list[start:end]: параметр start 
                                    указывает на индекс элемента, начиная с которого надо скопировать элементы.
                                    <LineBreak/>
                                    <Span Foreground="#272537">____</Span> ● list[start:end:step]: параметр step 
                                    указывает на шаг, через который будут копироваться элементы из списка,
                                    <Span Foreground="#272537">______</Span> по умолчанию этот параметр равен 1.

                                    

                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="600" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                        [1] people = ["Tom", "Bob", "Alice", "Sam", "Tim", "Bill"]
                                        <LineBreak/>
                                        [2] 
                                        <LineBreak/> 
                                        [3] slice_people1 = people[:3] <Span Foreground="#272537">____</Span> # с 0 по 3
                                        <LineBreak/>
                                        [4] print(slice_people1) <Span Foreground="#272537">____</Span> # ["Tom", "Bob", "Alice"]
                                        <LineBreak/>
                                        [5]
                                        <LineBreak/>
                                        [6] slice_people2 = people[1:3] <Span Foreground="#272537">____</Span> # с 1 по 3
                                        <LineBreak/>
                                        [7] print(slice_people2) <Span Foreground="#272537">____</Span> # ["Bob", "Alice"]
                                        <LineBreak/>
                                        [8] 
                                        <LineBreak/>
                                        [9] slice_people3 = people[1:6:2] <Span Foreground="#272537">____</Span> # с 1 по 6 с шагом 2
                                        <LineBreak/>
                                        [10] print(slice_people3) <Span Foreground="#272537">____</Span> # ["Bob", "Sam", "Bill"]
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <LineBreak/>



                                    Можно использовать отрицательные индексы, тогда отсчет будет идти с конца, например, 
                                    -1 - предпоследний, -2 - третий сконца и так далее.
                                    
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="600" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                        [1] people = ["Tom", "Bob", "Alice", "Sam", "Tim", "Bill"]
                                        <LineBreak/>
                                        [2] 
                                        <LineBreak/> 
                                        [3] slice_people1 = peopleи[:-1] <Span Foreground="#272537">____</Span> # с предпоследнего по нулевой
                                        <LineBreak/>
                                        [4] print(slice_people1) <Span Foreground="#272537">____</Span> # ["Tom", "Bob", "Alice", "Sam", "Tim", "Bill"]
                                        <LineBreak/>
                                        [5]
                                        <LineBreak/>
                                        [6] slice_people2 = people[-3:-1] <Span Foreground="#272537">____</Span> # с третьего с конца по предпоследний
                                        <LineBreak/>
                                        [7] print(slice_people2) <Span Foreground="#272537">____</Span> # [ "Sam", "Tim"]
                                        </TextBlock>
                                    </Border>
                                </Paragraph>
                            </Section>




                            <!--написание Методы и функции по работе со списками-->
                            <Section>
                                <Paragraph>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="35" FontWeight="Bold">
                                        <Span Foreground="#272537">
                                            ___
                                        </Span>
                                        МЕТОДЫ И ФУНКЦИИ ПО РАБОТЕ СО СПИСКАМИ
                                    </Span>
                                </Paragraph>

                                <Paragraph>
                                    Для управления элементами списки имеют целый ряд методов.


                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Некоторые из методов:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Yellow" BorderThickness="2" Padding="5" Width="600" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                        <Span FontWeight="Bold">● append(item):</Span> добавляет элемент item в конец списка
                                        <LineBreak/>
                                        <Span FontWeight="Bold">● insert(index, item):</Span> добавляет элемент item в список по индексу index
                                        <LineBreak/>
                                        <Span FontWeight="Bold">● extend(items):</Span> добавляет набор элементов items в конец списка
                                        <LineBreak/>
                                        <Span FontWeight="Bold">● remove(item):</Span> удаляет элемент item. Удаляется только первое вхождение элемента. Если элемент не найден, генерирует исключение ValueError
                                        <LineBreak/>
                                        <Span FontWeight="Bold">● clear():</Span> удаление всех элементов из списка
                                        <LineBreak/>
                                        <Span FontWeight="Bold">● index(item):</Span> возвращает индекс элемента item. Если элемент не найден, генерирует исключение ValueError
                                        <LineBreak/>
                                        <Span FontWeight="Bold">● pop([index]):</Span> удаляет и возвращает элемент по индексу index. Если индекс не передан, то просто удаляет последний элемент.
                                        <LineBreak/>
                                        <Span FontWeight="Bold">● count(item):</Span> возвращает количество вхождений элемента item в список
                                        <LineBreak/>
                                        <Span FontWeight="Bold">● sort([key]):</Span> сортирует элементы. По умолчанию сортирует по возрастанию. Но с помощью параметра key мы можем передать функцию сортировки.
                                        <LineBreak/>
                                        <Span FontWeight="Bold">● reverse():</Span> расставляет все элементы в списке в обратном порядке
                                        <LineBreak/>
                                        <Span FontWeight="Bold">● copy():</Span> копирует список
                                        <Span FontWeight="Bold">● len(list):</Span> возвращает длину списка
                                        <LineBreak/>
                                        <Span FontWeight="Bold">● sorted(list, [key]):</Span> возвращает отсортированный список
                                        <LineBreak/>
                                        <Span FontWeight="Bold">● min(list):</Span> возвращает наименьший элемент списка
                                        <LineBreak/>
                                        <Span FontWeight="Bold">● max(list):</Span> возвращает наибольший элемент списка
                                        </TextBlock>
                                    </Border>



                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример использования этих методов:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="800" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            <Span FontWeight="Bold">people = ["Tom", "Bob"]</Span>
                                            <LineBreak/>
                                            <LineBreak/>
                                            <Span FontWeight="Bold"># добавляем в конец списка</Span>
                                            <LineBreak/>
                                            <Span Foreground="Green">people.append("Alice")<Span Foreground="#272537">____</Span>  # ["Tom", "Bob", "Alice"]</Span>
                                            <LineBreak/>
                                            <Span FontWeight="Bold"># добавляем на вторую позицию</Span>
                                            <LineBreak/>
                                            <Span Foreground="Green">people.insert(1, "Bill")<Span Foreground="#272537">____</Span>  # ["Tom", "Bill", "Bob", "Alice"]</Span>
                                            <LineBreak/>
                                            <Span FontWeight="Bold"># добавляем набор элементов ["Mike", "Sam"]</Span>
                                            <LineBreak/>
                                            <Span Foreground="Green">people.extend(["Mike", "Sam"])<Span Foreground="#272537">____</Span>  # ["Tom", "Bill", "Bob", "Alice", "Mike", "Sam"]</Span>
                                            <LineBreak/>
                                            <Span FontWeight="Bold"># получаем индекс элемента</Span>
                                            <LineBreak/>
                                            <Span Foreground="Blue">index_of_tom = people.index("Tom")</Span>
                                            <LineBreak/>
                                            <Span FontWeight="Bold"># удаляем по этому индексу</Span>
                                            <LineBreak/>
                                            <Span Foreground="Blue">removed_item = people.pop(index_of_tom)<Span Foreground="#272537">____</Span>  # ["Bill", "Bob", "Alice", "Mike", "Sam"]</Span>
                                            <LineBreak/>
                                            <Span FontWeight="Bold"># удаляем последний элемент</Span>
                                            <LineBreak/>
                                            <Span Foreground="Blue">last_item = people.pop()<Span Foreground="#272537">____</Span>   # ["Bill", "Bob", "Alice", "Mike"]</Span>
                                            <LineBreak/>
                                            <Span FontWeight="Bold"># удаляем элемент "Alice"</Span>
                                            <LineBreak/>
                                            <Span Foreground="Blue">people.remove("Alice")<Span Foreground="#272537">____</Span>  # ["Bill", "Bob", "Mike"]</Span>
                                            <LineBreak/>
                                            <Span FontWeight="Bold"># удаляем все элементы</Span>
                                            <LineBreak/>
                                            <Span Foreground="Red">people.clear()</Span>
                                            <LineBreak/>
                                            <Span Foreground="Red">print(people)<Span Foreground="#272537">____</Span>   # []</Span>
                                        </TextBlock>
                                    </Border>
                                </Paragraph>
                            </Section>



                            <!--написание Проверка наличия элемента-->
                            <Section>
                                <Paragraph>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="35" FontWeight="Bold">
                                        <Span Foreground="#272537">
                                            ______________
                                        </Span>
                                        ПРОВЕРКА НАЛИЧИЯ ЭЛЕМЕНТА
                                    </Span>
                                </Paragraph>

                                <Paragraph>
                                    Если определенный элемент не найден, то методы remove и index генерируют 
                                    исключение. Чтобы избежать подобной ситуации, перед операцией с элементом можно
                                    проверять его наличие с помощью ключевого слова <Span FontWeight="Bold">in.</Span>


                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="800" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] people = ["Tom", "Bob", "Alice", "Sam"]
                                            <LineBreak/>
                                            [2]
                                            <LineBreak/>
                                            [3] if "Alice" in people:
                                            <LineBreak/>
                                            [4]<Span Foreground="#272537">____</Span>people.remove("Alice")
                                            <LineBreak/>
                                            [5] print(people) <Span Foreground="#272537">____</Span> # ["Tom", "Bob", "Sam"]
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    Выражение if "Alice" in people возвращает True, если элемент "Alice" имеется в списке people. 
                                    Поэтому конструкция if "Alice" in people может выполнить последующий блок
                                    инструкций в зависимости от наличия элемента в списке.
                                </Paragraph>
                            </Section>



                            <!--написание Удаление с помощью del-->
                            <Section>
                                <Paragraph>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="35" FontWeight="Bold">
                                        <Span Foreground="#272537">
                                            ________________
                                        </Span>
                                        УДАЛЕНИЕ С ПОМОЩЬЮ del
                                    </Span>
                                </Paragraph>

                                <Paragraph>
                                    Python также поддерживает еще один способ удаления элементов списка - с помощью
                                    оператора del. В качестве параметра этому оператору передается удаляемый
                                    элемент или набор элементов.


                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="800" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] people = ["Tom", "Bob", "Alice", "Sam", "Bill", "Kate", "Mike"]
                                            <LineBreak/>
                                            [2]
                                            <LineBreak/>
                                            [3] del people[1]   <Span Foreground="#272537">____</Span> # удаляем второй элемент
                                            <LineBreak/>
                                            [4] print(people)   <Span Foreground="#272537">____</Span> # ["Tom", "Alice", "Sam", "Bill", "Kate", "Mike"]
                                            <LineBreak/>
                                            [5]
                                            <LineBreak/>
                                            [6] del people[:3]   <Span Foreground="#272537">____</Span> # удаляем с первого по третий элемент не включая
                                            <LineBreak/>
                                            [7] print(people)   <Span Foreground="#272537">____</Span> # ["Bill", "Kate", "Mike"]
                                            <LineBreak/>
                                            [8]
                                            <LineBreak/>
                                            [9] del people[1:]   <Span Foreground="#272537">____</Span> # удаляем со второго элемента
                                            <LineBreak/>
                                            [10] print(people)   <Span Foreground="#272537">____</Span> # ["Bill"]
                                        </TextBlock>

                                    </Border>


                                </Paragraph>
                            </Section>




                            <!--написание Подсчет вхождений-->
                            <Section>
                                <Paragraph>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="35" FontWeight="Bold">
                                        <Span Foreground="#272537">
                                            ___________________
                                        </Span>
                                        ПОДСЧЕТ ВХОЖДЕНИЙ
                                    </Span>
                                </Paragraph>

                                <Paragraph>
                                    Если необходимо узнать, сколько раз в списке присутствует тот 
                                    или иной элемент, то можно применить метод count().


                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="800" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] people = ["Tom", "Bob", "Alice", "Tom", "Bill", "Tom"]
                                            <LineBreak/>
                                            [2]
                                            <LineBreak/>
                                            [3] people_count = people.count("Tom")
                                            <LineBreak/>
                                            [4] print(people_count)      <Span Foreground="#272537">____</Span> # 3
                                        </TextBlock>
                                    </Border>
                                </Paragraph>
                            </Section>




                            <!--написание Сортировка-->
                            <Section>
                                <Paragraph>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="35" FontWeight="Bold">
                                        <Span Foreground="#272537">
                                            ________________________
                                        </Span>
                                        СОРТИРОВКА
                                    </Span>
                                </Paragraph>

                                <Paragraph>
                                    Для сортировки по возрастанию применяется метод
                                    <Span FontWeight="Bold">sort():</Span>

                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="500" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] people = ["Tom", "Bob", "Alice", "Sam", "Bill"]
                                            <LineBreak/>
                                            [2] 
                                            <LineBreak/>
                                            [3] people.sort()
                                            <LineBreak/>
                                            [4] print(people) <Span Foreground="#272537">____</Span> # ["Alice", "Bill", "Bob", "Sam", "Tom"]
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    <LineBreak/>





                                    Если необходимо отсортировать данные в обратном порядке,
                                    то мы можем после сортировки применить метод
                                    <Span FontWeight="Bold">reverse():</Span>

                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="500" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] people = ["Tom", "Bob", "Alice", "Sam", "Bill"]
                                            <LineBreak/>
                                            [2] 
                                            <LineBreak/>
                                            [3] people.sort()
                                            <LineBreak/>
                                            [4] people.reverse()
                                            <LineBreak/>
                                            [5] print(people) <Span Foreground="#272537">____</Span> # ["Tom", "Sam", "Bob", "Bill", "Alice"]
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    При сортировке фактически сравниваются два объекта, и который из них "меньше",
                                    ставится перед тем, который "больше". Понятия "больше" и "меньше" довольно 
                                    условны. И если для чисел все просто - числа расставляются в порядке 
                                    возрастания, то для строк и других объектов ситуация сложнее. 
                                    В частности, строки оцениваются по первым символам. Если первые символы 
                                    равны, оцениваются вторые символы и так далее. При чем цифровой символ 
                                    считается "меньше", чем алфавитный заглавный символ, а заглавный символ 
                                    считается меньше, чем строчный.


                                    <LineBreak/>
                                    <LineBreak/>
                                    Таким образом, если в списке сочетаются строки с верхним и нижним регистром, 
                                    то мы можем получить не совсем корректные результаты, так как для нас строка 
                                    "bob" должна стоять до строки "Tom". И чтобы изменить стандартное поведение 
                                    сортировки, мы можем передать в метод sort() в качестве параметра функцию:
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="550" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] people = ["Tom", "bob", "alice", "Sam", "Bill"]
                                            <LineBreak/>
                                            [2] 
                                            <LineBreak/>
                                            [3] people.sort() <Span Foreground="#272537">____</Span> # стандартная сортировка
                                            <LineBreak/>
                                            [4] print(people) <Span Foreground="#272537">____</Span> # ["Bill", "Sam", "Tom", "alice", "bob"]
                                            <LineBreak/>
                                            [5] 
                                            <LineBreak/>
                                            [6] people.sort(key=str.lower)  # сортировка без учета регистра
                                            <LineBreak/>
                                            [7] print(people) <Span Foreground="#272537">____</Span> # ["alice", "Bill", "bob", "Sam", "Tom"]
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    <LineBreak/>



                                    Кроме метода sort мы можем использовать встроенную функцию sorted, 
                                    которая имеет две формы:
                                    <Span Foreground="#272537">____</Span> ● sorted(list): сортирует список list
                                    <LineBreak/>
                                    <Span Foreground="#272537">____</Span> ● sorted(list, key): сортирует список list, применяя к элементам функцию key

                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="550" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] people = ["Tom", "bob", "alice", "Sam", "Bill"]
                                            <LineBreak/>
                                            [2] 
                                            <LineBreak/>
                                            [3] sorted_people = sorted(people, key=str.lower)
                                            <LineBreak/>
                                            [4] print(sorted_people) <Span Foreground="#272537">____</Span> # ["alice", "Bill", "bob", "Sam", "Tom"]
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>

                                    При использовании этой функции следует учитывать, что эта функция не изменяет сортируемый список, 
                                    а все отсортированные элементы она помещает в новый список, который 
                                    возвращается в качестве результата.
                                </Paragraph>
                            </Section>


                            <!--написание Минимальное и максимальное значения-->
                            <Section>
                                <Paragraph>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="35" FontWeight="Bold">
                                        <Span Foreground="#272537">
                                            ____
                                        </Span>
                                        МИНИМАЛЬНОЕ И МАКСИМАЛЬНОЕ ЗНАЧЕНИЯ
                                    </Span>
                                </Paragraph>

                                <Paragraph>
                                    Встроенный функции Python min() и max() позволяют найти минимальное и максимальное значения соответственно.

                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="350" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] numbers = [9, 21, 12, 1, 3, 15, 18]
                                            <LineBreak/>
                                            [2] print(min(numbers)) <Span Foreground="#272537">____</Span> # 1
                                            <LineBreak/>
                                            [3] print(max(numbers)) <Span Foreground="#272537">____</Span> # 21
                                        </TextBlock>
                                    </Border>
                                </Paragraph>
                            </Section>



                            <!--написание Копирование списков-->
                            <Section>
                                <Paragraph>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="35" FontWeight="Bold">
                                        <Span Foreground="#272537">
                                            _________________
                                        </Span>
                                        КОПИРОВАНИЕ СПИСКОВ
                                    </Span>
                                </Paragraph>

                                <Paragraph>
                                    При копировании списков следует учитывать, что списки представляют изменяемый (mutable) тип,
                                    поэтому если обе переменных будут указывать на один и тот же список, то изменение 
                                    одной переменной, затронет и другую переменную.

                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="650" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] people1 = ["Tom", "Bob", "Alice"]
                                            <LineBreak/>
                                            [2] people2 = people1
                                            <LineBreak/>
                                            [3] people2.append("Sam") <Span Foreground="#272537">____</Span> # добавляем элемент во второй список
                                            <LineBreak/>
                                            [4]
                                            <LineBreak/>
                                            [5] # people1 и people2 указывают на один и тот же список
                                            <LineBreak/>
                                            [6] print(people1) <Span Foreground="#272537">____</Span> # ["Tom", "Bob", "Alice", "Sam"]
                                            <LineBreak/>
                                            [7] print(people2) <Span Foreground="#272537">____</Span> # ["Tom", "Bob", "Alice", "Sam"]
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    <LineBreak/>

                                    
                                    
                                    Это так называемое "поверхностное копирование" (shallow copy). И, как правило, такое 
                                    поведение нежелательное. И чтобы происходило копирование элементов, но при этом переменные
                                    указывали на разные списки, необходимо выполнить глубокое копирование (deep copy). 
                                    Для этого можно использовать метод <Span FontWeight="Bold">copy()</Span>

                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="700" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] people1 = ["Tom", "Bob", "Alice"]
                                            <LineBreak/>
                                            [2] people2 = people1.copy() <Span Foreground="#272537">____</Span> # копируем элементы из people1 в people2
                                            <LineBreak/>
                                            [3] people2.append("Sam") <Span Foreground="#272537">____</Span> # добавляем элемент ТОЛЬКО во второй список
                                            <LineBreak/>
                                            [4]
                                            <LineBreak/>
                                            [5] # people1 и people2 указывают на разные списки
                                            <LineBreak/>
                                            [6] print(people1) <Span Foreground="#272537">____</Span> # ["Tom", "Bob", "Alice"]
                                            <LineBreak/>
                                            [7] print(people2) <Span Foreground="#272537">____</Span> # ["Tom", "Bob", "Alice", "Sam"]
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                </Paragraph>
                            </Section>



                            <!--написание Соединение списков-->
                            <Section>
                                <Paragraph>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="35" FontWeight="Bold">
                                        <Span Foreground="#272537">
                                            __________________
                                        </Span>
                                        СОЕДИНЕНИЕ СПИСКОВ
                                    </Span>
                                </Paragraph>

                                <Paragraph>
                                    Для объединения списков применяется операция сложения (+)

                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="700" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] people1 = ["Tom", "Bob", "Alice"]
                                            <LineBreak/>
                                            [2] people2 = ["Tom", "Sam", "Tim", "Bill"]
                                            <LineBreak/>
                                            [3] people3 = people1 + people2
                                            <LineBreak/>
                                            [4] print(people3) <Span Foreground="#272537">____</Span> # ["Tom", "Bob", "Alice", "Tom", "Sam", "Tim", "Bill"]
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                </Paragraph>
                            </Section>



                            <!--написание Списки списков-->
                            <Section>
                                <Paragraph>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="35" FontWeight="Bold">
                                        <Span Foreground="#272537">
                                            _____________________
                                        </Span>
                                        СПИСКИ СПИСКОВ
                                    </Span>
                                </Paragraph>

                                <Paragraph>
                                    Списки кроме стандартных данных типа строк, чисел, также могут содержать другие списки. 
                                    Подобные списки можно ассоциировать с таблицами, где вложенные списки выполняют роль строк.

                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="700" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] people = [
                                            <LineBreak/>
                                            [2] <Span Foreground="#272537">____</Span>["Tom", 29],
                                            <LineBreak/>
                                            [3] <Span Foreground="#272537">____</Span>["Alice", 33],
                                            <LineBreak/> 
                                            [4] <Span Foreground="#272537">____</Span>["Bob", 27]
                                            <LineBreak/>
                                            [5] ]
                                            <LineBreak/>
                                            [6] 
                                            <LineBreak/>
                                            [7] print(people[0]) <Span Foreground="#272537">____</Span> # ["Tom", 29]
                                            <LineBreak/>
                                            [8] print(people[0][0]) <Span Foreground="#272537">____</Span> # Tom
                                            <LineBreak/>
                                            [9] print(people[0][1]) <Span Foreground="#272537">____</Span> # 29
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    Чтобы обратиться к элементу вложенного списка, необходимо использовать пару индексов:
                                    <Span FontWeight="Bold">people[0][1]</Span> - обращение ко второму элементу первого вложенного списка.


                                    <LineBreak/>
                                    <LineBreak/>
                                    Добавление, удаление и изменение общего списка, а также вложенных списков аналогично тому,
                                    как это делается с обычными (одномерными) списками.

                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="600" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] people = [
                                            <LineBreak/>
                                            [2] <Span Foreground="#272537">____</Span>["Tom", 29],
                                            <LineBreak/>
                                            [3] <Span Foreground="#272537">____</Span>["Alice", 33],
                                            <LineBreak/> 
                                            [4] <Span Foreground="#272537">____</Span>["Bob", 27]
                                            <LineBreak/>
                                            [5] ]
                                            <LineBreak/>
                                            [6] 
                                            <LineBreak/>
                                            [7] # создание вложенного списка
                                            <LineBreak/>
                                            [8] person = list()
                                            <LineBreak/>
                                            [9] person.append("Bill")
                                            <LineBreak/>
                                            [10] person.append(41)
                                            <LineBreak/>
                                            [11] # добавление вложенного списка
                                            <LineBreak/>
                                            [12] people.append(person)
                                            <LineBreak/>
                                            [13] 
                                            <LineBreak/>
                                            [14] print(people[-1]) <Span Foreground="#272537">____</Span> # ["Bill", 41]
                                            <LineBreak/>
                                            [15]
                                            <LineBreak/>
                                            [16] # добавление во вложенный список
                                            <LineBreak/>
                                            [17] people[-1].append("+79876543210")
                                            <LineBreak/>
                                            [18] 
                                            <LineBreak/>
                                            [19] print(people[-1]) <Span Foreground="#272537">____</Span> # ["Bill", 41, "+79876543210"]
                                            <LineBreak/>
                                            [20] 
                                            <LineBreak/>
                                            [21] # удаление последнего элемента из вложенного списка
                                            <LineBreak/>
                                            [22] people[-1].pop()
                                            <LineBreak/>
                                            [23] print(people[-1]) <Span Foreground="#272537">____</Span> # ["Bill", 41]
                                            <LineBreak/>
                                            [24] 
                                            <LineBreak/>
                                            [25] # удаление всего последнего вложенного списка
                                            <LineBreak/>
                                            [26] people.pop(-1)
                                            <LineBreak/>
                                            [27]
                                            <LineBreak/>
                                            [28] # изменение первого элемента
                                            <LineBreak/>
                                            [29] people[0] = ["Sam", 18]
                                            <LineBreak/>
                                            [30] print(people) <Span Foreground="#272537">____</Span> # [ ["Sam", 18], ["Alice", 33], ["Bob", 27]]
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <LineBreak/>



                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Перебор вложенных списков:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="400" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] people = [
                                            <LineBreak/>
                                            [2] <Span Foreground="#272537">____</Span>["Tom", 29],
                                            <LineBreak/>
                                            [3] <Span Foreground="#272537">____</Span>["Alice", 33],
                                            <LineBreak/> 
                                            [4] <Span Foreground="#272537">____</Span>["Bob", 27]
                                            <LineBreak/>
                                            [5] ]
                                            <LineBreak/>
                                            [6] 
                                            <LineBreak/>
                                            [7] for person in people:
                                            <LineBreak/>
                                            [8] <Span Foreground="#272537">____</Span>for item in person:
                                            <LineBreak/>
                                            [9] <Span Foreground="#272537">________</Span>print(item, end=" | ")
                                            <LineBreak/>
                                            <LineBreak/>
                                            ### КОД ВЫВЕДЕТ:
                                            <LineBreak/>
                                            Tom | 29 | Alice | 33 | Bob | 27 |
                                        </TextBlock>
                                    </Border>
                                </Paragraph>
                            </Section>
                        </FlowDocument>
                    </RichTextBox>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>






    <!--ДИАПОЗОНЫ-->
    <Style TargetType="{x:Type RichTextBox}" x:Key="DiapozonRichTextBox">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RichTextBox">
                    <RichTextBox HorizontalAlignment="Stretch" VerticalAlignment="Stretch" 
                                     Foreground="AliceBlue"
                                     Background="Transparent"
                                     FontSize="18"
                                     BorderThickness="0"
                                     IsReadOnly="True">
                        <FlowDocument>
                            
                            <!--написание Диапозоны-->
                            <Section>
                                <Paragraph>
                                    Диапазоны или range представляют неизменяемый последовательный набор чисел. 
                                    Для создания диапазов применяетя range, которая имеет следующие формы:
                                    <LineBreak/>
                                    <LineBreak/>

                                    <Span Foreground="#272537">____</Span> <Span FontWeight="Bold">● range(stop):</Span> возвращает все целые числа от 0 до stop
                                    <LineBreak/>
                                    <Span Foreground="#272537">____</Span> <Span FontWeight="Bold">● range(start, stop):</Span> возвращает все целые числа от 0 до stop
                                    <LineBreak/>
                                    <Span Foreground="#272537">____</Span> <Span FontWeight="Bold">● range(start, stop, step):</Span> возвращает целые числа в промежутке от start (включая) до stop (не включая),
                                    <LineBreak/>
                                    <Span Foreground="#272537">______</Span> которые увеличиваются на значение step
                                    

                                    

                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="400" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] range(5) <Span Foreground="#272537">____</Span> # 0, 1, 2, 3, 4
                                            <LineBreak/>
                                            [2] range(1, 5) <Span Foreground="#272537">____</Span> # 1, 2, 3, 4
                                            <LineBreak/>
                                            [3] range(2, 10, 2) <Span Foreground="#272537">____</Span> # 2, 4, 6, 8
                                            <LineBreak/> 
                                            [4] range(10, 2, -2) <Span Foreground="#272537">____</Span> # 10 8 6 4 
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <LineBreak/>


                                    
                                    Диапазоны чаще всего применяются в циклах for. Например, выведем последовательно все 
                                    числа от 0 до 4.
                                    
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="250" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] for i in range(5):
                                            <LineBreak/>
                                            [2] <Span Foreground="#272537">____</Span>print(i, end=" ")
                                            <LineBreak/>
                                            <LineBreak/> 
                                            ###КОД ВЫВЕДЕТ:
                                            <LineBreak/>
                                            0, 1, 2, 3, 4
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <LineBreak/>




                                    Другой пример выведем таблицу умножения.

                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="300" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] for i in range(1, 10):
                                            <LineBreak/>
                                            [2] <Span Foreground="#272537">____</Span>for j in range(1, 10):
                                            <LineBreak/>
                                            [3] <Span Foreground="#272537">________</Span>print(i * j, end="\t")
                                            <LineBreak/> 
                                            [4] <Span Foreground="#272537">____</Span>print("\n")
                                            <LineBreak/>
                                            <LineBreak/> 
                                            ###КОД ВЫВЕДЕТ:
                                            <LineBreak/>
                                            Всю таблицу умножения
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <LineBreak/>



                                    Если нам необходим последовательный список чисел, то для его создания удобно использовать функцию
                                    <Span FontWeight="Bold">range()</Span>

                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="500" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] numbers = list(range(10))
                                            <LineBreak/>
                                            [2] print(numbers) <Span Foreground="#272537">____</Span> # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
                                            <LineBreak/>
                                            [3]
                                            <LineBreak/> 
                                            [4] numbers = list(range(2, 10))
                                            <LineBreak/> 
                                            [4] print(numbers) <Span Foreground="#272537">____</Span> # [2, 3, 4, 5, 6, 7, 8, 9]
                                            <LineBreak/>
                                            [5]
                                            <LineBreak/> 
                                            [6] numbers = list(range(10, 2, -2))
                                            <LineBreak/> 
                                            [7] print(numbers) <Span Foreground="#272537">____</Span> # [10, 8, 6, 4]
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    Преимуществом диапазонов над стандартными списками и кортежами является то, 
                                    что диапазон всегда будет занимать одно и то же небольшое количество памяти вне зависимости 
                                    от того, какой набор чисел представляет этот диапазон. В действительности диапазон хранит 
                                    только начальное, конечное значение и приращение.







                                </Paragraph>
                            </Section>
                            
                            
                        </FlowDocument>
                    </RichTextBox>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <!--КОРТЕЖИ-->
    <Style TargetType="{x:Type RichTextBox}" x:Key="KortezhRichTextBox">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RichTextBox">
                    <RichTextBox HorizontalAlignment="Stretch" VerticalAlignment="Stretch" 
                                     Foreground="AliceBlue"
                                     Background="Transparent"
                                     FontSize="18"
                                     BorderThickness="0"
                                     IsReadOnly="True">
                        <FlowDocument>

                            <!--написание Кортежи-->
                            <Section>
                                <Paragraph>
                                    Кортеж (tuple) представляет последовательность элементов, которая во многом 
                                        похожа на список за тем исключением, что кортеж является неизменяемым (immutable) типом.
                                        Поэтому мы не можем добавлять или удалять элементы в кортеже, изменять его.
                                    <LineBreak/>
                                    <LineBreak/>
                                    
                                    
                                    Для создания кортежа используются круглые скобки, в которые помещаются его значения, разделенные запятыми.
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="300" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] tom = ("Tom", 23)
                                            <LineBreak/>
                                            [2] print(tom) <Span Foreground="#272537">____</Span> # ("Tom", 23)
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <LineBreak/>
                                    

                                    Также для определения кортежа мы можем просто перечислить значения через запятую без применения скобок.
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="300" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] tom = "Tom", 23
                                            <LineBreak/>
                                            [2] print(tom) <Span Foreground="#272537">____</Span> # ("Tom", 23)
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <LineBreak/>


                                    Если вдруг кортеж состоит из одного элемента, то после единственного элемента кортежа необходимо поставить запятую.
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="300" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] tom = ("Tom",)
                                            <LineBreak/>
                                            [2] print(tom) <Span Foreground="#272537">____</Span> # ("Tom",)
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <LineBreak/>


                                    Для создания кортежа из другого набора элементов, например, из списка, можно передать список в функцию tuple(), 
                                    которая возвратит кортеж.
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="400" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] data = ["Tom", 37, "Google"]
                                            <LineBreak/>
                                            [2] tom = tuple(data)
                                            <LineBreak/>
                                            [3] print(tom) <Span Foreground="#272537">____</Span> # ("Tom", 37, "Google")
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <LineBreak/>
                                </Paragraph>
                            </Section>
                            
                            
                            
                            <!--написание ОБРАЩЕНИЕ К ЭЛЕМЕНТАМ-->
                            <Section>
                                <Paragraph>
                                    <Span FontSize="35" FontWeight="Bold">
                                        <Span Foreground="#272537">
                                            ___________
                                        </Span>
                                        ОБРАЩЕНИЕ К ЭЛЕМЕНТАМ КОРТЕЖА
                                    </Span>

                                    <LineBreak/>
                                    <LineBreak/>
                                    Обращение к элементам в кортеже происходит также, как и в списке, по индексу. 
                                    Индексация начинается также с нуля при получении элементов с начала списка и с -1 при получении 
                                    элементов с конца списка.
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="500" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] tom = ("Tom", 37, "Google", "software developer")
                                            <LineBreak/>
                                            [2] print(tom[0]) <Span Foreground="#272537">____</Span> # Tom
                                            <LineBreak/>
                                            [3] print(tom[1]) <Span Foreground="#272537">____</Span> # 37
                                            <LineBreak/>
                                            [4] print(tom[-1]) <Span Foreground="#272537">____</Span> # software developer
                                            
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <LineBreak/>



                                    При необходимости мы можем разложить кортеж на отдельные переменные.
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="700" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] name, age, company, position = ("Tom", 37, "Google", "software developer")
                                            <LineBreak/>
                                            [2] print(name) <Span Foreground="#272537">____</Span> # Tom
                                            <LineBreak/>
                                            [3] print(age) <Span Foreground="#272537">____</Span> # 37
                                            <LineBreak/>
                                            [4] print(position) <Span Foreground="#272537">____</Span> # software developer
                                            <LineBreak/>
                                            [4] print(company) <Span Foreground="#272537">____</Span> # Google

                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <LineBreak/>
                                </Paragraph>
                            </Section>



                            <!--написание ПОЛУЧЕНИЕ ПОДКОРТЕЖЕЙ-->
                            <Section>
                                <Paragraph>
                                    <LineBreak/>
                                    <Span FontSize="35" FontWeight="Bold">
                                        <Span Foreground="#272537">
                                            ______________
                                        </Span>
                                        ПОЛУЧЕНИЕ ПОДКОРТЕЖЕЙ
                                    </Span>

                                    <LineBreak/>
                                    <LineBreak/>
                                    Как и в списках, можно получить часть кортежа в виде другого кортежа.
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="600" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] tom = ("Tom", 37, "Google", "software developer")
                                            <LineBreak/>
                                            [2]
                                            <LineBreak/>
                                            [3] # получем подкортеж с 1 по 3 элемента (не включая)
                                            <LineBreak/>
                                            [4] print(tom[1:3]) <Span Foreground="#272537">____</Span> # (37, "Google")
                                            <LineBreak/>
                                            [5] 
                                            <LineBreak/>
                                            [6] # получем подкортеж с 0 по 3 элемента (не включая)
                                            <LineBreak/>
                                            [7] print(tom[:3]) <Span Foreground="#272537">____</Span> # ("Tom", 37, "Google")
                                            <LineBreak/>
                                            [8] 
                                            <LineBreak/>
                                            [9] # получем подкортеж с 1 по послдений элемент
                                            <LineBreak/>
                                            [10] print(tom[1:]) <Span Foreground="#272537">____</Span> # (37, "Google", "software developer")
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <LineBreak/>
                                    
                                </Paragraph>
                            </Section>




                            <!--написание ПЕРЕБОР КОРТЕЖЕЙ-->
                            <Section>
                                <Paragraph>
                                    <LineBreak/>
                                    <Span FontSize="35" FontWeight="Bold">
                                        <Span Foreground="#272537">
                                            ___________________
                                        </Span>
                                        ПЕРЕБОР КОРТЕЖЕЙ
                                    </Span>

                                    <LineBreak/>
                                    <LineBreak/>

                                    Для перебора кортежа можно использовать стандартные циклы FOR и WHILE. С помощью цикла FOR.
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="400" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] tom = ("Tom", 22, "Google")
                                            <LineBreak/>
                                            [2] for item in tom:
                                            <LineBreak/>
                                            [3] <Span Foreground="#272537">____</Span> print(item)
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <LineBreak/>


                                    С помощью цикла WHILE.
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="400" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] tom = ("Tom", 22, "Google")
                                            <LineBreak/>
                                            [2] 
                                            <LineBreak/>
                                            [3] i = 0
                                            <LineBreak/>
                                            [4] while i &lt; len(tom):
                                            <LineBreak/>
                                            [5] <Span Foreground="#272537">____</Span> print(tom[i])
                                            <LineBreak/>
                                            [6] <Span Foreground="#272537">____</Span> i += 1
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <LineBreak/>
                                </Paragraph>
                            </Section>



                            <!--написание ПРОВЕРКА НАЛИЧИЯ ЗНАЧЕНИЯ-->
                            <Section>
                                <Paragraph>
                                    <LineBreak/>
                                    <Span FontSize="35" FontWeight="Bold">
                                        <Span Foreground="#272537">
                                            _____________
                                        </Span>
                                        ПРОВЕРКА НАЛИЧИЯ ЗНАЧЕНИЯ
                                    </Span>

                                    <LineBreak/>
                                    <LineBreak/>

                                    Как для списка с помощью выражения элемент in кортеж можно проверить наличие элемента в кортеже.
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="600" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] user = ("Tom", 22, "Google")
                                            <LineBreak/>
                                            [2] name = "Tom"
                                            <LineBreak/>
                                            [3] if name in user:
                                            <LineBreak/>
                                            [4] <Span Foreground="#272537">____</Span> print("Пользователя зовут Tom")
                                            <LineBreak/>
                                            [5] else:
                                            <LineBreak/>
                                            [6] <Span Foreground="#272537">____</Span> print("Пользователь имеет другое имя")
                                        </TextBlock>
                                    </Border>
                                    
                                </Paragraph>
                            </Section>
                        </FlowDocument>
                    </RichTextBox>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>




    <!--СЛОВАРИ-->
    <Style TargetType="{x:Type RichTextBox}" x:Key="DictsRichTextBox">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RichTextBox">
                    <RichTextBox HorizontalAlignment="Stretch" VerticalAlignment="Stretch" 
                                     Foreground="AliceBlue"
                                     Background="Transparent"
                                     FontSize="18"
                                     BorderThickness="0"
                                     IsReadOnly="True">
                        <FlowDocument>

                            <!--написание СЛОВАРИ-->
                            <Section>
                                <Paragraph>
                                    <Span FontWeight="Bold">Словарь</Span> (dictionary) в языке Python хранит коллекцию элементов, где каждый элемент имеет уникальный ключ и
                                    ассоциированое с ним некоторое значение.

                                    <LineBreak/>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Определение словаря имеет следующий синтаксис:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Green" BorderThickness="2" Padding="5" Width="500" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] dictionary = { ключ1:значение1, ключ2:значение2, ....}
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    В фигурных скобках через запятую определяется последовательность элементов, где для каждого элемента сначала указывается ключ и через двоеточие его значение.
                                    <LineBreak/>
                                    <LineBreak/>
                                    <LineBreak/>


                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="400" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] users = {1: "Tom", 2: "Bob", 3: "Bill"}
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    В словаре users в качестве ключей используются числа, а в качестве значений - строки. То есть элемент с ключом 1 
                                    имеет значение "Tom", элемент с ключом 2 - значение "Bob" и т.д.
                                    <LineBreak/>
                                    <LineBreak/>

                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="800" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] emails = {"tom@gmail.com": "Tom", "bob@gmai.com": "Bob", "sam@gmail.com": "Sam"}
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    В словаре emails в качестве ключей используются строки - электронные адреса пользователей и в качестве значений тоже строки - имена пользователей.
                                    <LineBreak/>
                                    <LineBreak/>
                                    <LineBreak/>
                                    

                                    Мы можем также вообще определить пустой словарь без элементов.
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="500" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] objects = {} <Span Foreground="#272537">____</Span> # создание пустого словаря 
                                            <LineBreak/>
                                            [2] objects = dict() <Span Foreground="#272537">____</Span> # создание пустого словаря
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <LineBreak/>
                                </Paragraph>
                            </Section>


                            <!--написание ПРЕОБРАЗОВАНИЕ СПИСКОВ И КОРТЕЖЕЙ В СЛОВАРЬ-->
                            <Section>
                                <Paragraph>
                                    
                                    <Span FontSize="35" FontWeight="Bold">
                                        <Span Foreground="#272537">
                                            
                                        </Span>
                                        ПРЕОБРАЗОВАНИЕ СПИСКОВ И КОРТЕЖЕЙ В СЛОВАРЬ
                                    </Span>
                                    <LineBreak/>
                                    <LineBreak/>

                                    Несмотря на то, что словарь и список - непохожие по структуре типы, но тем не менее существует возможности
                                    для отдельных видов списков преобразования их в словарь с помощью встроенной функции dict(). Для этого список 
                                    должен хранить набор вложенных списков. Каждый вложенный список должен состоять из двух элементов - при конвертации в
                                    словарь первый элемент станет ключом, а второй - значением.
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="800" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] users_list = [
                                            <LineBreak/>
                                            [2] <Span Foreground="#272537">____</Span> ["+111123455", "Tom"],
                                            <LineBreak/>
                                            [3] <Span Foreground="#272537">____</Span> ["+384767557", "Bob"],
                                            <LineBreak/>
                                            [4] <Span Foreground="#272537">____</Span> ["+958758767", "Alice"]
                                            <LineBreak/>
                                            [5] ]
                                            <LineBreak/>
                                            [6] users_dict = dict(users_list)
                                            <LineBreak/>
                                            [7] print(users_dict) <Span Foreground="#272537">____</Span> # {"+111123455": "Tom", "+384767557": "Bob", "+958758767": "Alice"}
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <LineBreak/>

                                    
                                    Подобным образом можно преобразовать в словарь двухмерные кортежи, которые в свою очередь содержать кортежи из двух элементов.
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="800" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] users_tuple = (
                                            <LineBreak/>
                                            [2] <Span Foreground="#272537">____</Span> ("+111123455", "Tom"),
                                            <LineBreak/>
                                            [3] <Span Foreground="#272537">____</Span> ("+384767557", "Bob"),
                                            <LineBreak/>
                                            [4] <Span Foreground="#272537">____</Span> ("+958758767", "Alice")
                                            <LineBreak/>
                                            [5] )
                                            <LineBreak/>
                                            [6] users_dict = dict(users_tuple)
                                            <LineBreak/>
                                            [7] print(users_dict) <Span Foreground="#272537">____</Span> # {"+111123455": "Tom", "+384767557": "Bob", "+958758767": "Alice"}
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <LineBreak/>
                                </Paragraph>
                            </Section>



                            <!--написание ПОЛУЧЕНИЕ И ИЗМЕНЕНИЕ ЭЛЕМЕНТОВ-->
                            <Section>
                                <Paragraph>

                                    <Span FontSize="35" FontWeight="Bold">
                                        <Span Foreground="#272537">
                                            __________
                                        </Span>
                                        ПОЛУЧЕНИЕ И ИЗМЕНЕНИЕ ЭЛЕМЕНТОВ
                                    </Span>
                                    <LineBreak/>
                                    <LineBreak/>


                                    Для обращения к элементам словаря после его названия в квадратных скобках указывается ключ элемента.
                                    <Span FontSize="20">
                                        <Bold>Пример синтаксиса:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Green" BorderThickness="2" Padding="5" Width="300" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] dictionary[ключ]
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <LineBreak/>


                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="600" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] users = {
                                            <LineBreak/>
                                            [2] <Span Foreground="#272537">____</Span>   "+11111111": "Tom",
                                            <LineBreak/>
                                            [3] <Span Foreground="#272537">____</Span>   "+33333333": "Bob",
                                            <LineBreak/>
                                            [4] <Span Foreground="#272537">____</Span>   "+55555555": "Alice"
                                            <LineBreak/>
                                            [5] }
                                            <LineBreak/>
                                            [6]
                                            <LineBreak/>
                                            [7] # получаем элемент с ключом "+11111111"
                                            <LineBreak/>
                                            [8] print(users["+11111111"]) <Span Foreground="#272537">____</Span> # Tom
                                            <LineBreak/>
                                            [9]
                                            <LineBreak/>
                                            [10] # установка значения элемента с ключом "+33333333"
                                            <LineBreak/>
                                            [11] users["+33333333"] = "Bob Smith"
                                            <LineBreak/>
                                            [12] print(users["+33333333"]) <Span Foreground="#272537">____</Span> # Bob Smith
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    Если при установки значения элемента с таким ключом в словаре не окажется, то произойдет его добавление. Но если 
                                    если мы попробуем получить значение с ключом, которого нет в словаре, то Python сгенерирует ошибку "KeyError".

                                    <LineBreak/>
                                    <LineBreak/>
                                    <LineBreak/>
                                    Также для получения элементов можно использовать метод get, который имеет две формы:
                                    <LineBreak/>
                                    <Span Foreground="#272537">____</Span> ● get(key): возвращает из словаря элемент с ключом key. Если элемента с таким ключом нет, то возвращает
                                    <LineBreak/>
                                    <Span Foreground="#272537">____</Span> значение None
                                    <LineBreak/>
                                    <Span Foreground="#272537">____</Span> ● get(key, default): возвращает из словаря элемент с ключом key. Если элемента с таким ключом нет, то
                                    <LineBreak/>
                                    <Span Foreground="#272537">____</Span> возвращает значение по умолчанию default


                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="600" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] users = {
                                            <LineBreak/>
                                            [2] <Span Foreground="#272537">____</Span>   "+11111111": "Tom",
                                            <LineBreak/>
                                            [3] <Span Foreground="#272537">____</Span>   "+33333333": "Bob",
                                            <LineBreak/>
                                            [4] <Span Foreground="#272537">____</Span>   "+55555555": "Alice"
                                            <LineBreak/>
                                            [5] }
                                            <LineBreak/>
                                            [6]
                                            <LineBreak/>
                                            [7] user1 = users.get("+55555555")
                                            <LineBreak/>
                                            [8] print(user1) <Span Foreground="#272537">____</Span> # Alice
                                            <LineBreak/>
                                            [9] user2 = users.get("+33333333", "Unknown user")
                                            <LineBreak/>
                                            [10] print(user2) <Span Foreground="#272537">____</Span> # Bob
                                            <LineBreak/>
                                            [11] user3 = users.get("+44444444", "Unknown user")
                                            <LineBreak/>
                                            [12] print(user3) <Span Foreground="#272537">____</Span> # Unknown user
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <LineBreak/>
                                </Paragraph>
                            </Section>



                            <!--написание УДАЛЕНИЕ-->
                            <Section>
                                <Paragraph>

                                    <Span FontSize="35" FontWeight="Bold">
                                        <Span Foreground="#272537">
                                            __________________________
                                        </Span>
                                        УДАЛЕНИЕ
                                    </Span>
                                    <LineBreak/>
                                    <LineBreak/>
                                    Для удаления элемента по ключу применяется оператор del.
                                    <LineBreak/>
                                    <LineBreak/>

                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="600" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] users = {
                                            <LineBreak/>
                                            [2] <Span Foreground="#272537">____</Span>   "+11111111": "Tom",
                                            <LineBreak/>
                                            [3] <Span Foreground="#272537">____</Span>   "+33333333": "Bob",
                                            <LineBreak/>
                                            [4] <Span Foreground="#272537">____</Span>   "+55555555": "Alice"
                                            <LineBreak/>
                                            [5] }
                                            <LineBreak/>
                                            [6]
                                            <LineBreak/>
                                            [7] del users["+55555555"]
                                            <LineBreak/>
                                            [8] print(users) <Span Foreground="#272537">____</Span> # { "+11111111": "Tom", "+33333333": "Bob"}
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    Но стоит учитывать, что если подобного ключа не окажется в словаре, то будет выброшено исключение KeyError. 
                                    Поэтому опять же перед удалением желательно проверять наличие элемента с данным ключом.
                                    <LineBreak/>
                                    <LineBreak/>
                                    <LineBreak/>
                                    
                                    
                                    Другой способ удаления представляет метод pop(). Он имеет две формы:
                                    <LineBreak/>
                                    <Span Foreground="#272537">____</Span> ● pop(key): удаляет элемент по ключу key и возвращает удаленный элемент. Если элемент с данным ключом
                                    <LineBreak/>
                                    <Span Foreground="#272537">____</Span> отсутствует, то генерируется исключение KeyError
                                    <LineBreak/>
                                    <Span Foreground="#272537">____</Span> ● pop(key, default): удаляет элемент по ключу key и возвращает удаленный элемент. Если элемент с данным
                                    <LineBreak/>
                                    <Span Foreground="#272537">____</Span> ключом отсутствует, то возвращается значение default


                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="600" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] users = {
                                            <LineBreak/>
                                            [2] <Span Foreground="#272537">____</Span>   "+11111111": "Tom",
                                            <LineBreak/>
                                            [3] <Span Foreground="#272537">____</Span>   "+33333333": "Bob",
                                            <LineBreak/>
                                            [4] <Span Foreground="#272537">____</Span>   "+55555555": "Alice"
                                            <LineBreak/>
                                            [5] }
                                            <LineBreak/>
                                            [6] key = "+55555555"
                                            <LineBreak/>
                                            [7] user = users.pop(key)
                                            <LineBreak/>
                                            [8] print(user) <Span Foreground="#272537">____</Span> # Alice
                                            <LineBreak/>
                                            [9]
                                            <LineBreak/>
                                            [10] user = users.pop("+4444444", "Unknown user")
                                            <LineBreak/>
                                            [11] print(user) <Span Foreground="#272537">____</Span> # Unknown user
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    Если необходимо удалить все элементы, то в этом случае можно воспользоваться методом
                                    <Span FontWeight="Bold">clear()</Span>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <LineBreak/>
                                </Paragraph>
                            </Section>




                            <!--написание КОПИРОВАНИЕ И ОБЪЕДИНЕНИЕ СЛОВАРЕЙ-->
                            <Section>
                                <Paragraph>
                                    <Span FontSize="35" FontWeight="Bold">
                                        <Span Foreground="#272537">
                                            ______
                                        </Span>
                                        КОПИРОВАНИЕ И ОБЪЕДИНЕНИЕ СЛОВАРЕЙ
                                    </Span>
                                    <LineBreak/>
                                    <LineBreak/>

                                    Метод
                                    <Span FontWeight="Bold">copy()</Span> копирует содержимое словаря, возвращая новый словарь.
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="800" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] users = {"+1111111": "Tom", "+3333333": "Bob", "+5555555": "Alice"}
                                            <LineBreak/>
                                            [2] students = users.copy()
                                            <LineBreak/>
                                            [3] print(students) <Span Foreground="#272537">____</Span> # {"+1111111": "Tom", "+3333333": "Bob", "+5555555": "Alice"}
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <LineBreak/>

                                    
                                    
                                    Метод <Span FontWeight="Bold">update()</Span> объединяет два словаря.
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="800" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] users = {"+1111111": "Tom", "+3333333": "Bob", "+5555555": "Alice"}
                                            <LineBreak/>
                                            [2] 
                                            <LineBreak/>
                                            [3] users2 = {"+2222222": "Sam", "+6666666": "Kate"}
                                            <LineBreak/>
                                            [4] users.update(users2)
                                            <LineBreak/>
                                            [5] 
                                            <LineBreak/>
                                            [6] print(users)    # {"+1111111": "Tom", "+3333333": "Bob", "+2222222": "Sam", "+6666666": "Kate"}
                                            <LineBreak/>
                                            [7] print(users2)   # {"+2222222": "Sam", "+6666666": "Kate"}
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    При этом словарь users2 остается без изменений. Изменяется только словарь users, в который добавляются элементы другого словаря.
                                    <LineBreak/>
                                    <LineBreak/>
                                    <LineBreak/>
                                </Paragraph>
                            </Section>




                            <!--написание КОМПЛЕКСНЫЕ СЛОВАРИ-->
                            <Section>
                                <Paragraph>
                                    <Span FontSize="35" FontWeight="Bold">
                                        <Span Foreground="#272537">
                                            _______________
                                        </Span>
                                        КОМПЛЕКСНЫЕ СЛОВАРИ
                                    </Span>
                                    <LineBreak/>
                                    <LineBreak/>

                                    
                                    Кроме простейших объектов типа чисел и строк словари также могут хранить и более сложные 
                                    объекты - те же списки, кортежи или другие словари.
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="400" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] users = {
                                            <LineBreak/>
                                            [2] <Span Foreground="#272537">____</Span> "Tom": {
                                            <LineBreak/>
                                            [3] <Span Foreground="#272537">________</Span> "phone": "+971478745",
                                            <LineBreak/>
                                            [4] <Span Foreground="#272537">________</Span> "email": "tom12@gmail.com"
                                            <LineBreak/>
                                            [5] <Span Foreground="#272537">____</Span> },
                                            <LineBreak/>
                                            [6] <Span Foreground="#272537">____</Span> "Bob": {
                                            <LineBreak/>
                                            [7] <Span Foreground="#272537">________</Span> "phone": "+876390444",
                                            <LineBreak/>
                                            [8] <Span Foreground="#272537">________</Span> "email": "bob@gmail.com",
                                            <LineBreak/>
                                            [9] <Span Foreground="#272537">________</Span> "skype": "bob123"
                                            <LineBreak/>
                                            [10] <Span Foreground="#272537">____</Span> }
                                            <LineBreak/>
                                            [11] }
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    В данном случае значение каждого элемента словаря в свою очередь представляет отдельный словарь.
                                    <LineBreak/>
                                    <LineBreak/>
                                    <LineBreak/>
                                    
                                    
                                    Для обращения к элементам вложенного словаря соответственно необходимо использовать два ключа.
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="400" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] old_email = users["Tom"]["email"]
                                            <LineBreak/>
                                            [2] users["Tom"]["email"] = "supertom@gmail.com"
                                            <LineBreak/>
                                            [3] print(users["Tom"]) <Span Foreground="#272537">____</Span> # { phone": "+971478745", "email": "supertom@gmail.com }
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    Но если мы попробуем получить значение по ключу, который отсутствует в словаре, Python сгенерирует исключение KeyError.
                                </Paragraph>
                            </Section>
                        </FlowDocument>
                    </RichTextBox>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>




    <!--МНОЖЕСТВА-->
    <Style TargetType="{x:Type RichTextBox}" x:Key="SetRichTextBox">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RichTextBox">
                    <RichTextBox HorizontalAlignment="Stretch" VerticalAlignment="Stretch" 
                                     Foreground="AliceBlue"
                                     Background="Transparent"
                                     FontSize="18"
                                     BorderThickness="0"
                                     IsReadOnly="True">
                        <FlowDocument>

                            
                            <Section>
                                <Paragraph>
                                    Множество (set) представляют еще один вид набора, который хранит только уникальные элементы. 
                                    Для определения множества используются фигурные скобки, в которых перечисляются элементы.

                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="400" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] users = {"Tom", "Bob", "Alice", "Tom"}
                                            <LineBreak/>
                                            [2] print(users) <Span Foreground="#272537">____</Span> # {"Alice", "Bob", "Tom"}
                                            </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    Обратите внимание, что несмотря на то, что функция print вывела один раз элемент "Tom", хотя в 
                                    определении множества этот элемент содержится два раза. Все потому что множество содержит только
                                    <Span FontWeight="Bold">уникальные</Span> значения.
                                    <LineBreak/>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <LineBreak/>


                                    Также для определения множества может применяться функция set(), в которую передается список или кортеж элементов.
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="400" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] users = {"Tom", "Bob", "Alice", "Tom"}
                                            <LineBreak/>
                                            [2] print(users) <Span Foreground="#272537">____</Span> # {"Alice", "Bob", "Tom"}
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    Обратите внимание, что несмотря на то, что функция print вывела один раз элемент "Tom", хотя в 
                                    определении множества этот элемент содержится два раза. Все потому что множество содержит только
                                    <Span FontWeight="Bold">уникальные</Span> значения.
                                    <LineBreak/>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <LineBreak/>



                                    Функцию set удобно применять для создания пустого множества.
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="200" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] users = set()
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <LineBreak/>
                                    
                                </Paragraph>
                            </Section>




                            <!--написание ДОБАВЛЕНИЕ ЭЛЕМЕНТОВ-->
                            <Section>
                                <Paragraph>
                                    <Span FontSize="35" FontWeight="Bold">
                                        <Span Foreground="#272537">
                                            _________________
                                        </Span>
                                        ДОБАВЛЕНИЕ ЭЛЕМЕНТОВ
                                    </Span>
                                    <LineBreak/>
                                    <LineBreak/>
                                    Для добавления одиночного элемента вызывается метод <Span FontWeight="Bold">add().</Span>

                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="200" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] users = set()
                                            <LineBreak/>
                                            [2] users.add("Sam")
                                            <LineBreak/>
                                            [3] print(users)
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <LineBreak/>
                                </Paragraph>
                            </Section>





                            <!--написание УДАЛЕНИЕ ЭЛЕМЕНТОВ-->
                            <Section>
                                <Paragraph>
                                    <Span FontSize="35" FontWeight="Bold">
                                        <Span Foreground="#272537">
                                            _________________
                                        </Span>
                                        УДАЛЕНИЕ ЭЛЕМЕНТОВ
                                    </Span>
                                    <LineBreak/>
                                    <LineBreak/>
                                    Для удаления одного элемента вызывается метод <Span FontWeight="Bold">remove()</Span>, в который передается удаляемый элемент. 
                                    Но следует учитывать, что если такого элемента не окажется в множестве, то 
                                    будет сгенерирована ошибка. Поэтому перед удалением следует проверять на 
                                    наличие элемента с помощью оператора <Span FontWeight="Bold">in</Span>.

                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="400" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] users = {"Tom", "Bob", "Alice"}
                                            <LineBreak/>
                                            [2] 
                                            <LineBreak/>
                                            [3] user = "Tom"
                                            <LineBreak/>
                                            [4] if user in users: 
                                            <LineBreak/>
                                            [5] <Span Foreground="#272537">____</Span> users.remove(user)
                                            <LineBreak/>
                                            [6] print(users) <Span Foreground="#272537">____</Span> # {"Bob", "Alice"}
                                            
                                        
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <LineBreak/>


                                    Также для удаления можно использовать метод <Span FontWeight="Bold">discard()</Span>, который не будет 
                                    генерировать исключения при отсутствии элемента.
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="700" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] users = {"Tom", "Bob", "Alice"}
                                            <LineBreak/>
                                            [2] 
                                            <LineBreak/>
                                            [3] users.discard("Tim") <Span Foreground="#272537">____</Span> # элемент "Tim" отсутствует, и метод ничего не делает
                                            <LineBreak/>
                                            [4] print(users) <Span Foreground="#272537">____</Span> #  {"Tom", "Bob", "Alice"}
                                            <LineBreak/>
                                            [5] 
                                            <LineBreak/>
                                            [6] users.discard("Tom") <Span Foreground="#272537">____</Span> # элемент "Tom" есть, и метод удаляет элемент
                                            <LineBreak/>
                                            [7] print(users) <Span Foreground="#272537">____</Span> #  {"Bob", "Alice"}
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <LineBreak/>
                                </Paragraph>
                            </Section>





                            <!--написание КОПИРОВАНИЕ МНОЖЕСТВ-->
                            <Section>
                                <Paragraph>
                                    <Span FontSize="35" FontWeight="Bold">
                                        <Span Foreground="#272537">
                                            _________________
                                        </Span>
                                        КОПИРОВАНИЕ МНОЖЕСТВ
                                    </Span>
                                    <LineBreak/>
                                    <LineBreak/>
                                    С помощью метода <Span FontWeight="Bold">copy()</Span> можно скопировать содержимое одного множества в другую переменную.

                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="400" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] users = {"Tom", "Bob", "Alice"}
                                            <LineBreak/>
                                            [2] students = users.copy()
                                            <LineBreak/>
                                            [3] print(students) <Span Foreground="#272537">____</Span> # {"Tom", "Bob", "Alice"}
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <LineBreak/>
                                </Paragraph>
                            </Section>



                            <!--написание ОБЪЕДЕНЕНИЕ МНОЖЕСТВ-->
                            <Section>
                                <Paragraph>
                                    <Span FontSize="35" FontWeight="Bold">
                                        <Span Foreground="#272537">
                                            _________________
                                        </Span>
                                        ОБЪЕДЕНЕНИЕ МНОЖЕСТВ
                                    </Span>
                                    <LineBreak/>
                                    <LineBreak/>
                                    Метод
                                    <Span FontWeight="Bold">union()</Span> объединяет два множества и возвращает новое множество.

                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="500" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] users = {"Tom", "Bob", "Alice"}
                                            <LineBreak/>
                                            [2] users2 = {"Sam", "Kate", "Bob"}
                                            <LineBreak/>
                                            [3]
                                            <LineBreak/>
                                            [4] users3 = users.union(users2)
                                            <LineBreak/>
                                            [5] print(users3) <Span Foreground="#272537">____</Span> # {"Bob", "Alice", "Sam", "Kate", "Tom"}
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <LineBreak/>
                                </Paragraph>
                            </Section>





                            <!--написание ПЕРЕСЕЧЕНИЕ МНОЖЕСТВ-->
                            <Section>
                                <Paragraph>
                                    <Span FontSize="35" FontWeight="Bold">
                                        <Span Foreground="#272537">
                                            _________________
                                        </Span>
                                        ПЕРЕСЕЧЕНИЕ МНОЖЕСТВ
                                    </Span>
                                    <LineBreak/>
                                    <LineBreak/>
                                    Пересечение множеств позволяет получить только те элементы, которые есть 
                                    одновременно в обоих множествах. Метод <Span FontWeight="Bold">intersection()</Span> производит операцию
                                    пересечения множеств и возвращает новое множество.
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="500" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] users = {"Tom", "Bob", "Alice"}
                                            <LineBreak/>
                                            [2] users2 = {"Sam", "Kate", "Bob"}
                                            <LineBreak/>
                                            [3]
                                            <LineBreak/>
                                            [4] users3 = users.intersection(users2)
                                            <LineBreak/>
                                            [5] print(users3) <Span Foreground="#272537">____</Span> # {"Bob"}
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    Модификация метода - <Span FontWeight="Bold">intersection_update()</Span> заменяет пересеченными элементами первое множество.
                                    <LineBreak/>
                                    <LineBreak/>
                                    <LineBreak/>
                                </Paragraph>
                            </Section>





                            <!--написание РАЗНОСТЬ МНОЖЕСТВ-->
                            <Section>
                                <Paragraph>
                                    <Span FontSize="35" FontWeight="Bold">
                                        <Span Foreground="#272537">
                                            __________________
                                        </Span>
                                        РАЗНОСТЬ МНОЖЕСТВ
                                    </Span>
                                    <LineBreak/>
                                    <LineBreak/>
                                    Еще одна операция - разность множеств возвращает те элементы, которые есть в
                                    первом множестве, но отсутствуют во втором. Для получения разности множеств
                                    можно использовать метод <Span FontWeight="Bold">difference</Span> или операцию вычитания.

                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="500" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] users = {"Tom", "Bob", "Alice"}
                                            <LineBreak/>
                                            [2] users2 = {"Sam", "Kate", "Bob"}
                                            <LineBreak/>
                                            [3]
                                            <LineBreak/>
                                            [4] users3 = users.difference(users2)
                                            <LineBreak/>
                                            [5] print(users3) <Span Foreground="#272537">____</Span> # {"Tom", "Alice"}
                                            <LineBreak/>
                                            [6] print(users - users2) <Span Foreground="#272537">____</Span> # {"Tom", "Alice"}
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <LineBreak/>
                                </Paragraph>
                            </Section>





                            <!--написание ОТНОШЕНИЯ МЕЖДУ МНОЖЕСТВАМИ-->
                            <Section>
                                <Paragraph>
                                    <Span FontSize="35" FontWeight="Bold">
                                        <Span Foreground="#272537">
                                            _________
                                        </Span>
                                        ОТНОШЕНИЯ МЕЖДУ МНОЖЕСТВАМИ
                                    </Span>
                                    <LineBreak/>
                                    <LineBreak/>
                                    Метод <Span FontWeight="Bold">issubset</Span>  позволяет выяснить, является ли текущее множество
                                    подмножеством (то есть частью) другого множества.

                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="500" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] users = {"Tom", "Bob", "Alice"}
                                            <LineBreak/>
                                            [2] superusers = {"Sam", "Tom", "Bob", "Alice", "Greg"}
                                            <LineBreak/>
                                            [3]
                                            <LineBreak/>
                                            [4] print(users.issubset(superusers)) <Span Foreground="#272537">____</Span> # True
                                            <LineBreak/>
                                            [5] print(superusers.issubset(users)) <Span Foreground="#272537">____</Span> # False
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <LineBreak/>



                                    Метод <Span FontWeight="Bold">issuperset</Span>, наоборот, возвращает True, если текущее множество 
                                    является надмножеством (то есть содержит) для другого множества.
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>
                                    
                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="500" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] users = {"Tom", "Bob", "Alice"}
                                            <LineBreak/>
                                            [2] superusers = {"Sam", "Tom", "Bob", "Alice", "Greg"}
                                            <LineBreak/>
                                            [3]
                                            <LineBreak/>
                                            [4] print(users.issuperset(superusers)) <Span Foreground="#272537">____</Span> # False
                                            <LineBreak/>
                                            [5] print(superusers.issuperset(users)) <Span Foreground="#272537">____</Span> # True
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <LineBreak/>
                                </Paragraph>
                            </Section>





                            <!--написание FROZEN SET-->
                            <Section>
                                <Paragraph>
                                    <Span FontSize="35" FontWeight="Bold">
                                        <Span Foreground="#272537">
                                            __________________________
                                        </Span>
                                        FROZEN SET
                                    </Span>
                                    <LineBreak/>
                                    <LineBreak/>

                                    Тип <Span FontWeight="Bold">frozen set</Span> является видом множеств, которое не может быть изменено. Для 
                                    его создания используется функция
                                    <Span FontWeight="Bold">frozenset.</Span>

                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="400" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] users = frozenset({"Tom", "Bob", "Alice"})
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    В функцию frozenset передается набор элементов - список, кортеж, другое множество.
                                    <LineBreak/>
                                    <LineBreak/>
                                    В такое множество мы не можем добавить новые элементы, как и удалить из него уже имеющиеся.
                                    Собственно поэтому frozen set поддерживает ограниченный набор операций.

                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Операции:</Bold>
                                    </Span>
                                    <LineBreak/>
                                    <Border BorderBrush="Yellow" BorderThickness="2" Padding="5" Width="700" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            <Span Foreground="#272537">____</Span> ● len(s): возвращает длину множества
                                            <LineBreak/>
                                            <Span Foreground="#272537">____</Span> ● x in s: возвращает True, если элемент x присутствует в множестве s
                                            <LineBreak/>
                                            <Span Foreground="#272537">____</Span> ● x not in s: возвращает True, если элемент x отсутствует в множестве s
                                            <LineBreak/>
                                            <Span Foreground="#272537">____</Span> ● s.issubset(t): возвращает True, если t содержит множество s
                                            <LineBreak/>
                                            <Span Foreground="#272537">____</Span> ● s.issuperset(t): возвращает True, если t содержится в множестве s
                                            <LineBreak/>
                                            <Span Foreground="#272537">____</Span> ● s.union(t): возвращает объединение множеств s и t
                                            <LineBreak/>
                                            <Span Foreground="#272537">____</Span> ● s.intersection(t): возвращает пересечение множеств s и t
                                            <LineBreak/>
                                            <Span Foreground="#272537">____</Span> ● s.difference(t): возвращает разность множеств s и t
                                            <LineBreak/>
                                            <Span Foreground="#272537">____</Span> ● s.copy(): возвращает копию множества s
                                        </TextBlock>
                                    </Border>
                                    
                                </Paragraph>
                            </Section>



                        </FlowDocument>
                    </RichTextBox>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>




    <!--ГЕНЕРАТОР-->
    <Style TargetType="{x:Type RichTextBox}" x:Key="GenerateRichTextBox">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RichTextBox">
                    <RichTextBox HorizontalAlignment="Stretch" VerticalAlignment="Stretch" 
                                     Foreground="AliceBlue"
                                     Background="Transparent"
                                     FontSize="18"
                                     BorderThickness="0"
                                     IsReadOnly="True">
                        <FlowDocument>
                            <Section>
                                <!--написание ГЕНЕРАТОР СПИСКА-->
                                <Paragraph>

                                    Функциональность <Span FontWeight="Bold">"list comprehension иначе, как генератор списка"</Span> предоставляет более краткий и 
                                    лаконичный синтаксис для создания списков на основе других наборов данных. Она имеет следующий синтаксис.
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Конструкция:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Green" BorderThickness="2" Padding="5" Width="500" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] newlist = [EXPR for ITEM in ITER (if COND)]
                                        </TextBlock>
                                    </Border>
                                    
                                    <LineBreak/>
                                    <LineBreak/>
                                    Синтаксис list comprehension состоит из следующих компонентов:
                                    <LineBreak/>
                                    <Span Foreground="#272537">____</Span> ● ITER: перебираемый источник данных, в качестве которого может выступать список, множество,
                                    <LineBreak/>
                                    <Span Foreground="#272537">____</Span> последовательность, либо даже функция, которая возвращает набор данных, например, range()
                                    <LineBreak/>

                                    <Span Foreground="#272537">____</Span> ● ITEM: извлекаемый из источника данных элемент.
                                    <LineBreak/>

                                    <Span Foreground="#272537">____</Span> ● EXPR: выражение, которое возвращает некоторое значение. Это значение затем попадает в генерируемый
                                    <Span Foreground="#272537">____</Span> список.
                                    <LineBreak/>
                                    <Span Foreground="#272537">____</Span> ● COND: условие, которому должны соответствовать извлекаемые из источника данных элементы.
                                    <LineBreak/>
                                    <Span Foreground="#272537">____</Span> Если элемент НЕ удовлетворяет условию, то он НЕ выбирается. Необязательный параметр.

                                    
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="450" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] numbers = [-3, -2, -1, 0, 1, 2, 3]
                                            <LineBreak/>
                                            [2] positive_numbers = [n for n in numbers if n > 0]
                                            <LineBreak/>
                                            [3]
                                            <LineBreak/>
                                            [4] print(positive_numbers) <Span Foreground="#272537">____</Span> # [1, 2, 3]
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    Выражение [n for n in numbers if n > 0] говорит выбрать из списка numbers каждый элемент в переменную n, если n больше 0 и возврать n в результирующий список.

                                </Paragraph>
                            </Section>





                            <Section>
                                <!--написание ИСТОЧНИК ДАННЫХ ITER-->
                                <Paragraph>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="35" FontWeight="Bold">
                                        <Span Foreground="#272537">
                                            _________________
                                        </Span>
                                        ИСТОЧНИК ДАННЫХ ITER
                                    </Span>
                                    <LineBreak/>
                                    <LineBreak/>


                                    В качестве источника данных ITER может использоваться любой перебираемый объект, например, другой список, словарь и т.д. 
                                    Например, функция range() возвращает все числя нуля до указанного порога не включая.

                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="450" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] numbers = [n for n in range(10)]
                                            <LineBreak/>
                                            [2] print(numbers) <Span Foreground="#272537">____</Span> # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>

                                </Paragraph>
                            </Section>




                            <Section>
                                <!--написание ВОЗВРАЩЕНИЕ РЕЗУЛЬТАТА EXPR-->
                                <Paragraph>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="35" FontWeight="Bold">
                                        <Span Foreground="#272537">
                                            _____________
                                        </Span>
                                        ВОЗВРАЩЕНИЕ РЕЗУЛЬТАТА EXPR
                                    </Span>
                                    <LineBreak/>
                                    <LineBreak/>


                                    Параметр EXPR представляет выражение, которое возвращает некоторое значение. Это значение затем помещается в генерируемый список. 
                                    В примерах выше это был текущий элемент, который извлекается из источника данных. Но с этим выражением можно проводить разные операции.

                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="450" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] numbers = [-3, -2, -1, 0, 1, 2, 3]
                                            <LineBreak/>
                                            [2] new_numbers = [n * 2 for n in numbers]
                                            <LineBreak/>
                                            [3] print(new_numbers) <Span Foreground="#272537">____</Span> # [-6, -4, -2, 0, 2, 4, 6]
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    Здесь EXPR представляет выражение n * 2

                                </Paragraph>
                            </Section>




                            <Section>
                                <!--написание УСЛОВИЕ COND-->
                                <Paragraph>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="35" FontWeight="Bold">
                                        <Span Foreground="#272537">
                                            ______________________
                                        </Span>
                                        УСЛОВИЕ COND
                                    </Span>
                                    <LineBreak/>
                                    <LineBreak/>


                                    Условие - параметр COND определяет фильтр для выбора элементов из источника данных. 
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="450" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] numbers = [n for n in range(10) if n % 2 == 0]
                                            <LineBreak/>
                                            [2] print(numbers) <Span Foreground="#272537">____</Span> # [0, 2, 4, 6, 8]
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    Здесь с помощью COND отбирем только четные числа.

                                </Paragraph>
                            </Section>





                        </FlowDocument>
                    </RichTextBox>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>





    <!--УПАКОВКА РАСПАКОВКА-->
    <Style TargetType="{x:Type RichTextBox}" x:Key="UpacovRichTextBox">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RichTextBox">
                    <RichTextBox HorizontalAlignment="Stretch" VerticalAlignment="Stretch" 
                                     Foreground="AliceBlue"
                                     Background="Transparent"
                                     FontSize="18"
                                     BorderThickness="0"
                                     IsReadOnly="True">
                        <FlowDocument>
                            <Section>
                                <!--написание РАСПАКОВКА-->
                                <Paragraph>
                                    <Span FontSize="35" FontWeight="Bold">
                                        <Span Foreground="#272537">
                                            ________________________
                                        </Span>
                                        РАСПАКОВКА
                                    </Span>
                                    <LineBreak/>
                                    <LineBreak/>

                                    <Span FontWeight="Bold">Распаковка</Span> (
                                    <Span FontWeight="Bold">unpacking</Span> , 
                                    также называемая
                                    <Span FontWeight="Bold">Деструктуризация</Span> ) представляет 
                                    разложение коллекции (кортежа, списка и т.д.) на отдельные значения. 
                                    Python поддерживает концепцию множественного присваивания.

                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="250" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] x, y = 1, 2
                                            <LineBreak/>
                                            [2] print(x) <Span Foreground="#272537">____</Span> # 1
                                            <LineBreak/>
                                            [3] print(y) <Span Foreground="#272537">____</Span> # 2
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    В данном случае присваивем значения сразу двум переменным. Присвоение идет по позиции: 
                                    переменная x получает значение 1, а переменная y - значени 2.
                                    <LineBreak/>
                                    Данный пример в действительности уже представляет деструктуризацию или распаковку.
                                    Значения 1, 2 фактически являются кортежом, поскольку именно запятые между значениями 
                                    говорят о том, что это кортеж.



                                    <LineBreak/>
                                    <LineBreak/>
                                    <LineBreak/>
                                    И мы также могли бы написать следующим образом.
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="250" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] x, y = (1, 2)
                                            <LineBreak/>
                                            [2] print(x) <Span Foreground="#272537">____</Span> # 1
                                            <LineBreak/>
                                            [3] print(y) <Span Foreground="#272537">____</Span> # 2
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    В любом случае мы имеем дело с деструктуризацией, когда первый элемент кортежа передается 
                                    первой переменной, второй элемент - второй переменной и так далее. То есть разложение 
                                    идет по позиции.
                                    <LineBreak/>
                                    <LineBreak/>
                                    <LineBreak/>


                                    Теперь можно разложить любой кортеж.
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="450" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] name, age, company = ("Tom", 38, "Google")
                                            <LineBreak/>
                                            [2] print(name) <Span Foreground="#272537">____</Span> # Tom
                                            <LineBreak/>
                                            [3] print(age) <Span Foreground="#272537">____</Span> # 38
                                            <LineBreak/>
                                            [4] print(company) <Span Foreground="#272537">____</Span> # Google
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <LineBreak/>


                                    Только кортежами мы не ограничены и можем "распаковывать" и другие коллекции, например, списки.
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="450" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] people = ["Tom", "Bob", "Sam"]
                                            <LineBreak/>
                                            [2] first, second, third = people
                                            <LineBreak/>
                                            [3] print(first) <Span Foreground="#272537">____</Span> # Tom
                                            <LineBreak/>
                                            [4] print(second) <Span Foreground="#272537">____</Span> # Bob
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <LineBreak/>



                                    А вот со словарями не много все сложнее - при разложении словаря переменные получают ключи словаря.
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="650" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] dictionary = {"red": "красный", "blue": "синий", "green": "зеленый"}
                                            <LineBreak/>
                                            [2] r, b, g = dictionary
                                            <LineBreak/>
                                            [3] print(r) <Span Foreground="#272537">____</Span> # red
                                            <LineBreak/>
                                            [4] print(b) <Span Foreground="#272537">____</Span> # blue
                                            <LineBreak/>
                                            [5] print(g) <Span Foreground="#272537">____</Span> # green
                                            <LineBreak/>
                                            [6] # получаем значение по ключу
                                            <LineBreak/>
                                            [7] print(dictionary[g]) <Span Foreground="#272537">____</Span> # зеленый
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <LineBreak/>
                                </Paragraph>
                            </Section>



                            <Section>
                                <!--написание ДЕСТРУКТУРИЗАЦИЯ В ЦИКЛАХ-->
                                <Paragraph>
                                    <Span FontSize="35" FontWeight="Bold">
                                        <Span Foreground="#272537">
                                            ______________
                                        </Span>
                                        ДЕСТРУКТУРИЗАЦИЯ В ЦИКЛАХ
                                    </Span>
                                    <LineBreak/>
                                    <LineBreak/>


                                    Циклы в Python позволяют разложить коллекции на отдельные составляющие.
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="450" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] people = [
                                            <LineBreak/>
                                            [2] <Span Foreground="#272537">____</Span> ("Tom", 38, "Google"),
                                            <LineBreak/>
                                            [3] <Span Foreground="#272537">____</Span> ("Bob", 42, "Microsoft"),
                                            <LineBreak/>
                                            [4] <Span Foreground="#272537">____</Span> ("Sam", 29, "JetBrains")
                                            <LineBreak/>
                                            [5] ]
                                            <LineBreak/>
                                            [6] 
                                            <LineBreak/>
                                            [7] for name, age, company in people:
                                            <LineBreak/>
                                            [8] <Span Foreground="#272537">____</Span> print(f"Name: {name}, Age: {age}, Company: {company}")
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    Здесь мы перебираем список кортежей people. Каждый кортеж состоит из трех элементов, соответственно при переборе мы можем их передать в переменные name, age и company.



                                    <LineBreak/>
                                    <LineBreak/>
                                    <LineBreak/>
                                    Другой пример - функция
                                    <Span FontWeight="Bold">enumerate()</Span> . Она принимает в качестве параметра коллекцию, создает для каждого элемента 
                                    кортеж и возвращает набор из подобных кортежей. Каждый кортеж содержит индекс, который увеличивается с каждой итерацией.
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="450" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] people = ["Tom", "Bob", "Sam"]
                                            <LineBreak/>
                                            [2] for index, name in enumerate(people):
                                            <LineBreak/>
                                            [3] <Span Foreground="#272537">____</Span> print(f"{index}.{name}")
                                            <LineBreak/>
                                            [4] 
                                            <LineBreak/>
                                            [5] # КОД ВЫВЕДЕТ:
                                            <LineBreak/>
                                            [6] 0.Tom
                                            <LineBreak/>
                                            [7] 1.Bob
                                            <LineBreak/>
                                            [8] 2.Sam
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <LineBreak/>
                                </Paragraph>
                            </Section>




                            <Section>
                                <!--написание ИГНОРИРОВАНИЕ ЗНАЧЕНИЙ-->
                                <Paragraph>
                                    <Span FontSize="35" FontWeight="Bold">
                                        <Span Foreground="#272537">
                                            _______________
                                        </Span>
                                        ИГНОРИРОВАНИЕ ЗНАЧЕНИЙ
                                    </Span>
                                    <LineBreak/>
                                    <LineBreak/>


                                    Если какой-то элемент коллекции не нужен, то обычно для него определяется переменная с именем _ (прочерк).
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="450" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] person =("Tom", 38, "Google")
                                            <LineBreak/>
                                            [2] name, _, company = person
                                            <LineBreak/>
                                            [3] print(name) <Span Foreground="#272537">____</Span> # Tom
                                            <LineBreak/>
                                            [4] print(company) <Span Foreground="#272537">____</Span> # Google
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>

                                </Paragraph>
                            </Section>



                            <Section>
                                <!--написание УПАКОВКА ЗНАЧЕНИЙ И ОПЕРАТОР *-->
                                <Paragraph>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="35" FontWeight="Bold">
                                        <Span Foreground="#272537">
                                            __________
                                        </Span>
                                        УПАКОВКА ЗНАЧЕНИЙ И ОПЕРАТОР: *
                                    </Span>
                                    <LineBreak/>
                                    <LineBreak/>


                                    Оператор * упаковывает значение в коллекцию.
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="450" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] num1=1
                                            <LineBreak/>
                                            [2] num2=2
                                            <LineBreak/>
                                            [3] num3=3
                                            <LineBreak/>
                                            [4] *numbers,=num1,num2,num3
                                            <LineBreak/>
                                            [5] print(numbers) <Span Foreground="#272537">____</Span> # [1, 2, 3]
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    Здесь мы упаковываем значения из кортежа (num1,num2,num3) в список numbers. 
                                    Причем, чтобы получить список, после numbers указывается запятая.


                                    <LineBreak/>
                                    <LineBreak/>
                                    <LineBreak/>
                                    Как правило, упаковка применяется для сбора значений, 
                                    которые остались после присвоения результатов деструктуризации.
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="450" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] head, *tail = [1, 2, 3, 4, 5]
                                            <LineBreak/>
                                            [2] 
                                            <LineBreak/>
                                            [3] print(head) <Span Foreground="#272537">____</Span> # 1
                                            <LineBreak/>
                                            [4] print(tail) <Span Foreground="#272537">____</Span> # [2, 3, 4, 5]
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    Здесь переменная head в соответствии с позицией получае первый элемент списка. 
                                    Все остальные элементы передаются в переменную tail. Таким образом, переменная 
                                    tail будет представлять список из оставшихся элементов.
                                    <LineBreak/>
                                    Tаким образом мы можем получать различные комбинации элементов коллекции. 
                                    Причем не только списков, но и кортежей, словарей и других коллекций.



                                    <LineBreak/>
                                    <LineBreak/>
                                    <LineBreak/>
                                    Другой пример - нам надо получить только первый, третий и последний элемент, 
                                    а остальные элементы нам не нужны. В общем случае мы должны предоставить 
                                    переменные для всех элементов коллекции. Однако если коллекция имеет 100 
                                    элементов, а нам нужно только три, не будем же мы определять все сто переменных.
                                    И в этом случае опять же можно применить упаковку.
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="450" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] first, _, third, *_, last = [1, 2, 3, 4, 5, 6, 7, 8]
                                            <LineBreak/>
                                            [2] 
                                            <LineBreak/>
                                            [3] print(first) <Span Foreground="#272537">____</Span> # 1
                                            <LineBreak/>
                                            [4] print(third) <Span Foreground="#272537">____</Span> # 3
                                            <LineBreak/>
                                            [5] print(last) <Span Foreground="#272537">____</Span> # 8
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <LineBreak/>



                                    Также можно получить ключи словаря
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="850" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] red, *other, green = {"red":"красный", "blue":"синий", "yellow":"желтый", "green":"зеленый"}
                                            <LineBreak/>
                                            [2] 
                                            <LineBreak/>
                                            [3] print(red) <Span Foreground="#272537">____</Span> # red
                                            <LineBreak/>
                                            [4] print(green) <Span Foreground="#272537">____</Span> # green
                                            <LineBreak/>
                                            [5] print(other) <Span Foreground="#272537">____</Span> # ['blue', 'yellow']
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                </Paragraph>
                            </Section>





                            <Section>
                                <!--написание РАСПАКОВКА И ОПЕРАТОРЫ * И **-->
                                <Paragraph>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="35" FontWeight="Bold">
                                        <Span Foreground="#272537">
                                            ___________
                                        </Span>
                                        РАСПАКОВКА И ОПЕРАТОРЫ: * И **
                                    </Span>
                                    <LineBreak/>
                                    <LineBreak/>


                                    Оператор * вместе с оператором ** также может применяться для распаковки значений. Оператор * используется для распаковки кортежей, списков,
                                    строк, множеств, а оператор ** - для распаковки словарей. Особенно это может быть полезно, когда на основе одних коллекций создаются другие.


                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример, распаковка кортежей и списков:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="550" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] nums1 = [1, 2, 3]
                                            <LineBreak/>
                                            [2] nums2 = (4, 5, 6)
                                            <LineBreak/>
                                            [3] 
                                            <LineBreak/>
                                            [4] # распаковываем список nums1 и кортеж nums2
                                            <LineBreak/>
                                            [5] nums3 = [*nums1, *nums2]
                                            <LineBreak/>
                                            [6] print(nums3) <Span Foreground="#272537">____</Span> # [1, 2, 3, 4, 5, 6]
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    Здесь распаковывем значения из списка nums1 и кортежа nums2 и помещаем их в список nums3.
                                    <LineBreak/>
                                    <LineBreak/>
                                    <LineBreak/>


                                    Подобным образом раскладываются словари, только применяется оператор **.
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="850" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] dictionary1 = {"red":"красный", "blue":"синий"}
                                            <LineBreak/>
                                            [2] dictionary2 = {"green":"зеленый", "yellow":"желтый"}
                                            <LineBreak/>
                                            [3] 
                                            <LineBreak/>
                                            [4] # распаковываем словари
                                            <LineBreak/>
                                            [5] dictionary3 = {**dictionary1, **dictionary2}
                                            <LineBreak/>
                                            [6] print(dictionary3)  # {'red': 'красный', 'blue': 'синий', 'green': 'зеленый', 'yellow': 'желтый'}
                                        </TextBlock>
                                    </Border>
                                </Paragraph>
                            </Section>
                        </FlowDocument>
                    </RichTextBox>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>






    <!--ФУНКЦИИ-->
    <Style TargetType="{x:Type RichTextBox}" x:Key="FuncRichTextBox">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RichTextBox">
                    <RichTextBox HorizontalAlignment="Stretch" VerticalAlignment="Stretch" 
                                     Foreground="AliceBlue"
                                     Background="Transparent"
                                     FontSize="18"
                                     BorderThickness="0"
                                     IsReadOnly="True">
                        <FlowDocument>
                            <Section>
                                <!--написание ФУНКЦИИ-->
                                <Paragraph>
                                    Функции представляют блок кода, который выполняет определенную задачу и который можно повторно использовать в других частях программы.
                                    В предыдущих статьях уже использовались функции. В частности, функция <Span FontWeight="Bold">print()</Span>, которая выводит некоторое значение на консоль.
                                    Python имеет множество встроенных функций и позволяет определять свои функции.

                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Синтаксис ФУНКЦИЙ:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Green" BorderThickness="2" Padding="5" Width="350" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] def имя_функции (параметры):
                                            <LineBreak/>
                                            [2] <Span Foreground="#272537">____</Span> инструкции
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    Определение функции начинается с выражения def, которое состоит из имени функции, набора скобок с параметрами и двоеточия. 
                                    Параметры в скобках необязательны. А со следующей строки идет блок инструкций, которые выполняет функция. Все инструкции 
                                    функции имеют отступы от начала строки.


                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="350" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] def say_hello():
                                            <LineBreak/>
                                            [2] <Span Foreground="#272537">____</Span> print("Hello")
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    Функция называется say_hello. Она не имеет параметров и содержит одну единственную инструкцию, которая выводит на консоль строку "Hello".
                                    <LineBreak/>
                                    <LineBreak/>
                                    <LineBreak/>
                                    
                                    
                                    
                                    Для вызова функции указывается имя функции, после которого в скобках идет передача значений для всех ее параметров.
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Синтаксис ВЫЗОВА:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Green" BorderThickness="2" Padding="5" Width="250" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] def say_hello():
                                        </TextBlock>
                                    </Border>
                                    
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="550" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] def say_hello(): <Span Foreground="#272537">____</Span> # определение функции say_hello
                                            <LineBreak/>
                                            [2] <Span Foreground="#272537">____</Span> print("Hello")
                                            <LineBreak/>
                                            [3] 
                                            <LineBreak/>
                                            [4] 
                                            <LineBreak/>
                                            [5] say_hello() <Span Foreground="#272537">____</Span> # вызов функции say_hello
                                            <LineBreak/>
                                            [6] say_hello()
                                            <LineBreak/>
                                            [7] say_hello()
                                            <LineBreak/>
                                            
                                            <LineBreak/>
                                            КОД ВЫВЕДЕТ:
                                            <LineBreak/>
                                            Hello
                                            <LineBreak/>
                                            Hello
                                            <LineBreak/>
                                            Hello
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    Здесь три раза подряд вызывается функция say_hello. В итоге мы получаем такой вывод. Обратите внимание, что функция сначала определяется, а потом вызывается.

                                    <LineBreak/>
                                    <LineBreak/>
                                    <LineBreak/>
                                    Если функция имеет одну инструкцию, то ее можно разместить на одной строке с остальным определением функции.
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="350" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] def say_hello(): print("Hello")
                                            <LineBreak/>
                                            [2]
                                            <LineBreak/>
                                            [3] say_hello()
                                        </TextBlock>
                                    </Border>
                                </Paragraph>



                                <!--написание ЛОКАЛЬНЫЕ ФУНКЦИИ-->
                                <Paragraph>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="35" FontWeight="Bold">
                                        <Span Foreground="#272537">
                                            ___________________
                                        </Span>
                                        ЛОКАЛЬНЫЕ ФУНКЦИИ
                                    </Span>
                                    <LineBreak/>
                                    <LineBreak/>

                                    Одни функции могут определяться внутри других функций - внутренние функции еще называют локальными. Локальные функции можно использовать 
                                    только внутри той функции, в которой они определены.
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="750" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] def print_messages():
                                            <LineBreak/>
                                            [2] <Span Foreground="#272537">____</Span> # определение локальных функций
                                            <LineBreak/>
                                            [3] <Span Foreground="#272537">____</Span> def say_hello(): print("Hello")
                                            <LineBreak/>
                                            [4] <Span Foreground="#272537">____</Span> def say_goodbye(): print("Good Bye")
                                            <LineBreak/>
                                            [5] <Span Foreground="#272537">____</Span> # вызов локальных функций
                                            <LineBreak/>
                                            [6] <Span Foreground="#272537">____</Span> say_hello()
                                            <LineBreak/>
                                            [7] <Span Foreground="#272537">____</Span> say_goodbye()
                                            <LineBreak/>
                                            [8]
                                            <LineBreak/>
                                            [9] # Вызов функции print_messages
                                            <LineBreak/>
                                            [10] print_messages()
                                            <LineBreak/>
                                            [11]
                                            <LineBreak/>
                                            [12] # say_hello() # вне функции print_messages функция say_hello не доступна
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    Здесь функции say_hello() и say_goodbye() определены внутри функции print_messages() и поэтому по отношению к ней являются локальными.
                                    Соответственно они могут использоваться только внутри функции print_messages().
                                </Paragraph>




                                <!--написание ОРГАНИЗАЦИЯ ПРОГРАММЫ И ФУНКЦИЯ MAIN-->
                                <Paragraph>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="35" FontWeight="Bold">
                                        <Span Foreground="#272537">
                                            ____
                                        </Span>
                                        ОРГАНИЗАЦИЯ ПРОГРАММЫ И ФУНКЦИЯ MAIN
                                    </Span>
                                    <LineBreak/>
                                    <LineBreak/>
                                    В программе может быть определено множество функций. И чтобы всех их упорядочить, одним из способов их организации 
                                    является добавление специальной функции (обычно называется main), в которой потом уже вызываются другие функции.


                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="550" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] def main():
                                            <LineBreak/>
                                            [2] <Span Foreground="#272537">____</Span> say_hello()
                                            <LineBreak/>
                                            [3] <Span Foreground="#272537">____</Span> arifm_set()
                                            <LineBreak/>
                                            [4] <Span Foreground="#272537">____</Span> say_goodbye()
                                            <LineBreak/>
                                            [5] 
                                            <LineBreak/>
                                            [6] def say_hello():
                                            <LineBreak/>
                                            [7] <Span Foreground="#272537">____</Span> print("Hello")
                                            <LineBreak/>
                                            [8] 
                                            <LineBreak/>
                                            [9] def say_goodbye():
                                            <LineBreak/>
                                            [10] <Span Foreground="#272537">____</Span> print("Good Bye")
                                            <LineBreak/>
                                            [11] 
                                            <LineBreak/>
                                            [12] def arifm_set():
                                            <LineBreak/>
                                            [14] <Span Foreground="#272537">____</Span> print(4+4)
                                            <LineBreak/>
                                            [15] 
                                            <LineBreak/>
                                            [16] # Вызов функции main
                                            <LineBreak/>
                                            [17] main()
                                            <LineBreak/>
                                            <LineBreak/>
                                            КОД ВЫВЕДЕТ:
                                            <LineBreak/>
                                            Hello
                                            <LineBreak/>
                                            8
                                            <LineBreak/>
                                            Good Bye
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    В функции
                                    <Span FontWeight="Bold">main</Span> можно делать любой порядок срабатывания функций, вне зависимости от того, в каком порядке, эти рабочие 
                                    функции были написаны. На примере видно что функция
                                    <Span FontWeight="Bold">arifm_set()</Span> написана последняя, но в
                                    <Span FontWeight="Bold">main</Span>
                                    она объявляется второй и сработает она так же второй.
                                </Paragraph>
                            </Section>
                        </FlowDocument>
                    </RichTextBox>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>




    <!--ПАРАМЕТРЫ ФУНКЦИИ-->
    <Style TargetType="{x:Type RichTextBox}" x:Key="FuncParamRichTextBox">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RichTextBox">
                    <RichTextBox HorizontalAlignment="Stretch" VerticalAlignment="Stretch" 
                                     Foreground="AliceBlue"
                                     Background="Transparent"
                                     FontSize="18"
                                     BorderThickness="0"
                                     IsReadOnly="True">
                        <FlowDocument>
                            <Section>
                                <!--написание ФУНКЦИИ-->
                                <Paragraph>
                                    Функция может принимать параметры. Через параметры в функцию можно передавать данные. Банальный пример - 
                                    функция print(), которая с помощью параметра принимает значение, выводимое на консоль.

                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="350" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] def say_hello(name):
                                            <LineBreak/>
                                            [2] <Span Foreground="#272537">____</Span> print(f"Hello, {name}")
                                            <LineBreak/>
                                            [3] 
                                            <LineBreak/>
                                            [4] say_hello("Tom")
                                            <LineBreak/>
                                            [5] say_hello("Bob")
                                            <LineBreak/>
                                            <LineBreak/>
                                            КОД ВЫВЕДЕТ:
                                            <LineBreak/>
                                            Hello, Tom
                                            <LineBreak/>
                                            Hello, Bob
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    Функция <Span FontWeight="Bold">say_hello</Span>  имеет параметр name, и при вызове функции мы можем передать этому параметру какой-либо значение. Внутри 
                                    функции мы можем использовать параметр как обычную переменную, например, вывести значение этого параметра на консоль
                                    функцией print. Так, в выражении - <Span FontWeight="Bold">say_hello("Tom")</Span>, строка "Tom" будет передаваться параметру name. В итоге при выполнении программы мы получаем такой консольный вывод.


                                    <LineBreak/>
                                    <LineBreak/>
                                    <LineBreak/>
                                    При вызове функции значения передаются параметрам по позиции. Например, определим и вызовем функцию
                                    с несколькими параметрами.
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="350" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] def print_person(name, age):
                                            <LineBreak/>
                                            [2] <Span Foreground="#272537">____</Span> print(f"Name: {name}")
                                            <LineBreak/>
                                            [3] <Span Foreground="#272537">____</Span> print(f"Age: {age}")
                                            <LineBreak/>
                                            [4] 
                                            <LineBreak/>
                                            [5] print_person("Tom", 37)
                                            <LineBreak/>
                                            <LineBreak/>
                                            КОД ВЫВЕДЕТ:
                                            <LineBreak/>
                                            Name: Tom
                                            <LineBreak/>
                                            Age: 37
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                </Paragraph>




                                <!--написание ЗНАЧЕНИЯ ПО УМОЛЧАНИЮ-->
                                <Paragraph>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="35" FontWeight="Bold">
                                        <Span Foreground="#272537">
                                            ________________
                                        </Span>
                                        ЗНАЧЕНИЯ ПО УМОЛЧАНИЮ
                                    </Span>
                                    <LineBreak/>
                                    <LineBreak/>
                                    Некоторые параметры функции мы можем сделать необязательными, указав для них значения по умолчанию при определении функции.
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="650" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] def say_hello(name="Tom"):
                                            <LineBreak/>
                                            [2] <Span Foreground="#272537">____</Span> print(f"Hello, {name}")
                                            <LineBreak/>
                                            [3] 
                                            <LineBreak/>
                                            [4] say_hello() <Span Foreground="#272537">____</Span> # здесь параметр name будет иметь значение "Tom"
                                            <LineBreak/>
                                            [5] say_hello("Bob") <Span Foreground="#272537">____</Span> # здесь name = "Bob"
                                            <LineBreak/>
                                            <LineBreak/>
                                            КОД ВЫВЕДЕТ:
                                            <LineBreak/>
                                            Hello, Tom
                                            <LineBreak/>
                                            Hello, Bob
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    Здесь параметр name является необязательным. И если мы не передаем при вызове функции для него значение,
                                    то применяется значение по умолчанию, то есть строка "Tom".
                                    <LineBreak/>
                                    <LineBreak/>
                                    <LineBreak/>


                                    
                                    Если функция имеет несколько параметров, то необязательные параметры должны идти после обязательных.
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="650" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] def print_person(name, age = 18):
                                            <LineBreak/>
                                            [2] <Span Foreground="#272537">____</Span> print(f"Name: {name}  Age: {age}")
                                            <LineBreak/>
                                            [3] 
                                            <LineBreak/>
                                            [4] print_person("Bob")
                                            <LineBreak/>
                                            [5] print_person("Tom", 37)
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    Здесь параметр age является необязательным и по умолчанию имеет значение 18. Перед ним расположен обязательный параметр name. Поэтому при 
                                    вызове функции мы можем не передавать значение параметру age, но параметру name передать значение необходимо.
                                    <LineBreak/>
                                    При необходимости мы можем сделать все параметры необязательными.
                                </Paragraph>




                                <!--написание ФУНКЦИИ-->
                                <Paragraph>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="35" FontWeight="Bold">
                                        <Span Foreground="#272537">
                                            ________
                                        </Span>
                                        Передача значений параметрам по имени.
                                        
                                        <Span Foreground="#272537">
                                            _________________
                                        </Span>
                                        Именованные параметры
                                    </Span>
                                    <LineBreak/>
                                    <LineBreak/>
                                    
                                    
                                    В примерах выше при вызове функции значения передаются параметрами функции по позиции. Но также можно передавать значения параметрам по имени.
                                    Для этого при вызове функции указывается имя параметра и ему присваивается значение.
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="650" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] def print_person(name, age):
                                            <LineBreak/>
                                            [2] <Span Foreground="#272537">____</Span> print(f"Name: {name}  Age: {age}")
                                            <LineBreak/>
                                            [3] 
                                            <LineBreak/>
                                            [4] print_person(age = 22, name = "Tom")
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    В данном случае значения параметрам age и name передаются по имени. И несмотря на то, что параметр name идет первым в определении функции, мы можем при вызове
                                    функции написать print_person(age = 22, name = "Tom") и таким образом передать число 22 параметру age, а строку "Tom" параметру name.

                                    <LineBreak/>
                                    <LineBreak/>
                                    <LineBreak/>
                                    Символ * позволяет установить, какие параметры будут именнованными - то есть такие параметры, которым можно передать значения только по имени. 
                                    Все параметры, которые располагаются справа от символа *, получают значения <Span FontWeight="Bold">только по имени.</Span>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="850" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] def print_person(name, *,  age, company):
                                            <LineBreak/>
                                            [2] <Span Foreground="#272537">____</Span> print(f"Name: {name}  Age: {age}  Company: {company}")
                                            <LineBreak/>
                                            [3] 
                                            <LineBreak/>
                                            [4] print_person("Bob", age = 41, company ="Microsoft") <Span Foreground="#272537">____</Span> # Name: Bob  Age: 41  company: Microsoft
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    В данном случае параметры age и company являются именнованными. Так же можно сделать все параметры именнованными, поставив перед списком параметров символ *.
                                    
                                    <LineBreak/>
                                    <LineBreak/>
                                    <LineBreak/>
                                    Если наоборот надо определить параметры, которым можно передавать значения только
                                    по позиции, то есть позиционные параметры, то можно использовать символ /: все 
                                    параметры, которые идут до символа / , являются позиционными и могут получать значения только по позиции.
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="850" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] def print_person(name, /, age, company="Microsoft"):
                                            <LineBreak/>
                                            [2] <Span Foreground="#272537">____</Span> print(f"Name: {name}  Age: {age}  Company: {company}")
                                            <LineBreak/>
                                            [3] 
                                            <LineBreak/>
                                            [4] print_person("Tom", company="JetBrains", age = 24) <Span Foreground="#272537">____</Span> # Name: Tom  Age: 24  company: JetBrains
                                            <LineBreak/>
                                            [5] print_person("Bob", 41) <Span Foreground="#272537">____</Span> # Name: Bob  Age: 41  company: Microsoft
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    В данном случае параметр name является позиционным.

                                    <LineBreak/>
                                    <LineBreak/>
                                    <LineBreak/>
                                    Для одной функции можно определять одновременно позиционные и именнованные параметры.
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="850" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] def print_person(name, /,  age = 18, *, company):
                                            <LineBreak/>
                                            [2] <Span Foreground="#272537">____</Span> print(f"Name: {name}  Age: {age}  Company: {company}")
                                            <LineBreak/>
                                            [3] 
                                            <LineBreak/>
                                            [4] print_person("Sam", company ="Google") <Span Foreground="#272537">____</Span> # Name: Sam  Age: 18  company: Google
                                            <LineBreak/>
                                            [5] print_person("Tom", 37, company ="JetBrains") <Span Foreground="#272537">____</Span> # Name: Tom  Age: 37  company: JetBrains
                                            <LineBreak/>
                                            [6] print_person("Bob", company ="Microsoft", age = 42) <Span Foreground="#272537">____</Span> # Name: Bob  Age: 42  company: Microsoft
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    В данном случае параметр name располагается слева от символа /, поэтому является
                                    позиционным и обязательным - ему можно можно передать значение только по позиции.
                                    <LineBreak/>
                                    Параметр company является именнованным, так как располагается справа от символа *. Параметр age 
                                    может получать значение по имени и по позиции.
                                </Paragraph>




                                <!--написание НЕОПРЕДЕЛЕННОЕ КОЛИЧЕСТВО ПАРАМЕТРОВ-->
                                <Paragraph>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="35" FontWeight="Bold">
                                        <Span Foreground="#272537">
                                            ____
                                        </Span>
                                        НЕОПРЕДЕЛЕННОЕ КОЛИЧЕСТВО ПАРАМЕТРОВ
                                    </Span>
                                    <LineBreak/>
                                    <LineBreak/>
                                    С помощью символа звездочки можно определить параметр, через который можно 
                                    передавать неопределенное количество значений. Это может быть полезно, когда мы 
                                    хотим, чтобы функция получала несколько значений, но мы точно не знаем, сколько 
                                    именно. Определим функцию подсчета суммы чисел.

                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="350" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] def sum(*numbers):
                                            <LineBreak/>
                                            [2] <Span Foreground="#272537">____</Span> result = 0
                                            <LineBreak/>
                                            [3] <Span Foreground="#272537">____</Span> for n in numbers:
                                            <LineBreak/>
                                            [4] <Span Foreground="#272537">________</Span> result += n
                                            <LineBreak/>
                                            [5] <Span Foreground="#272537">____</Span> print(f"sum = {result}")
                                            <LineBreak/>
                                            [6] 
                                            <LineBreak/>
                                            [7] sum(1, 2, 3, 4, 5) <Span Foreground="#272537">____</Span> # sum = 15
                                            <LineBreak/>
                                            [8] sum(3, 4, 5, 6) <Span Foreground="#272537">____</Span> # sum = 18
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    В данном случае функция sum принимает один параметр - *numbers, но звездочка 
                                    перед названием параметра указывает, что фактически на место этого параметра мы 
                                    можем передать неопределенное количество значений или набор значений. В самой
                                    функции с помощью цикла for можно пройтись по этому набору, получить каждое 
                                    значение из этого набора в переменную n и произвести с ним какие-нибудь действия. 
                                    Например, в данном случае вычисляется сумма переданных чисел.
                                </Paragraph>
                            </Section>
                        </FlowDocument>
                    </RichTextBox>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
</ResourceDictionary>