<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">


    <!--КОНЦЕПЦИЯ ООП-->
    <Style TargetType="{x:Type RichTextBox}" x:Key="Conception_OOP_RichTextBox">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RichTextBox">
                    <RichTextBox HorizontalAlignment="Stretch" VerticalAlignment="Stretch" 
                                 Foreground="AliceBlue"
                                 Background="Transparent"
                                 FontSize="18"
                                 BorderThickness="0"
                                 IsReadOnly="True">
                        <FlowDocument>
                            <!--написание -->
                            <Section>
                                <Paragraph>
                                    В Python объектно-ориентированное программирование (OOP) - это парадигма программирования, которая использует объекты и классы в программировании. Она направлена на реализацию объектов реального мира, таких как наследование, полиморфизмы, инкапсуляция и т.д. В программировании. Основная концепция OOP заключается в объединении данных и функций, которые работают с ними, в единое целое, чтобы никакая другая часть кода не могла получить доступ к этим данным.
                                </Paragraph>

                                <!--написание Концепции OOP на Python-->
                                <Paragraph>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="35" FontWeight="Bold">
                                        <Span Foreground="Transparent">
                                            ______________
                                        </Span>
                                        КОНЦЕПЦИИ OOP НА PYTHON
                                    </Span>
                                   
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Yellow" BorderThickness="2" Padding="5" Width="350" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            ● Класс
                                            <LineBreak/>
                                            ● Объекты
                                            <LineBreak/>
                                            ● Полиморфизм
                                            <LineBreak/>
                                            ● Инкапсуляция
                                            <LineBreak/>
                                            ● Наследование
                                            <LineBreak/>
                                            ● Абстракция данных
                                        </TextBlock>
                                    </Border>
                                </Paragraph>


                                <!--написание Класс Python-->
                                <Paragraph>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="35" FontWeight="Bold">
                                        <Span Foreground="Transparent">
                                            _______________________
                                        </Span>
                                        КЛАСС PYTHON
                                    </Span>

                                    <LineBreak/>
                                    <LineBreak/>
                                    Класс - это коллекция объектов. Класс содержит схемы или прототип, на основе которых создаются объекты. Это логическая сущность, которая содержит некоторые атрибуты и методы.
                                    <LineBreak/>
                                    <LineBreak/>
                                    Чтобы понять необходимость создания класса, давайте рассмотрим пример, допустим, вы хотели отслеживать количество собак, которые могут иметь разные атрибуты, такие как порода и возраст. Если используется список, то первым элементом может быть порода собаки, а второй элемент может представлять ее возраст. Предположим, что существует 100 разных собак, тогда как бы вы узнали, какой элемент должен быть каким? Что, если бы вы захотели добавить другие свойства к этим dogs? Здесь не хватает организации, и это как раз то, что нужно для классов.


                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Некоторые моменты о классе Python:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Yellow" BorderThickness="2" Padding="5" Width="700" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            ● Классы создаются с помощью ключевого слова class
                                            <LineBreak/>
                                            ● Атрибуты - это переменные, которые принадлежат классу
                                            <LineBreak/>
                                            ● Атрибуты всегда являются общедоступными и к ним можно <LineBreak/>
                                            <Span Foreground="Transparent">_</Span> получить доступ с помощью оператора Точка(.). Например: Myclass.Myattribute
                                        </TextBlock>
                                    </Border>


                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Синтаксис определения класса:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Green" BorderThickness="2" Padding="5" Width="700" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] class ClassName:
                                            <LineBreak/>
                                            [2] <Span Foreground="Transparent">____</Span>Метод-1
                                            <LineBreak/>
                                            [3] <Span Foreground="Transparent">____</Span>
                                            <LineBreak/>
                                            [4] <Span Foreground="Transparent">____</Span>Метод-2
                                            <LineBreak/>
                                            [5] <Span Foreground="Transparent">____</Span>
                                            <LineBreak/>
                                            [6] <Span Foreground="Transparent">____</Span>Метод-N
                                        </TextBlock>
                                    </Border>


                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Создание пустого класса в Python:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="300" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] class Dog:
                                            <LineBreak/>
                                            [2] <Span Foreground="Transparent">____</Span>pass
                                        </TextBlock>
                                    </Border>
                                </Paragraph>


                                <!--написание Объекты Python-->
                                <Paragraph>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="35" FontWeight="Bold">
                                        <Span Foreground="Transparent">
                                            _____________________
                                        </Span>
                                        ОБЪЕКТЫ PYTHON
                                    </Span>
                                    <LineBreak/>
                                    <LineBreak/>
                                    Объект - это сущность, с которой связаны состояние и поведение. Это может быть любой объект реального мира, такой как мышь, клавиатура, стул, стол, ручка и т.д. Целые числа, строки, числа с плавающей запятой, даже массивы и словари - все это объекты. Более конкретно, любое целое число или любая отдельная строка является объектом. Число 12 - это объект, строка “Привет, мир” - это объект, список - это объект, который может содержать другие объекты и так далее. Вы все время использовали объекты и, возможно, даже не осознаете этого.

                                    <LineBreak/>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontWeight="Bold" FontSize="25">Объект состоит из:</Span> 
                                    <LineBreak/>
                                    <Span Foreground="Transparent">____</Span> ● Состояние: оно представлено атрибутами объекта. Оно также отражает свойства объекта.
                                    <LineBreak/>
                                    <Span Foreground="Transparent">____</Span> ● Поведение: оно представлено методами объекта. Оно также отражает реакцию объекта на другие объекты.
                                    <LineBreak/>
                                    <Span Foreground="Transparent">____</Span> ● Идентификатор: присваивает объекту уникальное имя и позволяет одному объекту взаимодействовать с
                                    <LineBreak/>
                                    <Span Foreground="Transparent">______</Span> другими объектами.
                                    <LineBreak/>
                                    <LineBreak/>

                                    Чтобы понять состояние, поведение и идентичность, давайте возьмем пример класса dog (объяснено выше).
                                    <LineBreak/>
                                    <Span Foreground="Transparent">____</Span> ● Идентификатор можно рассматривать как имя собаки.
                                    <LineBreak/>
                                    <Span Foreground="Transparent">____</Span> ● Состояние или атрибуты могут рассматриваться как порода, возраст или окрас собаки.
                                    <LineBreak/>
                                    <Span Foreground="Transparent">____</Span> ● Поведение можно рассматривать в зависимости от того, ест собака или спит.

                                    <LineBreak/>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontWeight="Bold" FontSize="25">Создание объекта:</Span>
                                    <LineBreak/>
                                    Это создаст объект с именем obj класса Dog, определенного выше. Прежде чем углубляться в объекты и классы, давайте разберемся с некоторыми основными ключевыми словами, которые мы будем использовать при работе с объектами и классами.

                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="200" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] obj = Dog()
                                        </TextBlock>
                                    </Border>


                                    <LineBreak/>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontWeight="Bold" FontSize="25">self - Python:</Span>
                                    <LineBreak/>
                                    1. Методы класса должны иметь дополнительный первый параметр в определении метода. Мы не указываем значение для этого параметра при вызове метода, его предоставляет Python
                                    <LineBreak/>
                                    2. Если у нас есть метод, который не принимает аргументов, то у нас все равно должен быть один аргумент.
                                    <LineBreak/>
                                    <LineBreak/>
                                    Когда мы вызываем метод этого объекта как myobject.method(arg1, arg2), он автоматически преобразуется Python в MyClass.method(myobject, arg1, arg2) – в этом вся особенность self.


                                    <LineBreak/>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontWeight="Bold" FontSize="25">Метод Python __init__ :</Span>
                                    <LineBreak/>

                                    Метод __init__ похож на конструкторы в C ++ и Java. Он запускается, как только создается экземпляр объекта класса. Этот метод полезен для выполнения любой инициализации, которую вы хотите выполнить с вашим объектом. Теперь давайте определим класс и создадим некоторые объекты, используя self и __init__ метод.


                                    <LineBreak/>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontWeight="Bold" FontSize="25">Создание класса и объекта с атрибутами класса и экземпляра:</Span>
                                    <LineBreak/>


                                    
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="560" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] class Dog:<LineBreak/>
                                            [2] <LineBreak/>
	                                        [3]<Span Foreground="Transparent">____</Span># атрибут класса<LineBreak/>
	                                        [4]<Span Foreground="Transparent">____</Span>attr1 = "mammal"<LineBreak/>
                                            [5] <LineBreak/>
	                                        [6]<Span Foreground="Transparent">____</Span># атрибуты экземпляра<LineBreak/>
	                                        [7]<Span Foreground="Transparent">____</Span>def __init__(self, name):<LineBreak/>
		                                    [8]<Span Foreground="Transparent">________</Span>self.name = name<LineBreak/>
                                            [9] <LineBreak/>
                                            [10] <LineBreak/>
                                            [11] # инициализация объектов<LineBreak/>
                                            [12] Rodger = Dog("Rodger")<LineBreak/>
                                            [13] Tommy = Dog("Tommy")<LineBreak/>
                                            [14] <LineBreak/>
                                            [15] # Доступ к атрибутам класса<LineBreak/>
                                            [16] print(f"Rodger is a {Rodger.__class__.attr1}")<LineBreak/>
                                            [17] print(f"Tommy is also a {Tommy.__class__.attr1}")<LineBreak/>
                                            [18] <LineBreak/>
                                            [19] # Доступ к атрибутам экземпляра<LineBreak/>
                                            [20] print(f"My name is {Rodger.name}")<LineBreak/>
                                            [21] print(f"My name is {Tommy.name}")<LineBreak/>
                                            
                                            <LineBreak/><LineBreak/><LineBreak/>
                                            КОД ВЫВЕДЕТ:
                                            <LineBreak/>
                                            Rodger is a mammal<LineBreak/>
                                            Tommy is also a mammal<LineBreak/>
                                            My name is Rodger<LineBreak/>
                                            My name is Tommy<LineBreak/>
                                        </TextBlock>
                                    </Border>



                                    <LineBreak/>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontWeight="Bold" FontSize="25">Создание классов и объектов с помощью методов:</Span>
                                    <LineBreak/>
                                    <LineBreak/>

                                    <Span FontWeight="Bold">Здесь класс Dog определяется с двумя атрибутами:</Span> 
                                    <LineBreak/>
                                    ● attr1 - это атрибут класса, которому присвоено значение “млекопитающее”. Атрибуты класса являются общими для всех экземпляров класса.
                                    <LineBreak/>
                                    ● __init__ - это специальный метод (конструктор), который инициализирует экземпляр класса Dog. Он принимает два параметра: self (относящийся к создаваемому экземпляру) и name (представляющий имя собаки). Параметр name используется для присвоения атрибута name каждому экземпляру Dog.
                                    <LineBreak/>
                                    ● Метод speak определен в классе Dog. Этот метод выводит строку, которая включает имя экземпляра dog.
                                    <LineBreak/>
                                    <LineBreak/>
                                    Код начинается с создания двух экземпляров класса Dog: Rodger и Tommy. Для каждого экземпляра вызывается метод __init__ для инициализации их атрибутов name указанными именами. Метод speak вызывается в обоих экземплярах (Rodger.speak() и Tommy.speak()), в результате чего каждая собака печатает инструкцию со своим именем.

                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="560" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] class Dog:<LineBreak/>
                                            [2] <LineBreak/>
	                                        [3]<Span Foreground="Transparent">____</Span># атрибут класса<LineBreak/>
	                                        [4]<Span Foreground="Transparent">____</Span>attr1 = "mammal"<LineBreak/>
                                            [5] <LineBreak/>
	                                        [6]<Span Foreground="Transparent">____</Span># атрибуты экземпляра<LineBreak/>
	                                        [7]<Span Foreground="Transparent">____</Span>def __init__(self, name):<LineBreak/>
		                                    [8]<Span Foreground="Transparent">________</Span>self.name = name<LineBreak/>
                                            [9]<LineBreak/>
                                            [10]<Span Foreground="Transparent">____</Span>def speak(self):<LineBreak/>
                                            [11]<Span Foreground="Transparent">________</Span>print(f"My name is {self.name}")<LineBreak/>
                                            [12] <LineBreak/>
                                            [13] # инициализация объектов<LineBreak/>
                                            [14] Rodger = Dog("Rodger")<LineBreak/>
                                            [15] Tommy = Dog("Tommy")<LineBreak/>
                                            [16] <LineBreak/>
                                            [17] Rodger.speak()<LineBreak/>
                                            [18] Tommy.speak()
                                            
                                            <LineBreak/><LineBreak/><LineBreak/>
                                            КОД ВЫВЕДЕТ:
                                            <LineBreak/>
                                            My name is Rodger<LineBreak/>
                                            My name is Tommy<LineBreak/>
                                        </TextBlock>
                                    </Border>
                                </Paragraph>


                                <!--написание Наследование Python-->
                                <Paragraph>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="35" FontWeight="Bold">
                                        <Span Foreground="Transparent">
                                            __________________
                                        </Span>
                                        НАСЛЕДОВАНИЕ PYTHON
                                    </Span>
                                    <LineBreak/>
                                    <LineBreak/>

                                    Наследование - это способность одного класса извлекать или наследовать свойства из другого класса. Класс, который получает свойства, называется производным классом или дочерним классом, а класс, из которого выводятся свойства, называется базовым классом или родительским классом. Преимущества наследования заключаются в:
                                    <LineBreak/>
                                    ● Он хорошо отражает отношения в реальном мире.
                                    <LineBreak/>
                                    ● Он обеспечивает возможность повторного использования кода. Нам не нужно писать один и тот же код снова и снова. Кроме того, он позволяет нам добавлять дополнительные функции в класс, не изменяя его.
                                    <LineBreak/>
                                    ● Он транзитивен по своей природе, что означает, что если класс B наследуется от другого класса A, то все подклассы B автоматически наследуются от класса A.
                                    <LineBreak/>
                                    <LineBreak/>

                                    <Span FontWeight="Bold">Типы наследования</Span>
                                    <LineBreak/>
                                    ● Одиночное наследование: одноуровневое наследование позволяет производному классу наследовать характеристики от класса с одним родителем.
                                    <LineBreak/>
                                    ● Многоуровневое наследование: многоуровневое наследование позволяет производному классу наследовать свойства от непосредственного родительского класса, который, в свою очередь, наследует свойства от своего родительского класса.
                                    <LineBreak/>
                                    ● Иерархическое наследование: наследование на иерархическом уровне позволяет нескольким производным классам наследовать свойства от родительского класса.
                                    <LineBreak/>
                                    ● Множественное наследование: многоуровневое наследование позволяет одному производному классу наследовать свойства более чем от одного базового класса.

                                    
                                    <LineBreak/>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontWeight="Bold" FontSize="25">Наследование в Python:</Span>
                                    <LineBreak/>
                                    <LineBreak/>
                                    В приведенной выше статье мы создали два класса, т. е. Person (родительский класс) и Employee (дочерний класс). Класс Employee наследуется от класса Person. Мы можем использовать методы класса person через класс employee, как показано в функции отображения в приведенном выше коде. Дочерний класс также может изменять поведение родительского класса, как показано с помощью метода details().

                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="560" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] class Person(object):<LineBreak/>
                                            [2]<Span Foreground="Transparent">____</Span><LineBreak/>
                                            [3]<Span Foreground="Transparent">____</Span>        # конструктор<LineBreak/>
                                            [4]<Span Foreground="Transparent">____</Span>        def __init__(self, name, idnumber):<LineBreak/>
                                            [5]<Span Foreground="Transparent">________</Span>            self.name = name<LineBreak/>
                                            [6]<Span Foreground="Transparent">________</Span>            self.idnumber = idnumber<LineBreak/>
                                            [7]<LineBreak/>
                                            [8]<Span Foreground="Transparent">____</Span>        def display(self):<LineBreak/>
                                            [9]<Span Foreground="Transparent">________</Span>            print(self.name)<LineBreak/>
                                            [10]<Span Foreground="Transparent">________</Span>            print(self.idnumber)<LineBreak/>
                                            [11]<LineBreak/>
                                            [12]<Span Foreground="Transparent">____</Span>        def details(self):<LineBreak/>
                                            [13]<Span Foreground="Transparent">________</Span>            print(f"My name is {self.name}")<LineBreak/>
                                            [14]<Span Foreground="Transparent">________</Span>            print(f"IdNumber: {self.idnumber}")<LineBreak/>
                                            [15]<LineBreak/>
                                            [16]<Span Foreground="Transparent">____</Span>    # дочерний class<LineBreak/>
                                            [17]class Employee(Person):<LineBreak/>
                                            [18]<Span Foreground="Transparent">____</Span>        def __init__(self, name, idnumber, salary, post):<LineBreak/>
                                            [19]<Span Foreground="Transparent">________</Span>            self.salary = salary<LineBreak/>
                                            [20]<Span Foreground="Transparent">________</Span>            self.post = post<LineBreak/>
                                            [21]<LineBreak/>
                                            [22]<Span Foreground="Transparent">________</Span>            # вызов __init__ родительского class<LineBreak/>
                                            [23]<Span Foreground="Transparent">________</Span>            Person.__init__(self, name, idnumber)<LineBreak/>
                                            [24]<LineBreak/>
                                            [25]<Span Foreground="Transparent">____</Span>        def details(self):<LineBreak/>
                                            [26]<Span Foreground="Transparent">________</Span>            print(f"My name is {self.name}")<LineBreak/>
                                            [27]<Span Foreground="Transparent">________</Span>            print(f"IdNumber: {self.idnumber}")<LineBreak/>
                                            [28]<Span Foreground="Transparent">________</Span>            print(f"Post: {self.post}")<LineBreak/>
                                            [29]<LineBreak/>
                                            [30]<LineBreak/>
                                            [31] # создание объектной переменной или экземпляра<LineBreak/>
                                            [32] a = Employee('Alex', 2145235, 200000, "Стажер")<LineBreak/>
                                            [33]<LineBreak/>
                                            [34] # вызов функции класса Person с помощью<LineBreak/>
                                            [35] # этих решений<LineBreak/>
                                            [36] a.display()<LineBreak/>
                                            [37] a.details()<LineBreak/>
                                        </TextBlock>
                                    </Border>
                                </Paragraph>


                                <!--написание Полиморфизм Python-->
                                <Paragraph>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="35" FontWeight="Bold">
                                        <Span Foreground="Transparent">
                                            _________________
                                        </Span>
                                        ПОЛИМОРФИЗМ PYTHON
                                    </Span>
                                    <LineBreak/>
                                    <LineBreak/>
                                    Полиморфизм просто означает наличие множества форм. Например, нам нужно определить, летают ли данные виды птиц или нет, используя полиморфизм, мы можем сделать это с помощью одной функции.


                                    <LineBreak/>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontWeight="Bold" FontSize="25">Полиморфизм в Python:</Span>
                                    <LineBreak/>
                                    <LineBreak/>
                                    Этот код демонстрирует концепцию наследования и переопределения методов в классах Python. Он показывает, как подклассы могут переопределять методы, определенные в их родительском классе, для обеспечения определенного поведения, все еще наследуя другие методы от родительского класса.
                                    
                                    
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="560" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] class Person(object):<LineBreak/>
                                            [2]<Span Foreground="Transparent">____</Span>def intro(self):<LineBreak/>
                                            [3]<Span Foreground="Transparent">________</Span>print("There are many types of birds.")<LineBreak/>
                                            [4]<Span Foreground="Transparent">____</Span>def flight(self):<LineBreak/>
                                            [5]<Span Foreground="Transparent">________</Span>print("Most of the birds can fly but some cannot.")<LineBreak/>
                                            [6]<LineBreak/>
                                            [7] class sparrow(Bird):<LineBreak/>
                                            [8]<Span Foreground="Transparent">____</Span>def flight(self):<LineBreak/>
                                            [9]<LineBreak/>
                                            [10] class ostrich(Bird):<LineBreak/>
                                            [11]<Span Foreground="Transparent">____</Span>def flight(self):<LineBreak/>
                                            [12]<Span Foreground="Transparent">________</Span>print("Ostriches cannot fly.")<LineBreak/>
                                            [13]<LineBreak/>
                                            [14]<LineBreak/>
                                            [15] obj_bird = Bird()<LineBreak/>
                                            [16] obj_spr = sparrow()<LineBreak/>
                                            [17] obj_ost = ostrich()<LineBreak/>
                                            [18]<LineBreak/>
                                            [19] obj_bird.intro()<LineBreak/>
                                            [20] obj_bird.flight()<LineBreak/>
                                            [21]<LineBreak/>
                                            [22] obj_spr.intro()<LineBreak/>
                                            [23] obj_spr.flight()<LineBreak/>
                                            [24]<LineBreak/>
                                            [25] obj_ost.intro()<LineBreak/>
                                            [26] obj_ost.flight()<LineBreak/>
                                            [27]<LineBreak/>
                                            [28]<LineBreak/>
                                            [29] КОД ВЫВЕДЕТ:<LineBreak/>
                                            [30] There are many types of birds.<LineBreak/>
                                            [31] Most of the birds can fly but some cannot.<LineBreak/>
                                            [32] There are many types of birds.<LineBreak/>
                                            [33] Sparrows can fly.<LineBreak/>
                                            [34] There are many types of birds.<LineBreak/>
                                            [35] Ostriches cannot fly.<LineBreak/>
                                        </TextBlock>
                                    </Border>
                                </Paragraph>



                                <!--написание Инкапсуляция Python-->
                                <Paragraph>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="35" FontWeight="Bold">
                                        <Span Foreground="Transparent">
                                            _________________
                                        </Span>
                                        ИНКАПСУЛЯЦИЯ PYTHON
                                    </Span>
                                    <LineBreak/>
                                    <LineBreak/>
                                    Инкапсуляция является одной из фундаментальных концепций объектно-ориентированного программирования (ООП). Она описывает идею упаковки данных и методы, которые работают с данными в рамках одного модуля. Это накладывает ограничения на прямой доступ к переменным и методам и может предотвратить случайное изменение данных. Чтобы предотвратить случайное изменение, переменная объекта может быть изменена только методом объекта. Эти типы переменных известны как частные переменные.
                                    <LineBreak/>
                                    <LineBreak/>
                                    Класс является примером инкапсуляции, поскольку он инкапсулирует все данные, которые являются функциями-членами, переменными и т.д.

                                    <LineBreak/>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontWeight="Bold" FontSize="25">Инкапсуляция в Python:</Span>
                                    <LineBreak/>
                                    <LineBreak/>
                                    В приведенном выше примере мы создали переменную "c" в качестве частного атрибута. Мы даже не можем получить прямой доступ к этому атрибуту и даже изменить его значение.

                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="560" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] # Создание базового класса<LineBreak/>
                                            [2] class Base:<LineBreak/>
                                            [3]<Span Foreground="Transparent">____</Span>def __init__(self):<LineBreak/>
                                            [4]<Span Foreground="Transparent">________</Span>self.a = "Tree":<LineBreak/>
                                            [5]<Span Foreground="Transparent">________</Span>self.__c = "Car"<LineBreak/>
                                            [6] # Создание производного класса<LineBreak/>
                                            [7] class Derived(Base):<LineBreak/>
                                            [8]<Span Foreground="Transparent">____</Span>def __init__(self):<LineBreak/>
                                            [9]<Span Foreground="Transparent">________</Span># Вызывающий конструктор базового класса <LineBreak/>
                                            [10]<Span Foreground="Transparent">________</Span>super().__init__(self)<LineBreak/>
                                            [11]<Span Foreground="Transparent">________</Span>print("Calling private member of base class: ")<LineBreak/>
                                            [12]<Span Foreground="Transparent">________</Span>print(self.__c)<LineBreak/>
                                            [13]<LineBreak/>
                                            [14]<LineBreak/>
                                            [15] obj1 = Base()<LineBreak/>
                                            [16] print(obj1.a)<LineBreak/>
                                            [17] <LineBreak/>
                                            [18] <LineBreak/>
                                            [19] КОД ВЫВЕДЕТ:<LineBreak/>
                                            [20] Tree<LineBreak/>
                                        </TextBlock>
                                    </Border>
                                </Paragraph>
                            </Section>
                        </FlowDocument>
                    </RichTextBox>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!--КЛАСС И ОБЪЕКТ-->
    <Style TargetType="{x:Type RichTextBox}" x:Key="Class_Object_RichTextBox">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RichTextBox">
                    <RichTextBox HorizontalAlignment="Stretch" VerticalAlignment="Stretch" 
                                 Foreground="AliceBlue"
                                 Background="Transparent"
                                 FontSize="18"
                                 BorderThickness="0"
                                 IsReadOnly="True">
                        <FlowDocument>
                            <!--написание -->
                            <Section>
                                <Paragraph>
                                    Класс - это определяемая пользователем схема или прототип, на основе которого создаются объекты. Классы предоставляют средства объединения данных и функциональности воедино. Создание нового класса создает объект нового типа, позволяющий создавать новые экземпляры этого типа. К каждому экземпляру класса могут быть прикреплены атрибуты для поддержания его состояния. Экземпляры класса также могут иметь методы (определенные их классом) для изменения их состояния.
                                    <LineBreak/>
                                    <LineBreak/>
                                    Чтобы понять необходимость создания класса и объекта в Python давайте рассмотрим пример, предположим, вы хотели отслеживать количество собак, которые могут иметь разные атрибуты, такие как порода и возраст. Если используется список, то первым элементом может быть порода собаки, а второй элемент может представлять ее возраст. Предположим, что существует 100 разных собак, тогда как бы вы узнали, какой элемент должен быть каким? Что, если бы вы захотели добавить другие свойства к этим dogs? Здесь не хватает организации, и это как раз то, что нужно для классов.


                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Синтаксис определения класса:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Green" BorderThickness="2" Padding="5" Width="360" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] class ClassName:<LineBreak/>
                                            [2]<Span Foreground="Transparent">____</Span> # Statement
                                        </TextBlock>
                                    </Border>

                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Синтаксис определения объекта:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Green" BorderThickness="2" Padding="5" Width="360" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] obj = ClassName()<LineBreak/>
                                            [2] print(obj.atrr)
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    <LineBreak/>

                                    Класс создает определяемую пользователем структуру данных, которая содержит свои собственные элементы данных и функции-члены, к которым можно получить доступ и использовать, создав экземпляр этого класса. Класс подобен схеме объекта.
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontWeight="Bold">Некоторые моменты о классе Python:</Span>
                                    <LineBreak/>
                                    <Span Foreground="Transparent">____</Span> ● Классы создаются с помощью ключевого слова class.
                                    <LineBreak/>
                                    <Span Foreground="Transparent">____</Span> ● Атрибуты - это переменные, которые принадлежат классу.
                                    <LineBreak/>
                                    <Span Foreground="Transparent">____</Span> ● Атрибуты всегда являются общедоступными и к ним можно получить доступ с помощью оператора точка (.)
                                    <Span Foreground="Transparent">______</Span> Например: Мой класс.Myattribute
                                    
                                </Paragraph>


                                <!--Написание Создание класса Python-->
                                <Paragraph>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="35" FontWeight="Bold">
                                        <Span Foreground="Transparent">
                                            ________________
                                        </Span>
                                        СОЗДАНИЕ КЛАССА PYTHON
                                    </Span>
                                    <LineBreak/>
                                    <LineBreak/>
                                    Здесь ключевое слово class указывает, что вы создаете класс, за которым следует имя класса (в данном случае Dog).

                                    
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>

                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="360" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
                                            [1] class Dog:<LineBreak/>
                                            [2] <Span Foreground="Transparent">____</Span> sound = "гав"
                                        </TextBlock>
                                    </Border>
                                    

                                </Paragraph>

                                <!--Написание объект Python-->
                                <Paragraph>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="35" FontWeight="Bold">
                                        <Span Foreground="Transparent">
                                            _________________
                                        </Span>
                                        ОБЪЕКТ КЛАССА PYTHON
                                    </Span>
                                    <LineBreak/>
                                    <LineBreak/>
                                    Объект является экземпляром класса. Класс подобен чертежу, в то время как экземпляр является копией класса с фактическими значениями. Это больше не идея, это реальная собака, как собака породы мопс, которой семь лет. У вас может быть много dogs для создания множества различных экземпляров, но без класса в качестве руководства вы бы заблудились, не зная, какая информация требуется.
                                    <LineBreak/>
                                    <LineBreak/>
                                    
                                    
                                    <Span FontWeight="Bold">
                                        Объект состоит из:
                                    </Span>
                                    <LineBreak/>
                                    <Span>
                                        <Span Foreground="Transparent">_____</Span> ● Состояние:
                                        Оно представлено атрибутами объекта. Оно также отражает свойства объекта.
                                        <LineBreak/>
                                    </Span>
                                    <Span>
                                        <Span Foreground="Transparent">____</Span> ● Поведение:
                                        Оно представлено методами объекта. Оно также отражает реакцию объекта на другие объекты.
                                        <LineBreak/>
                                    </Span>
                                    <Span>
                                        <Span Foreground="Transparent">____</Span> ● Идентификатор:
                                        Присваивает объекту уникальное имя и позволяет одному объекту взаимодействовать с
                                        <LineBreak/>
                                        <Span Foreground="Transparent">______</Span> другими объектами.
                                        <LineBreak/>
                                    </Span>


                                    <LineBreak/>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontWeight="Bold" FontSize="25">Объявление объектов Class (также называемое созданием экземпляра класса):</Span>
                                    <LineBreak/>
                                    <LineBreak/>

                                    Считается, что при создании объекта класса создается экземпляр класса. Все экземпляры имеют общие атрибуты и поведение класса. Но значения этих атрибутов, то есть состояния, уникальны для каждого объекта. Один класс может иметь любое количество экземпляров.

                                    <LineBreak/>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontWeight="Bold" FontSize="25">Пример класса и объекта Python:</Span>
                                    <LineBreak/>
                                    <LineBreak/>
                                    Создание объекта на Python включает в себя создание экземпляра класса для создания нового экземпляра этого класса. Этот процесс также называется созданием экземпляра объекта.

                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>
                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="560" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
        [1] # Программа на Python3 для<LineBreak/>
        [2] # демонстрации создания<LineBreak/>
        [3] # экземпляра класса<LineBreak/>
        [4] class Dog:<LineBreak/>
        [5]<Span Foreground="Transparent">____</Span># Простой класс<LineBreak/>
        [6]<Span Foreground="Transparent">____</Span>attr1 = "млекопитающее"<LineBreak/>
        [7]<Span Foreground="Transparent">____</Span>attr2 = "собака"<LineBreak/>
        [8]<Span Foreground="Transparent">____</Span># Пример метода<LineBreak/>
        [9]<Span Foreground="Transparent">____</Span>def fun(self):<LineBreak/>
        [10]<Span Foreground="Transparent">________</Span>print("Я", self.attr1)<LineBreak/>
        [11]<Span Foreground="Transparent">________</Span>print("Я", self.attr2)<LineBreak/>
        [12]<LineBreak/>
        [13] # Код для запуска<LineBreak/>
        [14] # Создание объекта<LineBreak/>
        [15] Rodger = Dog()<LineBreak/>
        [16]<LineBreak/>
        [17] # Доступ к атрибутам класса<LineBreak/>
        [18] # и методу через объект<LineBreak/>
        [19] print(Rodger.attr1)<LineBreak/>
        [20] Rodger.fun()<LineBreak/>
        [21]<LineBreak/>
        [22]<LineBreak/>
        [23]<LineBreak/>
        [24] КОД ВЫВЕДЕТ:<LineBreak/>
        [25] млекопитающее<LineBreak/>
        [26] Я млекопитающее<LineBreak/>
        [27] Я собака<LineBreak/>
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    <LineBreak/>
                                    В приведенном выше примере создается объект, который в основном является собакой по имени Роджер. У этого класса есть только два атрибута класса, которые говорят нам, что Роджер - это собака и млекопитающее.
                                    <LineBreak/>
                                    В этом примере мы создаем класс Dog и создали две переменные класса attr1 и attr2. Мы создали метод с именем fun() который возвращает строку “I'm a, {attr1}” и I'm a, {attr2}. Мы создали объект класса Dog и печатаем по адресу attr1 объекта. Наконец, мы вызываем функцию fun().
                                    
                                    
                                    <LineBreak/>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontWeight="Bold" FontSize="25">Параметр Self:</Span>
                                    <LineBreak/>
                                    <LineBreak/>
                                    Когда мы вызываем метод этого объекта как myobject.method(arg1, arg2), он автоматически преобразуется Python в MyClass.method(myobject, arg1, arg2) – это все специальные self.

                                    
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>
                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="560" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
        [1] class GFG:<LineBreak/>
        [2]<Span Foreground="Transparent">____</Span>def __init__(self, name, company):<LineBreak/>
        [3]<Span Foreground="Transparent">________</Span>self.name = name<LineBreak/>
        [4]<Span Foreground="Transparent">________</Span>self.company = company<LineBreak/>
        [5]<LineBreak/>
        [6]<Span Foreground="Transparent">____</Span>def show(self):<LineBreak/>
        [7]<Span Foreground="Transparent">________</Span>print("Привет, меня зовут " + self.name + " и я" +<LineBreak/>
        [8]<Span Foreground="Transparent">____________</Span>" работаю в " + self.company + ".")<LineBreak/>
        [9]<LineBreak/>
        [10] obj = GFG("Джон", "Яндекс")<LineBreak/>
        [11] obj.show()<LineBreak/>
        [12]<LineBreak/>
        [13]<LineBreak/>
        [14]<LineBreak/>
        [15] КОД ВЫВЕДЕТ:<LineBreak/>
        [16] Привет, меня зовут Джон и я работаю в Яндекс.<LineBreak/>
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    <LineBreak/>
                                    В этом примере мы создаем класс GFG и создали name и company переменные экземпляра в конструкторе. Мы создали метод с именем say_hi() который возвращает строку “Здравствуйте, меня зовут ” + {name} +” и я работаю в “+{company}+”.”.Мы создали объект класса person и передаем имя Джон и компания Яндекс переходит к переменной экземпляра. Наконец, мы вызываем show() класса.


                                    <LineBreak/>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontWeight="Bold" FontSize="25">Метод __init__():</Span>
                                    <LineBreak/>
                                    <LineBreak/>
                                    Метод __init__ аналогичен конструкторам в C ++ и Java. Конструкторы используются для инициализации состояния объекта. Как и методы, конструктор также содержит набор инструкций (т.Е. высказываний), которые выполняются во время создания объекта. Он запускается, как только создается экземпляр объекта класса. Метод полезен для выполнения любой инициализации, которую вы хотите выполнить с вашим объектом.

                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>
                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="560" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
        [1] # Класс с примером метода init<LineBreak/>
        [2] class Person:<LineBreak/>
        [3]<Span Foreground="Transparent">____</Span># Метод init или конструктор<LineBreak/>
        [4]<Span Foreground="Transparent">____</Span>def __init__(self, name):<LineBreak/>
        [5]<Span Foreground="Transparent">________</Span>self.name = name<LineBreak/>
        [6]<LineBreak/>
        [7]<Span Foreground="Transparent">____</Span># Пример метода<LineBreak/>
        [8]<Span Foreground="Transparent">____</Span>def say_hi(self):<LineBreak/>
        [9]<Span Foreground="Transparent">________</Span>print('Привет, меня зовут', self.name)<LineBreak/>
        [10]<LineBreak/>
        [11]p = Person('Николай')<LineBreak/>
        [12]p.say_hi()<LineBreak/>
        [13]<LineBreak/>
        [14]<LineBreak/>
        [15]<LineBreak/>
        [16] КОД ВЫВЕДЕТ:<LineBreak/>
        [17] Привет, меня зовут Николай<LineBreak/>
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    <LineBreak/>
                                    В этом примере мы создаем класс Person, мы создали Name переменная экземпляра в конструкторе. Мы создали метод с именем say_hi(), который возвращает строку “Привет, меня зовут {name}”. Мы создали объект класса Person и передаем имя Николай переменной экземпляра. Наконец, мы вызываем say_hi() класса.



                                    <LineBreak/>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontWeight="Bold" FontSize="25">Метод __str__():</Span>
                                    <LineBreak/>
                                    <LineBreak/>
                                    В языке Python существует специальный метод с именем __str__(), который используется для определения того, как объект класса должен быть представлен в виде строки. Этот метод часто используется для создания удобочитаемого текстового представления объекта, что может быть полезным для ведения журнала, отладки или отображения информации об объекте пользователям. При использовании встроенной функции str() для преобразования объекта в строку или при вызове функции print() с объектом в качестве аргумента, метод __str__() автоматически вызывается. Вы можете изменить способ, которым объекты класса представляются в строках, путем определения метода __str__().


                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример:</Bold>
                                    </Span>
                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="560" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
        [1] class GFG:<LineBreak/>
        [2]<Span Foreground="Transparent">____</Span>def __init__(self, name, company):<LineBreak/>
        [3]<Span Foreground="Transparent">________</Span>self.name = name<LineBreak/>
        [4]<Span Foreground="Transparent">________</Span>self.company = company<LineBreak/>
        [5]<LineBreak/>
        [6]<Span Foreground="Transparent">____</Span>def __str__(self):<LineBreak/>
        [7]<Span Foreground="Transparent">________</Span>return f"Меня зовут {self.name} и я работаю в {self.company}."<LineBreak/>
        [8]<LineBreak/>
        [9]my_obj = GFG("Джон", "Яндекс")<LineBreak/>
        [10]print(my_obj)<LineBreak/>
        [11]<LineBreak/>
        [12]<LineBreak/>
        [13]<LineBreak/>
        [14] КОД ВЫВЕДЕТ:<LineBreak/>
        [15] Привет, меня зовут Джон и я работаю в Яндекс<LineBreak/>
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    <LineBreak/>
                                    В данном примере мы определяем класс с названием GFG. Внутри класса создаются две переменные экземпляра: name (имя) и company (компания). В методе __str__() мы возвращаем строку, которая объединяет значение переменной экземпляра name и значение переменной экземпляра company. Затем мы создаем объект класса GFG и вызываем метод __str__() для этого объекта.

                                </Paragraph>


                                <!--написание Переменная класса и экземпляра-->
                                <Paragraph>
                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="35" FontWeight="Bold">
                                        <Span Foreground="Transparent">
                                            __________
                                        </Span>
                                        ПЕРЕМЕННЫЕ КЛАССА И ЭКЗЕМПЛЯРА
                                    </Span>
                                    <LineBreak/>
                                    <LineBreak/>

                                    Переменные экземпляра предназначены для данных, уникальных для каждого экземпляра, а переменные класса предназначены для атрибутов и методов, общих для всех экземпляров класса. Переменные экземпляра - это переменные, значение которых присваивается внутри конструктора или метода с помощью self, тогда как переменные класса - это переменные, значение которых присваивается в классе.


                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Определение переменных экземпляра с помощью конструктора:</Bold>
                                    </Span>
                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="560" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
        [1]  # Программа на Python3 для демонстрации,<LineBreak/>
        [2]  # что переменные, присвоенные в объявлении класса,<LineBreak/>
        [3]  # являются переменными класса, а переменные внутри методов<LineBreak/>
        [4]  # и конструкторов - переменные экземпляра.<LineBreak/>
        [5]<LineBreak/>
        [6]  # Класс для собаки<LineBreak/>
        [7] class Dog:<LineBreak/>
        [8]<Span Foreground="Transparent">____</Span># Переменная класса<LineBreak/>
        [9]<Span Foreground="Transparent">____</Span>animal = 'собака'<LineBreak/>
        [10]<LineBreak/>
        [11]<Span Foreground="Transparent">____</Span># Метод init или конструктор<LineBreak/>
        [12]<Span Foreground="Transparent">____</Span>def __init__(self, breed, color):<LineBreak/>
        [13]<Span Foreground="Transparent">________</Span># Переменные экземпляра<LineBreak/>
        [14]<Span Foreground="Transparent">________</Span>self.breed = breed<LineBreak/>
        [15]<Span Foreground="Transparent">________</Span>self.color = color<LineBreak/>
        [16]<LineBreak/>
        [17]  # Объекты класса Dog<LineBreak/>
        [18]  Rodger = Dog("Мопс", "коричневый")<LineBreak/>
        [19]  Buzo = Dog("Бульдог", "черный")<LineBreak/>
        [20]<LineBreak/>
        [21]  print('Детали Роджера:')<LineBreak/>
        [22]  print('Роджер - это', Rodger.animal)<LineBreak/>
        [23]  print('Порода: ', Rodger.breed)<LineBreak/>
        [24]  print('Цвет: ', Rodger.color)<LineBreak/>
        [25]<LineBreak/>
        [26]  print('\nДетали Бузо:')<LineBreak/>
        [27]  print('Бузо - это', Buzo.animal)<LineBreak/>
        [28]  print('Порода: ', Buzo.breed)<LineBreak/>
        [29]  print('Цвет: ', Buzo.color)<LineBreak/>
        [30]<LineBreak/>
        [31]  # Переменные класса можно получить, используя имя класса<LineBreak/>
        [32]  print("\nДоступ к переменной класса, используя имя класса")<LineBreak/>
        [33]  print(Dog.animal)<LineBreak/>
        [34]<LineBreak/>
        [35]<LineBreak/>
        [36]<LineBreak/>
        [37] КОД ВЫВЕДЕТ:<LineBreak/>
        [38] Детали Роджера:<LineBreak/>
        [39] Роджер - это собака<LineBreak/>
        [40] Разводить: Мопс<LineBreak/>
        [41] Цвет: коричневый<LineBreak/>
        [42] Детали Buzo:<LineBreak/>
        [43] Бузо - это собака<LineBreak/>
        [44] Разводить: Бульдог<LineBreak/>
        [45] Цвет: черный<LineBreak/>
        [46] Доступ к переменной класса с использованием имени класса<LineBreak/>
        [47] собака<LineBreak/>
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    <LineBreak/>
                                    Класс с названием Dog определяется с использованием переменной класса animal, установленной в строку "dog". Переменные класса являются общими для всех объектов класса и могут быть доступны с использованием имени класса. Класс Dog имеет две переменные экземпляра: breed (порода) и color (окрас). Позже мы создадим два объекта класса Dog и выведем значения обоих объектов с использованием переменной класса animal.
                                    <LineBreak/>

                                    <LineBreak/>
                                    <LineBreak/>
                                    <Span FontSize="20">
                                        <Bold>Пример на Python3 для демонстрации создания переменных экземпляра внутри методов:</Bold>
                                    </Span>
                                    <LineBreak/>
                                    <Border BorderBrush="Red" BorderThickness="2" Padding="5" Width="560" HorizontalAlignment="Left" CornerRadius="10" Margin="5">
                                        <TextBlock>
        [1]  # Программа на Python3 для демонстрации, что можно создавать<LineBreak/>
        [2]  # переменные экземпляра внутри методов.<LineBreak/>
        [3]<LineBreak/>
        [4]  # Класс для собаки<LineBreak/>
        [5]  class Dog:<LineBreak/>
        [6]    <Span Foreground="Transparent">____</Span># Переменная класса<LineBreak/>
        [7]    <Span Foreground="Transparent">____</Span>animal = 'собака'<LineBreak/>
        [8]<LineBreak/>
        [9]    <Span Foreground="Transparent">____</Span># Метод init или конструктор<LineBreak/>
        [10]   <Span Foreground="Transparent">____</Span>def __init__(self, breed):<LineBreak/>
        [11]       <Span Foreground="Transparent">________</Span># Переменная экземпляра<LineBreak/>
        [12]       <Span Foreground="Transparent">________</Span>self.breed = breed<LineBreak/>
        [13]<LineBreak/>
        [14]   <Span Foreground="Transparent">____</Span># Добавляет переменную экземпляра<LineBreak/>
        [15]   <Span Foreground="Transparent">____</Span>def setColor(self, color):<LineBreak/>
        [16]       <Span Foreground="Transparent">________</Span>self.color = color<LineBreak/>
        [17]<LineBreak/>
        [18]   <Span Foreground="Transparent">____</Span># Извлекает переменную экземпляра<LineBreak/>
        [19]   <Span Foreground="Transparent">____</Span>def getColor(self):<LineBreak/>
        [20]       <Span Foreground="Transparent">________</Span>return self.color<LineBreak/>
        [21]<LineBreak/>
        [22]  # Код драйвера<LineBreak/>
        [23]  Rodger = Dog("мопс")<LineBreak/>
        [24]  Rodger.setColor("коричневый")<LineBreak/>
        [25]  print(Rodger.getColor())<LineBreak/>
        [26]<LineBreak/>
        [27]<LineBreak/>
        [28]<LineBreak/>
        [29] КОД ВЫВЕДЕТ:<LineBreak/>
        [30] brown<LineBreak/>
                                        </TextBlock>
                                    </Border>
                                    <LineBreak/>
                                    <LineBreak/>
                                    В данном примере мы определили класс с именем Dog, а также создали переменную класса animal. В конструкторе класса мы создали переменную экземпляра breed. Класс Dog включает два метода: setColor и getColor, которые используются для установки и получения значения переменной экземпляра соответственно. Мы создали объект класса Dog и присвоили переменной экземпляра значение "brown", затем выводим это значение в терминале.

                                </Paragraph>
                                
                            </Section>
                        </FlowDocument>
                    </RichTextBox>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>